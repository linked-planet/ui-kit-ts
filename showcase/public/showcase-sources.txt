import { Accordion } from "@linked-planet/ui-kit-ts"
import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region accordion-single
function AccordionExample() {
	return (
		<div className="bg-surface">
			<Accordion.Container type="single" defaultValue="item-1" data-id="test-data-id">
				<Accordion.Item value="item-1">
					<Accordion.Trigger>Is it accessible?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It adheres to the WAI-ARIA design pattern.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-2">
					<Accordion.Trigger>Is it unstyled?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It is unstyled by default, giving you freedom over
						the look and feel.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-3">
					<Accordion.Trigger>Can it be animated?</Accordion.Trigger>
					<Accordion.Content>
						Yes! You can animate the Accordion with CSS or
						JavaScript.
					</Accordion.Content>
				</Accordion.Item>
			</Accordion.Container>
		</div>
	)
}
//#endregion accordion-single

//#region accordion-multi
function AccordionMultiExample() {
	return (
		<div className="bg-surface">
			<Accordion.Container type="multiple">
				<Accordion.Item value="item-1">
					<Accordion.Trigger>Is it accessible?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It adheres to the WAI-ARIA design pattern.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-2">
					<Accordion.Trigger>Is it unstyled?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It is unstyled by default, giving you freedom over
						the look and feel.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-3">
					<Accordion.Trigger>Can it be animated?</Accordion.Trigger>
					<Accordion.Content>
						Yes! You can animate the Accordion with CSS or
						JavaScript.
					</Accordion.Content>
				</Accordion.Item>
			</Accordion.Container>
		</div>
	)
}
//#endregion accordion-multi

export default function AnimatedListShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Accordion"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Accordion",
				},
			]}
			examples={[
				{
					title: "Accordion Single",
					example: <AccordionExample />,
					sourceCodeExampleId: "accordion-single",
				},
				{
					title: "Accordion Multi",
					example: <AccordionMultiExample />,
					sourceCodeExampleId: "accordion-multi",
				},
			]}
		/>
	)
}

import React, { useState } from "react"

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { AnimatedList, Button, ButtonGroup } from "@linked-planet/ui-kit-ts"

//#region animated-list
function AnimatedListExample() {
	const [showItem0, setShowItem0] = useState(true)
	const [showItem1, setShowItem1] = useState(true)
	const [showItem2, setShowItem2] = useState(true)

	const [enableEnterAnimation, setEnableEnterAnimation] = useState(true)
	const [enableExitAnimation, setEnableExitAnimation] = useState(true)

	const className = "border rounded border-border p-4 bg-brand"

	return (
		<>
			<ButtonGroup className="mb-4">
				<Button onClick={() => setShowItem0(!showItem0)}>
					{showItem0 ? "Hide Item 0" : "Show Item 0"}
				</Button>
				<Button onClick={() => setShowItem1(!showItem1)}>
					{showItem0 ? "Hide Item 1" : "Show Item 1"}
				</Button>
				<Button onClick={() => setShowItem2(!showItem2)}>
					{showItem0 ? "Hide Item 2" : "Show Item 2"}
				</Button>
			</ButtonGroup>
			<ButtonGroup className="mb-4 ml-8">
				<Button
					onClick={() =>
						setEnableEnterAnimation(!enableEnterAnimation)
					}
				>
					{enableEnterAnimation
						? "Disable Enter Animation"
						: "Enable Enter Animation"}
				</Button>
				<Button
					onClick={() => setEnableExitAnimation(!enableExitAnimation)}
				>
					{enableExitAnimation
						? "Disable Exit Animation"
						: "Enable Exit Animation"}
				</Button>
			</ButtonGroup>
			<AnimatedList
				className="flex flex-col gap-2"
				classNames={{
					enter: "duration-300 ease-in-out opacity-5 relative -translate-x-full",
					enterDone:
						"duration-300 ease-in-out opacity-100 relative translate-x-0",
					exit: "duration-300 ease-in-out opacity-5 relative -translate-x-full",
				}}
				timeout={300}
				enter={enableEnterAnimation}
				exit={enableExitAnimation}
				onEnter={() => console.log("Enter")}
				onEntering={() => console.log("Entering")}
				onEntered={() => console.log("Entered")}
				onExit={() => console.log("Exit")}
				onExiting={() => console.log("Exiting")}
				onExited={() => console.log("Exited")}
			>
				{showItem0 && <div className={className}>Item 0</div>}
				{showItem1 && <div className={className}>Item 1</div>}
				{showItem2 && <div className={className}>Item 2</div>}
			</AnimatedList>
		</>
	)
}
//#endregion animated-list

export default function AnimatedListShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Animated List"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#AnimatedList",
				},
			]}
			examples={[
				{
					title: "Animated List",
					example: <AnimatedListExample />,
					sourceCodeExampleId: "animated-list",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

export default function AppLayoutShowcase(props: ShowcaseProps) {
	const iframe = (
		<div>
			<iframe
				src="/ui-kit-ts/applayoutexample/index.html"
				title="App Layout"
				width="1100"
				height="800"
			/>
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="App Layout"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/applayoutexample/index.html",
				},
			]}
			examples={[
				{
					title: "App Layout",
					example: iframe,
					sourceCodeExampleId: "applayoutexample",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"
import {
	Avatar as LPAvatar,
	AvatarItem as LPAvatarItem,
} from "@linked-planet/ui-kit-ts"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"

function AvatarShowcase(props: ShowcaseProps) {
	const example1AK = (
		<>
			{/*<div className="flex gap-4">
				<AvatarItem
					avatar={
						<Avatar
							size="xsmall"
							appearance="circle"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="small"
							appearance="square"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="medium"
							name="M T"
							presence="busy"
							status="declined"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" presence="focus" status="locked" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" isDisabled presence="online" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="xlarge"
							appearance="square"
							label="testlabel"
							name="M T"
							presence="offline"
						/>
					}
				/>
				<Avatar size="xxlarge" />
				<Avatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<Avatar borderColor="#ff0000" />
				<span>as link:</span>
				<Avatar size="medium" name="M T" href="#" />
				<Avatar size="xlarge" href="#" />
				<Avatar href="#" borderColor="#00ff00" />
				<Avatar size="medium" isDisabled={true} name="M T" href="#" />
				<Avatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<Avatar href="#" src={"images/github-logo.png"} size="xlarge" />
				</div>*/}
		</>
	)

	//#region avatar1
	const example1 = (
		<div>
			{example1AK}
			<div className="flex gap-4">
				<LPAvatar
					size="xsmall"
					appearance="circle"
					presence="online"
					status="approved"
				/>
				<LPAvatar
					size="small"
					appearance="square"
					presence="online"
					status="approved"
				/>
				<LPAvatar size="medium" presence="busy" status="declined" />
				<LPAvatar size="large" presence="focus" status="locked" />
				<LPAvatar size="large" isDisabled presence="online" />
				<LPAvatar
					size="xlarge"
					appearance="square"
					label="testlabel"
					presence="offline"
				/>
				<LPAvatar size="xxlarge" />
				<LPAvatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<LPAvatar borderColor="#ff0000" />
				<span>as link:</span>
				<LPAvatar size="medium" name="M T" label="testlabel" href="#" />
				<LPAvatar size="xlarge" href="#" />
				<LPAvatar size="medium" href="#" />
				<LPAvatar href="#" borderColor="#00ff00" />
				<LPAvatar size="medium" isDisabled={true} href="#" />
				<LPAvatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<LPAvatar
					href="#"
					src={"images/github-logo.png"}
					size="xlarge"
				/>
			</div>
		</div>
	)
	//#endregion avatar1

	const example2AK = (
		<>
			{/*<AvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={<Avatar size="medium" borderColor="red" />}
			/>
	<Avatar size="medium" />*/}
		</>
	)

	//#region avatar2
	const example2 = (
		<div className="flex flex-col">
			{example2AK}
			<LPAvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={
					<LPAvatar
						size="large"
						presence="online"
						borderColor="red"
					/>
				}
			/>
			<LPAvatarItem
				primaryText={
					<div>
						<h1>TEST H1</h1>
					</div>
				}
				secondaryText={
					<div>
						<div className="bg-brand text-danger-bold h-4 w-12 flex-none">
							UUU
						</div>
					</div>
				}
				avatar={<LPAvatar size="large" presence="online" />}
			/>
		</div>
	)
	//#endregion avatar2

	const example3AK = (
		<div className="flex flex-1 justify-center border-2">
			{/*<AvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<Avatar size="medium" />}
				/>*/}
		</div>
	)

	//#region avatar3
	const example3 = (
		<div>
			{example3AK}
			<div className="flex flex-1 justify-center border-2">
				<LPAvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<LPAvatar size="medium" />}
				/>
			</div>
		</div>
	)
	//#endregion avatar3

	return (
		<ShowcaseWrapperItem
			name="Avatar"
			description="Avatars are only the round avatar, while AvatarItem is rectangular and has username, and email."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Avatars",
				},
			]}
			examples={[
				{
					title: "Avatar",
					example: example1,
					sourceCodeExampleId: "avatar1",
				},
				{
					title: "Avatar Item",
					example: example2,
					sourceCodeExampleId: "avatar2",
				},
				{
					title: "Avatar Item 2",
					example: example3,
					sourceCodeExampleId: "avatar3",
				},
			]}
		/>
	)
}

export default AvatarShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AwesomeSlider from "react-awesome-slider"

import "react-awesome-slider/dist/styles.css"

function AwesomeSliderShowcase(props: ShowcaseProps) {
	//#region awesome-slider
	const example = (
		<div
			style={{
				minWidth: 600,
				display: "flex",
				height: 200,
				position: "relative",
				zIndex: 0,
			}}
		>
			<AwesomeSlider bullets={false}>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/logo.png"
						width={100}
						height={100}
					/>
				</div>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/github-logo.png"
						width={100}
						height={100}
					/>
				</div>
			</AwesomeSlider>
		</div>
	)
	//#endregion awesome-slider

	return (
		<ShowcaseWrapperItem
			name="Awesome Slider"
			{...props}
			packages={[
				{
					name: "react-awesome-slider",
					url: "https://github.com/rcaferati/react-awesome-slider",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "awesome-slider",
				},
			]}
		/>
	)
}

export default AwesomeSliderShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKBadge from "@atlaskit/badge"
import { Badge } from "@linked-planet/ui-kit-ts"

function BadgeShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			{/*<div
				style={{
					display: "flex",
					gap: "1rem",
				}}
			>
				<AKBadge></AKBadge>
				<AKBadge appearance="added" />
				<AKBadge appearance="important" />
				<AKBadge appearance="removed" />
				<AKBadge appearance="primary" />
				<AKBadge appearance="primaryInverted">test</AKBadge>
			</div>*/}
		</>
	)

	//#region badge
	const lpExample = (
		<div
			style={{
				display: "flex",
				gap: "1rem",
			}}
		>
			<Badge>0</Badge>
			<Badge appearance="added">1</Badge>
			<Badge appearance="important">2</Badge>
			<Badge appearance="removed">3</Badge>
			<Badge appearance="primary">4</Badge>
			<Badge appearance="primaryInverted">test</Badge>
		</div>
	)
	//#endregion badge

	const example = (
		<div>
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Badge"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Badge",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example,
					sourceCodeExampleId: "badge",
				},
			]}
		/>
	)
}

export default BadgeShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ErrorIcon from "@atlaskit/icon/glyph/error"
import CheckCircleOutlineIcon from "@atlaskit/icon/glyph/check-circle-outline"
import { Banner, IconSizeHelper } from "@linked-planet/ui-kit-ts"

function BannerShowcase(props: ShowcaseProps) {
	//#region banner-example
	const bannerExample = (
		<div className="flex w-full flex-col gap-4">
			<Banner appearance="announcement">Announcement Banner</Banner>
			<Banner appearance="warning">Warning Banner</Banner>
			<Banner
				appearance="error"
				icon={
					<IconSizeHelper>
						<ErrorIcon
							label=""
							secondaryColor="var(--ds-background-danger-bold, #DE350B)"
						/>
					</IconSizeHelper>
				}
			>
				Error Banner
			</Banner>
			<Banner
				appearance="success"
				icon={
					<IconSizeHelper>
						<CheckCircleOutlineIcon label="" />
					</IconSizeHelper>
				}
			>
				Success Banner
			</Banner>
			<Banner appearance="information">Information Banner</Banner>
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Banner"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "single?component=Banner",
				},
			]}
			examples={[
				{
					title: "Example",
					example: bannerExample,
					sourceCodeExampleId: "banner-example",
				},
			]}
		/>
	)
}

export default BannerShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Blanket, Button } from "@linked-planet/ui-kit-ts"

function BannerShowcase(props: ShowcaseProps) {
	//#region blanket-example
	const [showBlanket, setShowBlanket] = useState(false)

	const blanketExample = (
		<div className="flex w-full flex-col gap-4">
			<Button onClick={() => setShowBlanket(true)}>Show Blanket</Button>
			{showBlanket && (
				<Blanket onClick={() => setShowBlanket(false)}>
					<div className="flex size-full items-center justify-center">
						<div className="bg-surface rounded-md p-8">
							<h1 className="text-base font-bold">
								This is a blanket.
							</h1>
							<Button onClick={() => setShowBlanket(false)}>
								Close
							</Button>
						</div>
					</div>
				</Blanket>
			)}
		</div>
	)
	//#endregion blanket-example

	return (
		<ShowcaseWrapperItem
			name="Blanket"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "single?component=Blanket",
				},
			]}
			examples={[
				{
					title: "Example",
					example: blanketExample,
					sourceCodeExampleId: "blanket-example",
				},
			]}
		/>
	)
}

export default BannerShowcase

import { type CSSProperties, useMemo, useRef, useState } from "react"
import {
	BookCard,
	BookCardComponents,
	Tag,
	TagGroup,
	Badge,
	Fieldset,
	Button,
	ButtonGroup,
} from "@linked-planet/ui-kit-ts"

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { CSSTransition } from "react-transition-group"
import { TruncatedText } from "@linked-planet/ui-kit-ts/components/TruncatedText"

//#region bookcardcomponents
function BookCardComponentsExample() {
	return (
		<BookCardComponents.CardBase
			header={
				<BookCardComponents.CardHeader>
					<BookCardComponents.CardHeaderMeta>
						<BookCardComponents.CardHeaderTitle>
							Book Title very very very very very very very very
							very very very very very very very long
						</BookCardComponents.CardHeaderTitle>
						<BookCardComponents.CardHeaderSubtitle>
							Book Subtitle
						</BookCardComponents.CardHeaderSubtitle>
					</BookCardComponents.CardHeaderMeta>
					<BookCardComponents.CardHeaderActions>
						<BookCardComponents.CardHeaderActionsInfo>
							<Badge appearance="default">action</Badge>
						</BookCardComponents.CardHeaderActionsInfo>
					</BookCardComponents.CardHeaderActions>
				</BookCardComponents.CardHeader>
			}
			defaultOpen={true}
		>
			<BookCardComponents.CardGridBody>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title very very very very very very very very
						very very very very very very very long
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content</div>
				</BookCardComponents.CardBodyEntry>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title 2
					</BookCardComponents.CardBodyEntryTitle>
					<Tag>
						Lorem ipsum dolor sit, amet consectetur adipisicing
						elit. Consequatur qui fuga similique dicta doloremque
						incidunt aliquid nesciunt quae culpa? Eos expedita
						doloribus exercitationem nihil fuga quidem rem quod
						voluptate? A!
					</Tag>
				</BookCardComponents.CardBodyEntry>
			</BookCardComponents.CardGridBody>
		</BookCardComponents.CardBase>
	)
}
//#endregion bookcardcomponents

//#region bookcard-animation
function BookCardAnimationExample() {
	const [showCard, setShowCard] = useState(true)
	const nodeRef = useRef<HTMLDivElement>(null)

	return (
		<>
			<Button onClick={() => setShowCard(!showCard)} className="mb-4">
				Toggle Card
			</Button>
			<CSSTransition
				in={showCard}
				timeout={300} // this needs to be the same as the duration of the animation in the css
				classNames={{
					exit: "transition-opacity duration-300 ease-out opacity-0",
				}}
				nodeRef={nodeRef}
				unmountOnExit
			>
				<BookCardComponents.CardBase
					header={
						<BookCardComponents.CardHeader>
							<BookCardComponents.CardHeaderMeta>
								<BookCardComponents.CardHeaderTitle className="">
									Title
								</BookCardComponents.CardHeaderTitle>
							</BookCardComponents.CardHeaderMeta>
						</BookCardComponents.CardHeader>
					}
					defaultOpen={true}
					ref={nodeRef}
				>
					<BookCardComponents.CardGridBody>
						<BookCardComponents.CardBodyEntry>
							<BookCardComponents.CardBodyEntryTitle>
								Entry Title
							</BookCardComponents.CardBodyEntryTitle>
							<div>Book Entry Content</div>
						</BookCardComponents.CardBodyEntry>
					</BookCardComponents.CardGridBody>
				</BookCardComponents.CardBase>
			</CSSTransition>
		</>
	)
}
//#endregion bookcard-animation

function BookCardExample() {
	//#region bookcard
	const [bodyLayout, setBodyLayout] = useState<"row" | "grid" | "column">(
		"grid",
	)

	const [isClosed, setIsClosed] = useState<boolean | undefined>(undefined)

	const children = useMemo(() => {
		const childCount = bodyLayout === "column" ? 10 : 100
		const ret = Array(childCount)
		for (let i = 0; i < childCount; i++) {
			ret[i] = (
				<BookCardComponents.CardBodyEntry key={i}>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title {i}
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content {i}</div>
				</BookCardComponents.CardBodyEntry>
			)
		}
		return ret
	}, [bodyLayout])

	const bodyStyle = useMemo(() => {
		switch (bodyLayout) {
			case "row":
				break
			case "grid":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			case "column":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			default:
				break
		}
	}, [bodyLayout])

	const bookCardExample = (
		<>
			<BookCard
				title="Book Title very very very very very very very very very
						very very very very very very long"
				subtitle="Book Subtitle also very very very very very very long"
				upperTitle="Book Upper Title also looooooooooooooooooooooooooooong"
				headerPrefix="looooooooooooooooooooooooooooong prefix"
				bodyLayout={bodyLayout}
				bodyStyle={bodyStyle}
				closed={isClosed}
				actionsInfo={"Action:"}
				actions={
					<div className="flex items-center">
						<TagGroup>
							<Tag key="action" appearance="danger">
								DAUERAUSLEIHE
							</Tag>
							<Tag key="action 1" appearance="greenLight">
								action item
							</Tag>
						</TagGroup>
					</div>
				}
			>
				<>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<TruncatedText>
							truncated - Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Beatae aperiam tenetur est in
							quidem? Tempore, cumque perspiciatis optio aperiam
							dolorem saepe harum, sequi eaque nisi quas,
							assumenda praesentium! Labore, incidunt.
						</TruncatedText>
					</BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<TruncatedText>untruncated</TruncatedText>
					</BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<Tag>
							Lorem ipsum, dolor sit amet consectetur adipisicing
							elit. Illo cumque eum laborum voluptate ipsa sed
							consectetur tempore vel quia est quas itaque
							voluptatem neque odio, maiores ut cum at distinctio?
						</Tag>
						<Tag>
							Lorem ipsum, dolor sit amet consectetur adipisicing
							elit. Illo cumque eum laborum voluptate ipsa sed
							consectetur tempore vel quia est quas itaque
							voluptatem neque odio, maiores ut cum at distinctio?
						</Tag>
					</BookCardComponents.CardBodyEntry>
					{children}
				</>
			</BookCard>
		</>
	)
	//#endregion bookcard

	return (
		<div>
			<div className="mb-2 flex flex-row justify-between">
				<Fieldset legend="Book Card Collapsible">
					<ButtonGroup>
						<Button
							selected={isClosed === false}
							onClick={() => setIsClosed(false)}
						>
							Opened
						</Button>
						<Button
							selected={isClosed === true}
							onClick={() => setIsClosed(true)}
						>
							Closed
						</Button>
						<Button
							selected={isClosed === undefined}
							onClick={() => setIsClosed(undefined)}
						>
							Closed Undefined
						</Button>
					</ButtonGroup>
				</Fieldset>
				<Fieldset legend="Book Card Body Layout">
					<ButtonGroup>
						<Button
							selected={bodyLayout === "row"}
							onClick={() => setBodyLayout("row")}
						>
							Row
						</Button>
						<Button
							selected={bodyLayout === "grid"}
							onClick={() => setBodyLayout("grid")}
						>
							Grid
						</Button>
						<Button
							selected={bodyLayout === "column"}
							onClick={() => setBodyLayout("column")}
						>
							Column
						</Button>
					</ButtonGroup>
				</Fieldset>
			</div>
			{bookCardExample}
		</div>
	)
}

export default function BookCardShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Book Card (Components)"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description={
				<>
					<p>
						Book Card is a card component that is used to display
						search result information or similar. It can be used as
						a collapsible component or as a static component.
					</p>
					<p>
						If <b>closed</b> is used, the collapse state is
						controlled. By <b>defaultOpen</b> if it collapsible but
						uncontrolled. If both are undefined, the component is
						static.
					</p>
					<p>
						Book Card is a composition of several components. The
						components can be used individually or as a whole.
					</p>
				</>
			}
			examples={[
				{
					title: "Complete Bookcard",
					example: <BookCardExample key="bookcardexample" />,
					sourceCodeExampleId: "bookcard",
				},
				{
					title: "Components",
					example: (
						<BookCardComponentsExample key="bookcardcomponentexample" />
					),
					sourceCodeExampleId: "bookcardcomponents",
				},
				{
					title: "Animation",
					example: (
						<BookCardAnimationExample key="bookcardanimationexample" />
					),
					sourceCodeExampleId: "bookcard-animation",
				},
			]}
		/>
	)
}

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Breadcrumbs, Checkbox, Input, Label } from "@linked-planet/ui-kit-ts"

import AddCircleIcon from "@atlaskit/icon/glyph/add-circle"

//#region bread-crumbs-max-items-example
function MaxItemsExample() {
	const [maxItems, setMaxItems] = useState(5)
	const [itemsBeforeCollapse, setItemsBeforeCollapse] = useState(1)
	const [itemsAfterCollapse, setItemsAfterCollapse] = useState(1)

	return (
		<div>
			<div className="mb-4 flex gap-4">
				<div>
					<Label htmlFor="maxItems">Max Items</Label>
					<Input
						id="maxItems"
						type="number"
						value={maxItems}
						onChange={(e) =>
							setMaxItems(Number.parseInt(e.target.value))
						}
					/>
				</div>
				<div>
					<Label htmlFor="itemsBefore">Items Before Collapse</Label>
					<Input
						id="itemsBefore"
						type="number"
						value={itemsBeforeCollapse}
						onChange={(e) =>
							setItemsBeforeCollapse(
								Number.parseInt(e.target.value),
							)
						}
					/>
				</div>
				<div>
					<Label htmlFor="itemsAfter">Items After Collapse</Label>
					<Input
						id="itemsAfter"
						type="number"
						value={itemsAfterCollapse}
						onChange={(e) =>
							setItemsAfterCollapse(
								Number.parseInt(e.target.value),
							)
						}
					/>
				</div>
			</div>
			<div className="flex flex-col gap-4">
				<Breadcrumbs
					maxItems={maxItems}
					itemsAfterCollapse={itemsAfterCollapse}
					itemsBeforeCollapse={itemsBeforeCollapse}
				>
					<Breadcrumbs.Item
						href="#"
						iconBefore={<AddCircleIcon label="" />}
						iconAfter={<AddCircleIcon label="" />}
					>
						Home
					</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Library</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Components</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Readme</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Showcase</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Homepage</Breadcrumbs.Item>
				</Breadcrumbs>
			</div>
		</div>
	)
}
//#endregion bread-crumbs-max-items-example

//#region bread-crumbs-controlled-example
function ConstrainedExample() {
	const [expanded, setExpanded] = useState(false)

	return (
		<div>
			<div className="mb-4">
				<Checkbox
					checked={expanded}
					onChange={(e) => setExpanded(e.target.checked)}
					label="Expanded"
				/>
			</div>
			<div className="flex flex-col gap-4">
				<Breadcrumbs
					expanded={expanded}
					onExpandedChange={(expandedChanged) =>
						console.log("Expanded changed", expandedChanged)
					}
				>
					<Breadcrumbs.Item
						href="#"
						iconBefore={<AddCircleIcon label="" />}
						iconAfter={<AddCircleIcon label="" />}
					>
						Home
					</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Library</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Components</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Readme</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Showcase</Breadcrumbs.Item>
					<Breadcrumbs.Item href="#">Homepage</Breadcrumbs.Item>
				</Breadcrumbs>
			</div>
		</div>
	)
}
//#endregion bread-crumbs-controlled-example

function BannerShowcase(props: ShowcaseProps) {
	//#region bread-crumbs-example
	const example = (
		<div className="flex flex-col gap-4">
			<Breadcrumbs>
				<Breadcrumbs.Item
					href="#"
					iconBefore={<AddCircleIcon label="" />}
					iconAfter={<AddCircleIcon label="" />}
				>
					Home
				</Breadcrumbs.Item>
				<Breadcrumbs.Item href="#">Library</Breadcrumbs.Item>
				<Breadcrumbs.Item href="#">Components</Breadcrumbs.Item>
				<Breadcrumbs.Item href="#">Readme</Breadcrumbs.Item>
				<Breadcrumbs.Item href="#">Showcase</Breadcrumbs.Item>
			</Breadcrumbs>
		</div>
	)
	//#endregion bread-crumbs-example

	return (
		<ShowcaseWrapperItem
			name="Breadcrumbs"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "single?component=BreadCrumbs",
				},
			]}
			examples={[
				{
					title: "Example",
					example: example,
					sourceCodeExampleId: "bread-crumbs-example",
				},
				{
					title: "Max Items",
					example: <MaxItemsExample />,
					sourceCodeExampleId: "bread-crumbs-max-items-example",
				},
				{
					title: "Controlled",
					example: <ConstrainedExample />,
					sourceCodeExampleId: "bread-crumbs-controlled-example",
				},
			]}
		/>
	)
}

export default BannerShowcase

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
/*import AKButton, {
	ButtonGroup as AKButtonGroup,
	LoadingButton as AKLoadingButton,
} from "@atlaskit/button"*/
import { Button, LoadingButton, ButtonGroup } from "@linked-planet/ui-kit-ts"
import SearchIcon from "@atlaskit/icon/glyph/search"

function ButtonShowcase(props: ShowcaseProps) {
	const [isLoading, setIsLoading] = useState(false)

	const akExample = (
		<>
			{/*<AKButtonGroup>
				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
				>
					Default Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isSelected={true}
				>
					Selected Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Disabled Default button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="subtle"
					onClick={() => console.log("Button pressed")}
				>
					Subtle button
				</AKButton>

				<AKButton
					appearance="subtle"
					onClick={() => console.log("Button pressed")}
					isDisabled
				>
					Subtle Disabled button
				</AKButton>

				<AKButton
					appearance="link"
					onClick={() => console.log("Button pressed")}
				>
					Link button
				</AKButton>

				<AKButton
					appearance="warning"
					onClick={() => console.log("Button pressed")}
				>
					Warning button
				</AKButton>

				<AKButton
					appearance="danger"
					onClick={() => console.log("Button pressed")}
					iconAfter={<SearchIcon label="" />}
					iconBefore={<SearchIcon label="" />}
				>
					Danger button
				</AKButton>
				<AKLoadingButton
					isLoading={isLoading}
					onClick={() => {
						setIsLoading(true)
						window.setTimeout(() => setIsLoading(false), 3000)
					}}
					iconBefore={<SearchIcon label="" />}
					iconAfter={<SearchIcon label="" />}
				>
					Icon Loading Button
				</AKLoadingButton>

				<AKButton
					appearance="subtle-link"
					onClick={() => console.log("Button pressed")}
				>
					Subtle Link Button
				</AKButton>

				<AKButton
					appearance="primary"
					href={"https://www.google.com/"}
					target="_blank"
					onClick={() => console.log("Href Button pressed")}
				>
					Href Button
				</AKButton>

				<AKButton
					appearance="primary"
					href={
						"https://pbs.twimg.com/profile_images/1311008414156423170/Kxu_7mQS_400x400.jpg"
					}
					target="_blank"
					download
					onClick={() => console.log("Href Button pressed")}
				>
					Download Button
				</AKButton>
			</AKButtonGroup>*/}
		</>
	)

	//#region button
	const lpExample = (
		<ButtonGroup data-id="test-data-id">
			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				autoFocus={true}
			>
				Default Button
			</Button>
			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				autoFocus={true}
				inverted
			>
				Default Inverted Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				selected={true}
			>
				Selected Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				disabled={true}
			>
				Disabled Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				disabled
				inverted
			>
				Disabled Inverted Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
			>
				Primary Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Primary Inverted Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
				inverted
				disabled
			>
				Primary Inverted Disabled Button
			</Button>

			<Button
				onClick={() => console.log("Button pressed")}
				disabled={true}
			>
				Disabled Button
			</Button>

			<Button
				appearance="subtle"
				onClick={() => console.log("Button pressed")}
			>
				Subtle Button
			</Button>

			<Button
				appearance="subtle-link"
				onClick={() => console.log("Button pressed")}
			>
				Subtle Link Button
			</Button>

			<Button
				appearance="subtle"
				onClick={() => console.log("Button pressed")}
				disabled
			>
				Subtle Disabled Button
			</Button>

			<Button
				appearance="link"
				onClick={() => console.log("Button pressed")}
			>
				Link Button
			</Button>

			<Button appearance="link" disabled>
				Disabled Link Button
			</Button>

			<Button
				appearance="warning"
				onClick={() => console.log("Button pressed")}
			>
				Warning Button
			</Button>

			<Button
				appearance="warning"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Warning Inverted Button
			</Button>

			<Button
				appearance="danger"
				onClick={() => console.log("Button pressed")}
			>
				Danger Button
			</Button>

			<Button
				appearance="danger"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Danger Inverted Button
			</Button>

			<Button
				appearance="success"
				onClick={() => console.log("Button pressed")}
			>
				Success Button
			</Button>

			<Button
				appearance="success"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Success Inverted Button
			</Button>

			<Button
				appearance="information"
				onClick={() => console.log("Button pressed")}
				iconAfter={<SearchIcon label="" />}
				iconBefore={<SearchIcon label="" />}
			>
				Information Button
			</Button>

			<Button
				appearance="information"
				onClick={() => console.log("Button pressed")}
				iconAfter={<SearchIcon label="" />}
				iconBefore={<SearchIcon label="" />}
				inverted
			>
				Information Inverted Button
			</Button>

			<LoadingButton
				onClick={() => {
					setIsLoading(true)
					window.setTimeout(() => setIsLoading(false), 3000)
				}}
				loading={isLoading}
				iconBefore={<SearchIcon label="" />}
				iconAfter={<SearchIcon label="" />}
			>
				Icon Loading Button
			</LoadingButton>

			<LoadingButton
				onClick={() => {
					setIsLoading(true)
					window.setTimeout(() => setIsLoading(false), 3000)
				}}
				loading={isLoading}
				iconBefore={<SearchIcon label="" />}
				iconAfter={<SearchIcon label="" />}
				appearance="subtle-link"
			>
				Primary Icon Loading Button
			</LoadingButton>

			<Button
				appearance="primary"
				href={"https://www.google.com/"}
				target="_blank"
			>
				Href Button
			</Button>

			<Button
				appearance="primary"
				href={
					"https://pbs.twimg.com/profile_images/1311008414156423170/Kxu_7mQS_400x400.jpg"
				}
				target="_blank"
				download
			>
				Download Button
			</Button>
		</ButtonGroup>
	)
	//#endregion button

	const example = (
		<div className="flex w-full flex-col items-center justify-start gap-4 overflow-auto">
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Button & Button-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Button",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "button" },
			]}
		/>
	)
}

export default ButtonShowcase

import {
	Button,
	ButtonGroup,
	Calendar,
	CalendarBase,
	DateUtils,
	type DateType,
} from "@linked-planet/ui-kit-ts"
import {
	dateFromString,
	toDateType,
} from "@linked-planet/ui-kit-ts/utils/DateUtils"
import dayjs from "dayjs"
import React, { useCallback, useState } from "react"
import type { DateRange } from "react-day-picker"
import { useForm } from "react-hook-form"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region calendar2-single
function CalendarSingle() {
	const [selected, setSelected] = useState<DateType | undefined>(
		toDateType(new Date()),
	)

	const defaultMonth = 8
	const defaultYear = 2022
	const disabledDate1 = toDateType(
		dayjs()
			.month(defaultMonth - 1)
			.year(defaultYear)
			.add(4, "day"),
	)
	const disabledDate2 = toDateType(
		dayjs()
			.month(defaultMonth - 1)
			.year(defaultYear)
			.add(6, "day"),
	)

	const [secondarySelected, setSecondarySelected] = useState<
		DateType | undefined
	>(disabledDate1)

	const minDate = dayjs()
		.month(defaultMonth - 1)
		.year(defaultYear)
		.subtract(5, "days")
		.toDate()
	const minDateDT = toDateType(minDate)

	const maxDate = dayjs()
		.month(defaultMonth - 1)
		.year(defaultYear)
		.add(38, "days")
		.toDate()
	const maxDateDT = toDateType(maxDate)

	const defaultMonthDate = dayjs()
		.month(defaultMonth - 1)
		.year(defaultYear)
		.toDate()

	const sundayMatcher = (date: Date) => date.getDay() === 0

	const sundayMatcher2 = (date: DateType) => {
		const dt = dateFromString(date, true)
		return dt.getDay() === 0
	}

	const selectedDate = selected ? dateFromString(selected, true) : undefined
	const secondarySelectedDate = secondarySelected
		? dateFromString(secondarySelected, true)
		: undefined

	return (
		<div className="flex gap-4">
			<CalendarBase
				mode="single"
				testId="test_id"
				selected={selectedDate}
				secondarySelected={secondarySelectedDate}
				onDayClick={(date) => {
					const dt = toDateType(date)
					setSecondarySelected(selected)
					setSelected(dt)
				}}
				fromDate={minDate}
				toDate={maxDate}
				defaultMonth={defaultMonthDate}
				invalid
				disabledDates={sundayMatcher}
				disabled
				weekStartsOn={1}
				lang="en"
			/>
			<Calendar
				mode="single"
				selected={selected}
				secondarySelected={secondarySelected}
				onSelectionChanged={(date) => {
					setSecondarySelected(selected)
					setSelected(date)
				}}
				minDate={minDateDT}
				maxDate={maxDateDT}
				defaultMonth={defaultMonth}
				defaultYear={defaultYear}
				disabledDateFilter={sundayMatcher2}
				disabledDates={[disabledDate1, disabledDate2]}
				weekStartsOn={1}
				lang="de"
				labels={{
					labelNext: (date) => dayjs(date).format("MMMM YYYY"),
					labelPrevious: (date) => dayjs(date).format("MMMM YYYY"),
					labelWeekday: (date) => dayjs(date).format("dd"),
				}}
			/>
			{/*<AKCalendar
				selected={selected ? [selected] : []}
				previouslySelected={
					secondarySelected ? [secondarySelected] : []
				}
				minDate={minDateDT}
				maxDate={maxDateDT}
				defaultMonth={defaultMonth}
				defaultYear={defaultYear}
			/>*/}
		</div>
	)
}
//#endregion calendar2-single

//#region calendar2-single-form
function CalendarSingleForm() {
	const {
		handleSubmit,
		control,
		reset,
		formState: { isValid },
	} = useForm<{ date: DateType }>({
		defaultValues: {
			date: "2023-12-31",
		},
		mode: "all",
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={() => reset()}
		>
			<Calendar
				mode="single"
				name="date"
				control={control}
				invalid={!isValid}
				defaultMonth={12}
				defaultYear={2023}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion calendar2-single-form

//#region calendar2-multiple-form
function CalendarMultipleForm() {
	const {
		handleSubmit,
		control,
		reset,
		formState: { isValid },
	} = useForm<{ dates: DateType[] }>({
		defaultValues: {
			dates: ["2023-12-31", "2023-12-24", "2023-12-27"],
		},
		mode: "all",
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={() => reset()}
		>
			<Calendar
				mode="multiple"
				name="dates"
				control={control}
				invalid={!isValid}
				defaultMonth={12}
				defaultYear={2023}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion calendar2-multiple-form

//#region calendar2-base
function CalendarBaseExample() {
	const [selected, setSelected] = useState<Date[]>([new Date()])

	const handleDayClick = useCallback((day: Date) => {
		setSelected((selected) => {
			const removed = selected.filter(
				(it) => it.getTime() !== day.getTime(),
			)
			if (removed.length !== selected.length) {
				return removed
			}
			return [...selected, day]
		})
	}, [])

	return (
		<CalendarBase
			mode="multiple"
			selected={selected}
			onDayClick={handleDayClick}
		/>
	)
}
//#endregion calendar2-base

//#region calendar2-range
function CalendarRange() {
	const [selected, setSelected] = useState<{
		from: DateType | undefined | null
		to: DateType | undefined | null
	}>({
		from: toDateType(new Date()),
		to: undefined,
	})

	return (
		<div className="flex gap-4">
			<Calendar
				mode="range"
				selected={selected}
				onSelectionChanged={setSelected}
			/>
			<CalendarBase
				mode="range"
				selected={{
					from: selected.from
						? dateFromString(selected.from, true)
						: undefined,
					to: selected.to
						? dateFromString(selected.to, true)
						: undefined,
				}}
				onSelect={(range: DateRange | undefined) => {
					setSelected({
						from: range?.from ? toDateType(range.from) : undefined,
						to: range?.to ? toDateType(range.to) : undefined,
					})
				}}
			/>
		</div>
	)
}
//#endregion calendar2-range

//#region calendar2-range-form
function CalendarRangeForm() {
	const {
		handleSubmit,
		control,
		reset,
		formState: { isValid },
	} = useForm<{ range: { from: DateType; to: DateType } }>({
		defaultValues: {
			range: { from: "2023-12-24", to: "2023-12-31" },
		},
		mode: "all",
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={() => reset()}
		>
			<Calendar
				mode="range"
				name="range"
				control={control}
				invalid={!isValid}
				defaultMonth={12}
				defaultYear={2023}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion calendar2-range-form

//#region calendar2-multi
function CalendarMulti() {
	const [selected, setSelected] = useState<DateType[] | undefined>([
		DateUtils.toDateType(Date()),
	])

	return (
		<div className="flex gap-4">
			<Calendar
				mode="multiple"
				defaultSelected={[]}
				selected={selected}
				onSelectionChanged={setSelected}
			/>
			<CalendarBase
				mode="multiple"
				selected={selected?.map((d) => dateFromString(d, true))}
				onSelect={(dates: Date[] | undefined) => {
					setSelected(dates?.map((d) => DateUtils.toDateType(d)))
				}}
			/>
		</div>
	)
}
//#endregion calendar2-multi

export default function Calendar2Showcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Date Picker"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Calendar, date and date range picker components."
			examples={[
				{
					title: "Calendar Single Day",
					example: <CalendarSingle />,
					sourceCodeExampleId: "calendar2-single",
				},
				{
					title: "Calendar Day Range",
					example: <CalendarRange />,
					sourceCodeExampleId: "calendar2-range",
				},
				{
					title: "Calendar Day Multi",
					example: <CalendarMulti />,
					sourceCodeExampleId: "calendar2-multi",
				},
				{
					title: "Base Calendar",
					example: <CalendarBaseExample />,
					sourceCodeExampleId: "calendar2-base",
				},
				{
					title: "Calendar Single Form",
					example: <CalendarSingleForm />,
					sourceCodeExampleId: "calendar2-single-form",
				},
				{
					title: "Calendar Multiple Form",
					example: <CalendarMultipleForm />,
					sourceCodeExampleId: "calendar2-multiple-form",
				},
				{
					title: "Calendar Range Form",
					example: <CalendarRangeForm />,
					sourceCodeExampleId: "calendar2-range-form",
				},
			]}
		/>
	)
}

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKCheckbox from "@atlaskit/checkbox"
import { Button, ButtonGroup, Checkbox } from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

//#region checkbox-form
type FormData = {
	enabled: boolean
}

function FormExample() {
	const { handleSubmit, reset, register } = useForm<FormData>({
		defaultValues: {
			enabled: true,
		},
	})

	return (
		<>
			<form
				onSubmit={handleSubmit((data) => console.log(data))}
				onReset={(e) => {
					e.preventDefault()
					reset()
				}}
			>
				<Checkbox
					label="Enabled"
					{...register("enabled")}
					errorMessage="Test error"
					invalid
				/>
				<ButtonGroup>
					<Button type="reset" appearance="subtle">
						Reset
					</Button>
					<Button type="submit" appearance="primary">
						Submit
					</Button>
				</ButtonGroup>
			</form>
		</>
	)
}

//#endregion

function CheckboxShowcase(props: ShowcaseProps) {
	const [isCheckboxActive, setIsCheckboxActive] = useState(false)

	const akExample = (
		<div className="flex gap-4">
			{/*<AKCheckbox
				label="controlled"
				isChecked={!!isCheckboxActive}
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="uncontrolled" defaultChecked />
			<AKCheckbox label="disabled" isDisabled />
			<AKCheckbox label="invalid" isInvalid />
			<AKCheckbox
				label="indeterminate"
				isChecked={!!isCheckboxActive}
				isIndeterminate
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="indeterminate uncontrolled" isIndeterminate />
			<AKCheckbox label="required" isIndeterminate isRequired />*/}
		</div>
	)

	//#region checkbox
	const lpExample = (
		<div className="flex gap-4">
			<Checkbox
				label="controlled"
				checked={!!isCheckboxActive}
				onCheckedChange={setIsCheckboxActive}
			/>
			<Checkbox label="uncontrolled" defaultChecked />
			<Checkbox label="disabled" disabled />
			<Checkbox label="invalid" invalid />
			<Checkbox
				label="indeterminate"
				indeterminate
				checked={isCheckboxActive}
				onCheckedChange={setIsCheckboxActive}
			/>
			<Checkbox label="indeterminate uncontrolled" indeterminate />
			<Checkbox label="required" indeterminate required />
		</div>
	)
	//#endregion checkbox

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Checkbox"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Checkbox",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "checkbox" },
				{
					title: "Form Example",
					example: <FormExample />,
					sourceCodeExampleId: "checkbox-form",
				},
			]}
		/>
	)
}

export default CheckboxShowcase

import { CodeBlock } from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { CodeBlock as AKCodeBlock } from "@atlaskit/code"

function CodeBlockShowcase(props: ShowcaseProps) {
	//#region code-block
	const code = `class Hello {
    public static void main(String args...) {
        System.out.println('Hello world')
    }
}`
	const example = <AKCodeBlock language="java" text={code} />
	//#endregion code-block

	//#region code-block-own
	const exampleOwn = <CodeBlock language="java">{code}</CodeBlock>
	//#endregion code-block-own

	return (
		<ShowcaseWrapperItem
			name="Code block"
			{...props}
			packages={[
				{
					name: "@atlaskit/code",
					url: "https://atlassian.design/components/code/code-block/examples",
				},
			]}
			examples={[
				{
					title: "Example Own",
					example: exampleOwn,
					sourceCodeExampleId: "code-block-own",
				},
				{
					title: "Example",
					example,
					sourceCodeExampleId: "code-block",
				},
			]}
		/>
	)
}

export default CodeBlockShowcase

import { Collapsible } from "@linked-planet/ui-kit-ts/components/Collapsible"
import type { ShowcaseProps } from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ShowcaseWrapperItem from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

export default function CollapsibleShowcase(props: ShowcaseProps) {
	//#region collapsible
	const example = (
		<Collapsible
			header={<h4>Collapsible Title</h4>}
			openButtonPosition="left"
			data-id="test-data-id"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible

	//#region collapsible1
	const example1 = (
		<Collapsible
			header={
				<div className="p-2">
					<h2>Collapsible Title</h2>
				</div>
			}
			openButtonPosition="right"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible1

	return (
		<ShowcaseWrapperItem
			name="Collapsible"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Chevron Left",
					example,
					sourceCodeExampleId: "collapsible",
				},
				{
					title: "Chevron Right",
					example: example1,
					sourceCodeExampleId: "collapsible1",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region colorstest
function Colors() {
	return (
		<>
			<div className="grid w-full grid-cols-4 gap-2">
				{/* blue */}
				<div className="bg-blue border-blue-border hover:bg-blue-hovered active:bg-blue-pressed text-blue-text-bold border-2 p-1">
					blue
				</div>
				<div className="bg-blue-subtle border-blue-border hover:bg-blue-subtle-hovered active:bg-blue-subtle-pressed text-blue-text border-2 p-1">
					blue-subtle
				</div>
				<div className="bg-blue-subtlest border-blue-border hover:bg-blue-subtlest-hovered active:bg-blue-subtlest-pressed text-blue-text border-2 p-1">
					blue-subtlest
				</div>
				<div className="bg-blue-bold border-blue-border hover:bg-blue-bold-hovered active:bg-blue-bold-pressed text-blue-text-inverse border-2 p-1">
					blue-bold
				</div>

				{/* sky */}
				<div className="bg-sky border-sky-border hover:bg-sky-hovered active:bg-sky-pressed text-sky-text-bold border-2 p-1">
					sky
				</div>
				<div className="bg-sky-subtle border-sky-border hover:bg-sky-subtle-hovered active:bg-sky-subtle-pressed text-sky-text border-2 p-1">
					sky-subtle
				</div>
				<div className="bg-sky-subtlest border-sky-border hover:bg-sky-subtlest-hovered active:bg-sky-subtlest-pressed text-sky-text border-2 p-1">
					sky-subtlest
				</div>
				<div className="bg-sky-bold border-sky-border hover:bg-sky-bold-hovered active:bg-sky-bold-pressed text-sky-text-inverse border-2 p-1">
					sky-bold
				</div>
				{/* cyan */}
				<div className="bg-cyan border-cyan-border hover:bg-cyan-hovered active:bg-cyan-pressed text-cyan-text-bold border-2 p-1">
					cyan
				</div>
				<div className="bg-cyan-subtle border-cyan-border hover:bg-cyan-subtle-hovered active:bg-cyan-subtle-pressed text-cyan-text border-2 p-1">
					cyan-subtle
				</div>
				<div className="bg-cyan-subtlest border-cyan-border hover:bg-cyan-subtlest-hovered active:bg-cyan-subtlest-pressed text-cyan-text border-2 p-1">
					cyan-subtlest
				</div>
				<div className="bg-cyan-bold border-cyan-border hover:bg-cyan-bold-hovered active:bg-cyan-bold-pressed text-cyan-text-inverse border-2 p-1">
					cyan-bold
				</div>
				{/* teal */}
				<div className="bg-teal border-teal-border hover:bg-teal-hovered active:bg-teal-pressed text-teal-text-bold border-2 p-1">
					teal
				</div>
				<div className="bg-teal-subtle border-teal-border hover:bg-teal-subtle-hovered active:bg-teal-subtle-pressed text-teal-text border-2 p-1">
					teal-subtle
				</div>
				<div className="bg-teal-subtlest border-teal-border hover:bg-teal-subtlest-hovered active:bg-teal-subtlest-pressed text-teal-text border-2 p-1">
					teal-subtlest
				</div>
				<div className="bg-teal-bold border-teal-border hover:bg-teal-bold-hovered active:bg-teal-bold-pressed text-teal-text-inverse border-2 p-1">
					teal-bold
				</div>
				{/* emerald */}
				<div className="bg-emerald border-emerald-border hover:bg-emerald-hovered active:bg-emerald-pressed text-emerald-text-bold border-2 p-1">
					emerald
				</div>
				<div className="bg-emerald-subtle border-emerald-border hover:bg-emerald-subtle-hovered active:bg-emerald-subtle-pressed text-emerald-text border-2 p-1">
					emerald-subtle
				</div>
				<div className="bg-emerald-subtlest border-emerald-border hover:bg-emerald-subtlest-hovered active:bg-emerald-subtlest-pressed text-emerald-text border-2 p-1">
					emerald-subtlest
				</div>
				<div className="bg-emerald-bold border-emerald-border hover:bg-emerald-bold-hovered active:bg-emerald-bold-pressed text-emerald-text-inverse border-2 p-1">
					emerald-bold
				</div>
				{/* green */}
				<div className="bg-green border-green-border hover:bg-green-hovered active:bg-green-pressed text-green-text-bold border-2 p-1">
					green
				</div>
				<div className="bg-green-subtle border-green-border hover:bg-green-subtle-hovered active:bg-green-subtle-pressed text-green-text border-2 p-1">
					green-subtle
				</div>
				<div className="bg-green-subtlest border-green-border hover:bg-green-subtlest-hovered active:bg-green-subtlest-pressed text-green-text border-2 p-1">
					green-subtlest
				</div>
				<div className="bg-green-bold border-green-border hover:bg-green-bold-hovered active:bg-green-bold-pressed text-green-text-inverse border-2 p-1">
					green-bold
				</div>

				{/* lime */}
				<div className="bg-lime border-lime-border hover:bg-lime-hovered active:bg-lime-pressed text-lime-text-bold border-2 p-1">
					lime
				</div>
				<div className="bg-lime-subtle border-lime-border hover:bg-lime-subtle-hovered active:bg-lime-subtle-pressed text-lime-text border-2 p-1">
					lime-subtle
				</div>
				<div className="bg-lime-subtlest border-lime-border hover:bg-lime-subtlest-hovered active:bg-lime-subtlest-pressed text-lime-text border-2 p-1">
					lime-subtlest
				</div>
				<div className="bg-lime-bold border-lime-border hover:bg-lime-bold-hovered active:bg-lime-bold-pressed text-lime-text-inverse border-2 p-1">
					lime-bold
				</div>
				{/* red */}
				<div className="bg-red border-red-border hover:bg-red-hovered active:bg-red-pressed text-red-text-bold border-2 p-1">
					red
				</div>
				<div className="bg-red-subtle border-red-border hover:bg-red-subtle-hovered active:bg-red-subtle-pressed text-red-text border-2 p-1">
					red-subtle
				</div>
				<div className="bg-red-subtlest border-red-border hover:bg-red-subtlest-hovered active:bg-red-subtlest-pressed text-red-text border-2 p-1">
					red-subtlest
				</div>
				<div className="bg-red-bold border-red-border hover:bg-red-bold-hovered active:bg-red-bold-pressed text-red-text-inverse border-2 p-1">
					red-bold
				</div>
				{/* orange */}
				<div className="bg-orange border-orange-border hover:bg-orange-hovered active:bg-orange-pressed text-orange-text-bold border-2 p-1">
					orange
				</div>
				<div className="bg-orange-subtle border-orange-border hover:bg-orange-subtle-hovered active:bg-orange-subtle-pressed text-orange-text border-2 p-1">
					orange-subtle
				</div>
				<div className="bg-orange-subtlest border-orange-border hover:bg-orange-subtlest-hovered active:bg-orange-subtlest-pressed text-orange-text border-2 p-1">
					orange-subtlest
				</div>
				<div className="bg-orange-bold border-orange-border hover:bg-orange-bold-hovered active:bg-orange-bold-pressed text-orange-text-inverse border-2 p-1">
					orange-bold
				</div>
				{/* amber */}
				<div className="bg-amber border-amber-border hover:bg-amber-hovered active:bg-amber-pressed text-amber-text-bold border-2 p-1">
					amber
				</div>
				<div className="bg-amber-subtle border-amber-border hover:bg-amber-subtle-hovered active:bg-amber-subtle-pressed text-amber-text border-2 p-1">
					amber-subtle
				</div>
				<div className="bg-amber-subtlest border-amber-border hover:bg-amber-subtlest-hovered active:bg-amber-subtlest-pressed text-amber-text border-2 p-1">
					amber-subtlest
				</div>
				<div className="bg-amber-bold border-amber-border hover:bg-amber-bold-hovered active:bg-amber-bold-pressed text-amber-text-inverse border-2 p-1">
					amber-bold
				</div>
				{/* yellow */}
				<div className="bg-yellow border-yellow-border hover:bg-yellow-hovered active:bg-yellow-pressed text-yellow-text-bold border-2 p-1">
					yellow
				</div>
				<div className="bg-yellow-subtle border-yellow-border hover:bg-yellow-subtle-hovered active:bg-yellow-subtle-pressed text-yellow-text border-2 p-1">
					yellow-subtle
				</div>
				<div className="bg-yellow-subtlest border-yellow-border hover:bg-yellow-subtlest-hovered active:bg-yellow-subtlest-pressed text-yellow-text border-2 p-1">
					yellow-subtlest
				</div>
				<div className="bg-yellow-bold border-yellow-border hover:bg-yellow-bold-hovered active:bg-yellow-bold-pressed text-yellow-text-inverse border-2 p-1">
					yellow-bold
				</div>
				{/* pink */}
				<div className="bg-pink border-pink-border hover:bg-pink-hovered active:bg-pink-pressed text-pink-text-bold border-2 p-1">
					pink
				</div>
				<div className="bg-pink-subtle border-pink-border hover:bg-pink-subtle-hovered active:bg-pink-subtle-pressed text-pink-text border-2 p-1">
					pink-subtle
				</div>
				<div className="bg-pink-subtlest border-pink-border hover:bg-pink-subtlest-hovered active:bg-pink-subtlest-pressed text-pink-text border-2 p-1">
					pink-subtlest
				</div>
				<div className="bg-pink-bold border-pink-border hover:bg-pink-bold-hovered active:bg-pink-bold-pressed text-pink-text-inverse border-2 p-1">
					pink-bold
				</div>
				{/* fuchsia */}
				<div className="bg-fuchsia border-fuchsia-border hover:bg-fuchsia-hovered active:bg-fuchsia-pressed text-fuchsia-text-bold border-2 p-1">
					fuchsia
				</div>
				<div className="bg-fuchsia-subtle border-fuchsia-border hover:bg-fuchsia-subtle-hovered active:bg-fuchsia-subtle-pressed text-fuchsia-text border-2 p-1">
					fuchsia-subtle
				</div>
				<div className="bg-fuchsia-subtlest border-fuchsia-border hover:bg-fuchsia-subtlest-hovered active:bg-fuchsia-subtlest-pressed text-fuchsia-text border-2 p-1">
					fuchsia-subtlest
				</div>
				<div className="bg-fuchsia-bold border-fuchsia-border hover:bg-fuchsia-bold-hovered active:bg-fuchsia-bold-pressed text-fuchsia-text-inverse border-2 p-1">
					fuchsia-bold
				</div>
				{/* purple */}
				<div className="bg-purple border-purple-border hover:bg-purple-hovered active:bg-purple-pressed text-purple-text-bold border-2 p-1">
					purple
				</div>
				<div className="bg-purple-subtle border-purple-border hover:bg-purple-subtle-hovered active:bg-purple-subtle-pressed text-purple-text border-2 p-1">
					purple-subtle
				</div>
				<div className="bg-purple-subtlest border-purple-border hover:bg-purple-subtlest-hovered active:bg-purple-subtlest-pressed text-purple-text border-2 p-1">
					purple-subtlest
				</div>
				<div className="bg-purple-bold border-purple-border hover:bg-purple-bold-hovered active:bg-purple-bold-pressed text-purple-text-inverse border-2 p-1">
					purple-bold
				</div>
				{/* violet */}
				<div className="bg-violet border-violet-border hover:bg-violet-hovered active:bg-violet-pressed text-violet-text-bold border-2 p-1">
					violet
				</div>
				<div className="bg-violet-subtle border-violet-border hover:bg-violet-subtle-hovered active:bg-violet-subtle-pressed text-violet-text border-2 p-1">
					violet-subtle
				</div>
				<div className="bg-violet-subtlest border-violet-border hover:bg-violet-subtlest-hovered active:bg-violet-subtlest-pressed text-violet-text border-2 p-1">
					violet-subtlest
				</div>
				<div className="bg-violet-bold border-violet-border hover:bg-violet-bold-hovered active:bg-violet-bold-pressed text-violet-text-inverse border-2 p-1">
					violet-bold
				</div>
				{/* indigo */}
				<div className="bg-indigo border-indigo-border hover:bg-indigo-hovered active:bg-indigo-pressed text-indigo-text-bold border-2 p-1">
					indigo
				</div>
				<div className="bg-indigo-subtle border-indigo-border hover:bg-indigo-subtle-hovered active:bg-indigo-subtle-pressed text-indigo-text border-2 p-1">
					indigo-subtle
				</div>
				<div className="bg-indigo-subtlest border-indigo-border hover:bg-indigo-subtlest-hovered active:bg-indigo-subtlest-pressed text-indigo-text border-2 p-1">
					indigo-subtlest
				</div>
				<div className="bg-indigo-bold border-indigo-border hover:bg-indigo-bold-hovered active:bg-indigo-bold-pressed text-indigo-text-inverse border-2 p-1">
					indigo-bold
				</div>
				{/* gray */}
				<div className="bg-gray border-gray-border hover:bg-gray-hovered active:bg-gray-pressed text-gray-text-bold border-2 p-1">
					gray
				</div>
				<div className="bg-gray-subtle border-gray-border hover:bg-gray-subtle-hovered active:bg-gray-subtle-pressed text-gray-text border-2 p-1">
					gray-subtle
				</div>
				<div className="bg-gray-subtlest border-gray-border hover:bg-gray-subtlest-hovered active:bg-gray-subtlest-pressed text-gray-text border-2 p-1">
					gray-subtlest
				</div>
				<div className="bg-gray-bold border-gray-border hover:bg-gray-bold-hovered active:bg-gray-bold-pressed text-gray-text-inverse border-2 p-1">
					gray-bold
				</div>
			</div>
			<hr className="mt-4" />

			<div className="mt-4 grid w-full grid-cols-3 gap-2">
				<div className="bg-selected hover:bg-selected-hovered text-selected-text-inverse active:bg-selected-pressed border-selected-border border-2 p-1">
					selected
				</div>
				<div className="bg-selected-bold text-text-inverse hover:bg-selected-bold-hovered active:bg-selected-bold-pressed border-selected-border border-2 p-1">
					selected-bold
				</div>
				<div className="bg-selected-subtle text-text hover:bg-selected-subtle-hovered active:bg-selected-subtle-pressed border-selected-border border-2 p-1">
					selected-bold
				</div>
				<div className="bg-neutral text-text hover:bg-neutral-hovered active:bg-neutral-pressed border-2 p-1">
					neutral
				</div>
				<div className="bg-neutral-bold text-text hover:bg-neutral-bold-hovered active:bg-neutral-bold-pressed border-2 p-1">
					neutral-bold
				</div>
				<div className="bg-neutral-subtle text-text hover:bg-neutral-subtle-hovered active:bg-neutral-subtle-pressed border-2 p-1">
					neutral-subtle
				</div>
				<div className="bg-warning text-warning-text hover:bg-warning-hovered active:bg-warning-pressed border-2 p-1">
					warning
				</div>
				<div className="bg-warning-bold text-text hover:bg-warning-bold-hovered active:bg-warning-bold-pressed border-2 p-1">
					warning-bold
				</div>
				<div />
				<div className="bg-danger text-danger-text border-danger-border hover:bg-danger-hovered active:bg-danger-pressed border-2 p-1">
					danger
				</div>
				<div className="bg-danger-bold text-text hover:bg-danger-bold-hovered active:bg-danger-bold-pressed border-2 p-1">
					danger-bold
				</div>
				<div />
				<div className="bg-success text-success-text border-success-border hover:bg-success-hovered active:bg-success-pressed border-2 p-1">
					success
				</div>
				<div className="bg-success-bold text-text hover:bg-success-bold-hovered active:bg-success-bold-pressed border-2 p-1">
					success-bold
				</div>
				<div />
				<div className="bg-information text-information-text border-information-border hover:bg-information-hovered active:bg-information-pressed border-2 p-1">
					information
				</div>
				<div className="bg-information-bold text-text hover:bg-information-bold-hovered active:bg-information-bold-pressed border-2 p-1">
					information-bold
				</div>
				<div />
				<div className="bg-brand text-brand-text border-brand-border hover:bg-brand-hovered active:bg-brand-pressed border-2 p-1">
					brand
				</div>
				<div className="bg-brand-bold text-text hover:bg-brand-bold-hovered active:bg-brand-bold-pressed border-2 p-1">
					brand-bold
				</div>
			</div>
		</>
	)
}
//#endregion colorstest

export default function LayeringShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Colors"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Not a component but only a showcase of the color system."
			examples={[
				{
					title: "Colors",
					example: <Colors />,
					sourceCodeExampleId: "colorstest",
				},
			]}
		/>
	)
}

import React, { type ReactNode, useMemo } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	DataTable,
	type DataTableTypes,
	Input,
	Label,
	Checkbox,
	Button,
} from "@linked-planet/ui-kit-ts"

//#region datatable-example
type RowData = {
	firstName: string
	lastName: string
	city: string
	zip: number
	state: string
	button: ReactNode
}

function DataTableExample() {
	const rows = useMemo(() => {
		// create 100 example rows
		const rows: RowData[] = []
		for (let i = 0; i < 100; i++) {
			rows.push({
				firstName: `First ${i}`,
				lastName: `Last ${i}`,
				city: `City ${Math.floor(i / 2)}`,
				zip: i,
				state: `State ${i}`,
				button: <Button appearance="primary">Delete</Button>,
			})
		}
		return rows
	}, [])

	// see: https://tanstack.com/table/v8/docs/guide/column-defs#creating-accessor-columns
	// create by using ColumnDef directly (better to use the helper to have improved typing as seen in the example below)
	const columns = useMemo(() => {
		const ret: DataTableTypes.ColumnDef<RowData>[] = [
			{
				id: "select", // either header or ID should be present
				header: (headerprops) => (
					<Checkbox
						checked={
							headerprops.table.getIsAllPageRowsSelected() ||
							headerprops.table.getIsSomePageRowsSelected()
						}
						onCheckedChange={(value) =>
							headerprops.table.toggleAllPageRowsSelected(!!value)
						}
						className="pb-1.5 pl-2"
						indeterminate={headerprops.table.getIsSomePageRowsSelected()}
					/>
				),
				cell: (cellprops) => (
					<Checkbox
						checked={cellprops.row.getIsSelected()}
						onCheckedChange={() => {
							cellprops.row.toggleSelected()
						}}
						className="pl-2"
					/>
				),
			},
			{
				id: "Full Name", // either header or ID should be present
				accessorFn: (row) => `${row.firstName} ${row.lastName}`,
			},
			{
				//accessorFn: (row) => row.city,
				header: "City",
				accessorKey: "city",
				enableGrouping: true,
				enableSorting: true,
				//cell: (cellprops) => <b>{cellprops.getValue<string>()}</b>,
			},
			{
				header: "Zip",
				accessorKey: "zip",
				enableGrouping: true,
				invertSorting: true,
			},
			{
				header: "State",
				accessorKey: "state",
				enableGrouping: true,
				invertSorting: true,
			},
			{
				header: "Button",
				accessorKey: "button",
				cell: (cellprops) => cellprops.getValue<Element>(),
			},
		]
		return ret
	}, [])

	const [fullNameFilter, setFullNameFilter] =
		React.useState<DataTableTypes.ColumnFilter>()
	const [cityFilter, setCityFilter] =
		React.useState<DataTableTypes.ColumnFilter>()
	const [hideState, setHideState] = React.useState<boolean>(false)

	const filters = []
	if (fullNameFilter) filters.push(fullNameFilter)
	if (cityFilter) filters.push(cityFilter)

	const visibilityState = {
		state: !hideState,
	}

	return (
		<>
			<Label htmlFor="search">Search Full Name</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setFullNameFilter({ id: "Full Name", value: val })
				}}
			/>
			<Label htmlFor="search">Search City</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setCityFilter({ id: "city", value: val })
				}}
				className="mb-4"
			/>
			<Label htmlFor="hideState">Hide State</Label>
			<Checkbox
				label="Hide State"
				checked={hideState}
				onCheckedChange={setHideState}
			/>
			<div className="bg-surface h-96 overflow-hidden">
				<DataTable.Table<RowData>
					data={rows}
					columns={columns}
					columnFilters={filters}
					columnVisibility={visibilityState}
				/>
			</div>
		</>
	)
}
//#endregion datatable-example

//#region datatable-coldef-helper-example
function DataTableColumnDefHelperExample() {
	const rows = useMemo(() => {
		// create 100 example rows
		const rows: RowData[] = []
		for (let i = 0; i < 100; i++) {
			rows.push({
				firstName: `First ${i}`,
				lastName: `Last ${i}`,
				city: `City ${Math.floor(i / 2)}`,
				zip: i,
				state: `State ${i}`,
				button: <Button appearance="primary">Delete</Button>,
			})
		}
		return rows
	}, [])

	// see: https://tanstack.com/table/v8/docs/guide/column-defs#creating-accessor-columns
	// make the helper for better typing
	const columnHelper = DataTable.createColumnHelper<RowData>()

	// make the columns
	const columns = useMemo(() => {
		// display column to show the select state and the checkbox using the cell function (without the cell, it would be display string)
		const selectCol = columnHelper.display({
			id: "select", // either header or ID should be present
			header: (headerProps) => (
				<Checkbox
					checked={
						headerProps.table.getIsAllPageRowsSelected() ||
						headerProps.table.getIsSomePageRowsSelected()
					}
					onCheckedChange={(value) =>
						headerProps.table.toggleAllPageRowsSelected(!!value)
					}
					className="pb-1.5 pl-2"
					indeterminate={headerProps.table.getIsSomePageRowsSelected()}
				/>
			),
			cell: (cellprops) => (
				<Checkbox
					checked={cellprops.row.getIsSelected()}
					onCheckedChange={() => cellprops.row.toggleSelected()}
					className="pl-2"
				/>
			),
		})

		// accessor column using accessor function
		const fullNameCol = columnHelper.accessor(
			(row) => `${row.firstName} ${row.lastName}`,
			{
				header: "Full Name", // either header or ID should be present
			},
		)

		// accessor column using accessor key
		const cityCol = columnHelper.accessor("city", {
			header: "City",
			enableGrouping: true,
			enableSorting: true,
			cell: (cellProps) => <b>{cellProps.getValue<string>()}</b>,
		})

		const zipCol = columnHelper.accessor("zip", {
			header: "Zip",
			enableGrouping: true,
			invertSorting: true,
		})

		const stateCol = columnHelper.accessor("state", {
			header: "State",
			enableGrouping: true,
			invertSorting: true,
		})

		// display column using accessor key, but avoid the toString() of the element
		const buttonCol = columnHelper.accessor("button", {
			header: "Button",
			id: "button",
			cell: (cellProps) => cellProps.getValue<Element>(),
		})

		return [selectCol, fullNameCol, cityCol, zipCol, stateCol, buttonCol]
	}, [columnHelper])

	const [fullNameFilter, setFullNameFilter] =
		React.useState<DataTableTypes.ColumnFilter>()
	const [cityFilter, setCityFilter] =
		React.useState<DataTableTypes.ColumnFilter>()
	const [hideState, setHideState] = React.useState<boolean>(false)

	const filters: DataTableTypes.ColumnFilter[] = []
	if (fullNameFilter) filters.push(fullNameFilter)
	if (cityFilter) filters.push(cityFilter)

	const visibilityState = {
		state: !hideState,
	}

	return (
		<>
			<Label htmlFor="search">Search Full Name</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setFullNameFilter({ id: "Full Name", value: val })
				}}
			/>
			<Label htmlFor="search">Search City</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setCityFilter({ id: "city", value: val })
				}}
				className="mb-4"
			/>
			<Label htmlFor="hideState">Hide State</Label>
			<Checkbox
				label="Hide State"
				checked={hideState}
				onCheckedChange={setHideState}
			/>
			<div className="bg-surface h-96 overflow-hidden">
				<DataTable.Table<RowData>
					data={rows}
					columns={columns}
					columnFilters={filters}
					columnVisibility={visibilityState}
				/>
			</div>
		</>
	)
}
//#endregion datatable-coldef-helper-example

function DynamicTableShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Dynamic table"
			description="A sortable, filterable and searchable table component, based on tanstack/react-table (see https://tanstack.com/table/)."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "/ui-kit-ts/single?component=DataTable",
				},
			]}
			examples={[
				{
					title: "Data Table ColumnDef Helper",
					example: <DataTableColumnDefHelperExample />,
					sourceCodeExampleId: "datatable-coldef-helper-example",
				},
				{
					title: "Data Table",
					example: <DataTableExample />,
					sourceCodeExampleId: "datatable-example",
				},
			]}
		/>
	)
}

export default DynamicTableShowcase

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	Button,
	ButtonGroup,
	DateTimePicker,
	DatePicker,
	TimePicker,
	type DateType,
	type TimeType,
	DateUtils,
	Fieldset,
} from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

type FormData = {
	dateTime: string
	time: TimeType
	date?: DateType
}

//#region datetime-picker-form
function FormExample() {
	const { handleSubmit, control, reset } = useForm<FormData>({
		defaultValues: {
			dateTime: "2023-12-24T10:00+0100",
			time: "10:10", // the value must exist in the times array (or the default created times array)
			date: "2023-12-24",
		},
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log("form data:", data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<div className="flex flex-col gap-2">
				<DateTimePicker control={control} name="dateTime" />
				<hr />
				<TimePicker control={control} name="time" />
				<hr />
				<DatePicker control={control} name="date" />
			</div>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button appearance="subtle" type="reset">
					Reset
				</Button>
				<Button appearance="primary" type="submit">
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion datetime-picker-form

//#region datetime-picker-form-controlled
function ControlledFormExample() {
	const [selectedDate, setSelectedDate] = useState<DateType | null>(
		"1999-12-23",
	)
	const [selectedTime, setSelectedTime] = useState<TimeType | null>("10:10")
	const [selectedDateTime, setSelectedDateTime] = useState<Date | null>(
		DateUtils.dateFromString("1999-12-23T10:10+0100"),
	)

	const { handleSubmit, control } = useForm<FormData>()

	return (
		<form
			onSubmit={handleSubmit((data) => console.log("form data:", data))}
		>
			<div className="flex flex-col gap-2">
				<DateTimePicker
					control={control}
					value={selectedDateTime}
					onChange={setSelectedDateTime}
					name="dateTime"
				/>
				<hr />
				<TimePicker
					control={control}
					value={selectedTime}
					onChange={setSelectedTime}
					name="time"
				/>
				<hr />
				<DatePicker
					control={control}
					value={selectedDate}
					onChange={setSelectedDate}
					name="date"
				/>
			</div>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button appearance="primary" type="submit">
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion datetime-picker-form-controlled

function DateTimePickerShowcase(props: ShowcaseProps) {
	const [date, setDate] = useState<DateType | null>(null)
	const [time, setTime] = useState<TimeType | null>(null)
	const [dateTime, setDateTime] = useState<Date | null>(null)

	//#region datetime-picker
	const example = (
		<div className="flex gap-4">
			<Fieldset legend="Date Picker">
				<DatePicker onChange={setDate} value={date} />
			</Fieldset>
			<Fieldset legend="Time Picker">
				<TimePicker
					onChange={setTime}
					value={time}
					startTime="00:00"
					endTime="00:00"
					interval={30}
				/>
			</Fieldset>
			<Fieldset legend="Date Time Picker">
				<DateTimePicker
					onChange={(d) => {
						console.log("DateTimePicker", d)
						setDateTime(d)
					}}
					value={dateTime}
					className="border-warning-bold border-2"
				/>
			</Fieldset>
		</div>
	)
	//#endregion datetime-picker

	//#region datetime-picker-timesettings
	const example2 = (
		<Fieldset legend="Date Time Picker">
			<DateTimePicker startTime="08:00" endTime="21:00" interval={15} />
		</Fieldset>
	)
	//#endregion datetime-picker-timesettings

	return (
		<ShowcaseWrapperItem
			name="Date Time Picker"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "single?component=Date+Time+Picker",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "datetime-picker",
				},
				{
					title: "Form Uncontrolled",
					example: <FormExample />,
					sourceCodeExampleId: "datetime-picker-form",
				},
				{
					title: "Form Controlled",
					example: <ControlledFormExample />,
					sourceCodeExampleId: "datetime-picker-form-controlled",
				},
				{
					title: "Time Settings",
					example: example2,
					sourceCodeExampleId: "datetime-picker-timesettings",
				},
			]}
		/>
	)
}

export default DateTimePickerShowcase

import { DnD } from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { useState } from "react"

function TagShowcase(props: ShowcaseProps) {
	//#region dnd-list-example
	const [items, setItems] = useState<Array<string>>([
		"Item 1",
		"Item 2",
		"Item 3",
		"Item 4",
	])
	const example = (
		<DnD.List<string> items={items} onOrderChanged={setItems}>
			{items.map((item, i) => (
				<DnD.DragItem key={item} draggableId={item} index={i} thin>
					{item}
				</DnD.DragItem>
			))}
		</DnD.List>
	)
	//#endregion dnd-list-example

	return (
		<ShowcaseWrapperItem
			name="Tag & Tag-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=dnd",
				},
			]}
			examples={[
				{
					title: "DnD List Example",
					example,
					sourceCodeExampleId: "dnd-list-example",
				},
			]}
		/>
	)
}

export default TagShowcase

/*import AKDropdownMenu, {
	DropdownItemCheckbox as AKDropdownItemCheckbox,
	DropdownItemGroup as AKDropdownItemGroup,
	DropdownItem as AKDropdownItem,
	DropdownItemRadioGroup as AKDropdownItemRadioGroup,
	DropdownItemRadio as AKDropdownItemRadio,
	DropdownItemCheckboxGroup as AKDropdownItemCheckboxGroup,
} from "@atlaskit/dropdown-menu"*/
import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { Dropdown } from "@linked-planet/ui-kit-ts"

function DropDownMenuShowcase(props: ShowcaseProps) {
	const [radioValue, setRadioValue] = useState("testval1")
	const [checkBoxes, setCheckBoxes] = useState<string[]>([])

	const handleRadioChange = (value: string) => {
		setRadioValue(value)
	}

	const handleCheckboxChange = (value: string) => {
		if (checkBoxes.includes(value)) {
			setCheckBoxes(checkBoxes.filter((c) => c !== value))
		} else {
			setCheckBoxes([...checkBoxes, value])
		}
	}

	const akExample = (
		<>
			{/*<AKDropdownMenu trigger={"Trigger"}>
				<AKDropdownItemCheckbox
					id="item-1"
					description={"test description"}
					isSelected={checkBoxes.includes("item-1")}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-2"
					isSelected={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-3"
					isDisabled={true}
					isSelected={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</AKDropdownItemCheckbox>
				<AKDropdownItemGroup title="test group" hasSeparator>
					<AKDropdownItem
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</AKDropdownItem>
					<AKDropdownItem isSelected>
						Second dropdown item
					</AKDropdownItem>
					<AKDropdownItem isDisabled>
						Disabled dropdown item
					</AKDropdownItem>
				</AKDropdownItemGroup>
				<AKDropdownItem>After group dropdown item</AKDropdownItem>
				<AKDropdownItemRadioGroup
					id="dropdown-item-radio-it"
					hasSeparator
					title="test title"
				>
					<AKDropdownItemRadio
						id="radio-1"
						description={"another description"}
						isSelected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-2"
						isSelected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-3"
						isSelected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</AKDropdownItemRadio>
					<AKDropdownItemRadio id="radio-4" isDisabled>
						Radio Disabled
					</AKDropdownItemRadio>
				</AKDropdownItemRadioGroup>
				<AKDropdownItemCheckboxGroup id="some-id">
					<AKDropdownItemCheckbox id="checkbox-1">
						Checkbox 1
					</AKDropdownItemCheckbox>
					<AKDropdownItemCheckbox id="checkbox-2">
						Checkbox 2
					</AKDropdownItemCheckbox>
				</AKDropdownItemCheckboxGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<AKDropdownItem key={i}>long test item {i}</AKDropdownItem>
				))}
			</AKDropdownMenu>*/}
		</>
	)

	//#region dropdown-menu
	const lpExample = (
		<>
			<Dropdown.Menu
				trigger="Dropdown"
				side={"right"}
				align="center"
				appearance="primary"
			>
				<Dropdown.ItemCheckbox
					checked={checkBoxes.includes("item-1")}
					description={"test description"}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					checked={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					disabled={true}
					checked={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemGroup title="test group" hasSeparator>
					<Dropdown.Item
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</Dropdown.Item>
					<Dropdown.Item selected>Second dropdown item</Dropdown.Item>
					<Dropdown.Item disabled>
						Disabled dropdown item
					</Dropdown.Item>
				</Dropdown.ItemGroup>
				<Dropdown.Item>After group dropdown item</Dropdown.Item>
				<Dropdown.SubMenu trigger="submenu">
					<Dropdown.Item>Submenu Entry</Dropdown.Item>
				</Dropdown.SubMenu>
				<Dropdown.ItemRadioGroup hasSeparator title="test title">
					<Dropdown.ItemRadio
						value="radio-1"
						description={"another description"}
						selected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-2"
						selected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-3"
						selected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-4"
						disabled
						selected={radioValue === "radio-4"}
						onClick={() => handleRadioChange("radio-4")}
					>
						Radio Disabled
					</Dropdown.ItemRadio>
				</Dropdown.ItemRadioGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<Dropdown.Item key={i}>long test item {i}</Dropdown.Item>
				))}
			</Dropdown.Menu>
		</>
	)

	const lpExample2 = (
		<>
			<Dropdown.Menu trigger="Dropdown Menu" appearance="danger">
				<Dropdown.Item>Test 1</Dropdown.Item>
				<Dropdown.Item>Test 2</Dropdown.Item>
			</Dropdown.Menu>
			<Dropdown.Menu
				trigger={<p>custom trigger </p>}
				usePortal
				hideChevron
			>
				<Dropdown.Item
					onSelect={(e) => {
						console.log(
							"on select test 1, preventing from closing",
							e,
						)
						e.preventDefault()
					}}
				>
					Test 1
				</Dropdown.Item>
				<Dropdown.Item>Test 2</Dropdown.Item>
				<div className="p-4">No Dropdown Item</div>
			</Dropdown.Menu>
		</>
	)

	//#endregion dropdown-menu

	const example = (
		<div className="flex gap-4">
			{/*akExample*/}
			{lpExample}
			{lpExample2}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Dropdown menu"
			description="Dropdown menu component, use the different dropdown items to create a dropdown menu. For other complex dropdown content use the Popover component."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Dropdown",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "dropdown-menu",
				},
			]}
		/>
	)
}

export default DropDownMenuShowcase

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import EmptyState from "@atlaskit/empty-state"
import { Button } from "@linked-planet/ui-kit-ts"

function EmptyStateShowcase(props: ShowcaseProps) {
	//#region empty-state
	const example = (
		<div style={{ minWidth: 300 }}>
			<EmptyState
				header="Empty state"
				description={<span>Content of this state</span>}
				primaryAction={<Button>Dummy button</Button>}
			/>
		</div>
	)
	//#endregion empty-state

	return (
		<ShowcaseWrapperItem
			name="Empty state"
			{...props}
			packages={[
				{
					name: "@atlaskit/empty-state",
					url: "https://atlassian.design/components/empty-state/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "empty-state",
				},
			]}
		/>
	)
}

export default EmptyStateShowcase

import { DateUtils, Label } from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { EventList } from "@linked-planet/ui-kit-ts/components/EventList"
import dayjs, { type Dayjs } from "dayjs"
import { useState } from "react"

//#region event-list
function EventListExample() {
	const data = [
		{
			title: "Event 1",
			subtitle: "This is my first event 00:00 - 23:59",
			// down here required fields
			key: "1",
			startDate: dayjs("2024-01-01 00:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-01 23:59", "YYYY-MM-DD HH:mm"),
		},
		{
			title: "Event 2",
			subtitle: "This event goes 13:00 to 15:00",
			// down here required fields
			key: "2",
			startDate: dayjs("2024-01-01 13:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-01 15:00", "YYYY-MM-DD HH:mm"),
		},
		{
			title: "Event 3",
			subtitle: "This event goes over 2 days 08:00 - 16:00",
			// down here required fields
			key: "3",
			startDate: dayjs("2024-01-02 08:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-03 16:00", "YYYY-MM-DD HH:mm"),
		},
	]

	const [useCustomHeader, setUseCustomHeader] = useState(false)

	return (
		<div className="bg-surface">
			<Label htmlFor="useCustomHeader">Use Custom Header</Label>
			<input
				type="checkbox"
				id="useCustomHeader"
				checked={useCustomHeader}
				onChange={(e) => {
					setUseCustomHeader(e.target.checked)
				}}
			/>
			<EventList
				items={data}
				minStartTime={dayjs("2024-01-01", "YYYY-MM-DD")}
				maxEndTime={dayjs("2024-01-31", "YYYY-MM-DD")}
				dayStart="00:00"
				dayEnd="23:59"
				renderTimeHeader={
					useCustomHeader
						? (date: Dayjs) => (
								<span className="text-text-subtle text-lg">
									{DateUtils.toDateType(date)}
								</span>
							)
						: undefined
				}
				/*renderEvent={(obj, startDate, endDate) => {
					return (
						<div
							data-id={obj.key}
							className="flex justify-between py-1 cursor-pointer border-solid border-l-8 overflow-hidden"
						>
							<div className="flex pl-2.5 flex-col overflow-hidden">
								<div className="text-text-subtle text-xl flex-0 truncate">
									<span>{obj.title}</span>
								</div>
								<div className="text-text-subtle text-sm flex-0 truncate">
									<span>{obj.subtitle}</span>
								</div>
								<div className="text-text">
									{startDate?.format("HH:mm")} -{" "}
									{endDate?.format("HH:mm")}
								</div>
							</div>
						</div>
					)
				}}*/
			/>
		</div>
	)
}
//#endregion event-list

//#region event-list-start-end
function EventListStartEndExample() {
	const data = [
		{
			title: "Event 1",
			subtitle: "This is my first event 00:00 - 23:59",
			// down here required fields
			key: "1",
			startDate: dayjs("2024-01-01 00:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-01 23:59", "YYYY-MM-DD HH:mm"),
		},
		{
			title: "Event 2",
			subtitle: "This event goes 13:00 to 15:00",
			// down here required fields
			key: "2",
			startDate: dayjs("2024-01-01 13:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-01 15:00", "YYYY-MM-DD HH:mm"),
		},
		{
			title: "Event 3",
			subtitle: "This event goes over 2 days 08:00 - 16:00",
			// down here required fields
			key: "3",
			startDate: dayjs("2024-01-02 08:00", "YYYY-MM-DD HH:mm"),
			endDate: dayjs("2024-01-03 16:00", "YYYY-MM-DD HH:mm"),
		},
	]

	return (
		<div className="">
			<EventList
				items={data}
				minStartTime={dayjs("2024-01-01", "YYYY-MM-DD")}
				maxEndTime={dayjs("2024-01-31", "YYYY-MM-DD")}
				dayStart="08:00"
				dayEnd="18:00"
				renderTimeHeader={(date) => (
					<span className="text-text-subtle text-lg">
						{DateUtils.toDateType(date)}
					</span>
				)}
				renderEvent={(obj, startDate, endDate) => {
					return (
						<div
							data-id={obj.key}
							className="flex justify-between py-1 cursor-pointer border-solid border-l-8 border-l-danger-bold overflow-hidden bg-danger"
						>
							<div className="flex pl-2.5 flex-col overflow-hidden">
								<div className="text-text-subtle text-xl flex-0 truncate">
									<span>{obj.title}</span>
								</div>
								<div className="text-text-subtle text-sm flex-0 truncate">
									<span>{obj.subtitle}</span>
								</div>
								<div className="text-text">
									{startDate?.format("HH:mm")} -{" "}
									{endDate?.format("HH:mm")}
								</div>
							</div>
						</div>
					)
				}}
			/>
		</div>
	)
}
//#endregion event-list-start-end

export default function EventListShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="EventList"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=EventList",
				},
			]}
			examples={[
				{
					title: "Basic",
					example: <EventListExample />,
					sourceCodeExampleId: "event-list",
				},
				{
					title: "Custom Start/End-Times and Custom Render",
					example: <EventListStartEndExample />,
					sourceCodeExampleId: "event-list-start-end",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"
import {
	FilterCard,
	FilterCards,
	FilterDropdown,
	FilterDropdowns,
	PageLayout,
} from "@linked-planet/ui-kit-ts"
import type { FilterType } from "@linked-planet/ui-kit-ts"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"

function FiltersShowcase(props: ShowcaseProps) {
	//#region filtercard

	const [selectedValues, setSelectedValues] = useState<string[]>([
		"chocolate",
		"vanilla",
		"banana",
	])

	const filter: FilterType = {
		attributeName: "Ice Creams",
		availableValues: [
			"strawberry",
			"chocolate",
			"vanilla",
			"mint",
			"banana",
			"orange",
			"apple",
			"lemon",
			"grapefruit",
			"pistaccio",
			"coconut",
			"cherry",
			"blackberry",
			"blueberry",
			"tiramisu",
			"malaga",
			"toffee",
			"cookie",
			"mango",
			"kiwi",
			"lime",
			"peach",
			"apricot",
		],
		selectableValues: [
			"strawberry",
			"chocolate",
			"vanilla",
			"mint",
			//"banana",
			"orange",
			"apple",
			"lemon",
			"grapefruit",
			"cherry",
			"blackberry",
			"blueberry",
			"toffee",
			"cookie",
			"mango",
			"kiwi",
			"lime",
			"peach",
			"apricot",
		],
		selectedValues,
	}

	const filterCardExample = (
		<FilterCard
			filter={filter}
			onAttributeClick={(cat, attr) => {
				setSelectedValues((old) => {
					const newSelected = [...old]
					const index = newSelected.indexOf(attr)
					if (index >= 0) {
						newSelected.splice(index, 1)
					} else {
						newSelected.push(attr)
					}
					return newSelected
				})
			}}
			onSelectedChanged={(cat, attrs) => {
				setSelectedValues(attrs)
			}}
			className="max-h-[20rem]"
		/>
	)
	//#endregion filtercard

	//#region filtercards
	const filters: FilterType[] = [
		filter,
		{
			attributeName: "Fruits",
			availableValues: [
				"apple",
				"banana",
				"orange",
				"strawberry",
				"grape",
				"cherry",
				"pear",
				"peach",
				"plum",
				"pineapple",
				"mango",
				"kiwi",
				"lemon",
				"lime",
				"coconut",
				"avocado",
				"apricot",
				"blackberry",
				"blueberry",
				"cranberry",
				"fig",
				"grapefruit",
				"guava",
				"honeydew",
				"kumquat",
				"lychee",
				"nectarine",
				"papaya",
				"passionfruit",
				"persimmon",
				"pomegranate",
				"raspberry",
				"starfruit",
				"tangerine",
				"watermelon",
			],
			selectableValues: ["apple", "banana", "orange"],
			selectedValues,
		},
		{
			attributeName: "Vegetables",
			availableValues: ["tomato", "carrot", "cucumber", "potato"],
			selectableValues: ["tomato", "carrot", "cucumber"],
			selectedValues: ["tomato", "carrot"],
		},
		{
			attributeName: "Drinks",
			availableValues: ["water", "cola", "juice", "beer"],
			selectableValues: ["water", "cola", "juice"],
			selectedValues: ["water", "cola"],
		},
	]

	const filterCardsExample = (
		<FilterCards
			filters={filters}
			onAttributeClick={(cat, attr) => {
				if (cat !== "Ice Creams") {
					console.info(
						"onAttributeClick",
						cat,
						attr,
						"only Ice Cream is supported",
					)
					return
				}
				setSelectedValues((old) => {
					const newSelected = [...old]
					const index = newSelected.indexOf(attr)
					if (index >= 0) {
						newSelected.splice(index, 1)
					} else {
						newSelected.push(attr)
					}
					return newSelected
				})
			}}
			onSelectedChanged={(cat, attrs) => {
				if (cat !== "Ice Creams") {
					console.info(
						"onAttributeClick",
						cat,
						attrs,
						"only Ice Cream is supported",
					)
					return
				}
				console.log("onSelectedChanged", attrs)
				setSelectedValues(attrs)
			}}
			className="max-h-[20rem]"
		/>
	)
	//#endregion filtercards

	//#region filterdropdown
	const filterDropdownExample = (
		<FilterDropdown
			filter={filter}
			onAttributeClick={(cat, attr) => {
				console.log("on attribute click", cat, attr)
			}}
			onSelectedChanged={(cat, attrs) => {
				console.log("on selected changed", attrs)
				setSelectedValues(attrs)
			}}
		/>
	)
	//#endregion filterdropdown

	//#region filterdropdowns
	const filterDropdownsExample = (
		<>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle>
						Filters
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderLine>
						<FilterDropdowns
							className="w-full"
							filters={filters}
							onSelectedChanged={(cat, attrs) => {
								if (cat !== "Ice Creams") {
									console.info(
										"onAttributeClick",
										cat,
										attrs,
										"only Ice Cream is supported",
									)
									return
								}
								console.log("onSelectedChanged", attrs)
								setSelectedValues(attrs)
							}}
						/>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyHeader>
						Body Header
					</PageLayout.PageBodyHeader>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</>
	)
	//#endregion filterdropdowns

	return (
		<ShowcaseWrapperItem
			name="Filters"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Filters",
				},
			]}
			examples={[
				{
					title: "FilterCard",
					example: filterCardExample,
					sourceCodeExampleId: "filtercard",
				},
				{
					title: "FilterCards",
					example: filterCardsExample,
					sourceCodeExampleId: "filtercards",
				},
				{
					title: "FilterDropdown",
					example: filterDropdownExample,
					sourceCodeExampleId: "filterdropdown",
				},
				{
					title: "FilterDropdowns",
					example: filterDropdownsExample,
					sourceCodeExampleId: "filterdropdowns",
				},
			]}
		/>
	)
}

export default FiltersShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Flag, ToastFlagContainer, showFlag } from "@linked-planet/ui-kit-ts"
import WarningIcon from "@atlaskit/icon/glyph/warning"

function FlagShowcase(props: ShowcaseProps) {
	//#region flag
	const example = (
		<div className="flex flex-col gap-3">
			<Flag
				title="Flag"
				icon={<WarningIcon label="" />}
				description="Action Flag"
				id="testflag"
				testId="testflag"
				actions={[
					{
						content: "Action",
						onClick: () => {
							console.log("Action clicked")
							showFlag({
								title: "Flag",
								description: "Action Flag",
								autoClose: false,
							})
						},
					},
				]}
			/>
			<Flag
				title="Flag"
				description="Action Flag"
				actions={[{ content: "Action", onClick: () => {} }]}
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Action Flag"
				actions={[{ content: "Action", onClick: () => {} }]}
				type="pale"
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
				type="pale"
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
				type="pale"
			/>

			<Flag title="Flag" description="Error Flag" appearance="error" />

			<Flag
				title="Flag"
				description="Error Flag"
				appearance="error"
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Error Flag"
				appearance="error"
				type="pale"
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				actions={[{ content: "Action", onClick: () => {} }]}
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				type="pale"
			/>

			<Flag
				title="Flag"
				description="Discovery Flag"
				appearance="discovery"
				actions={[{ content: "Action", onClick: () => {} }]}
			/>

			<Flag
				title="Flag"
				description="Discovery Flag"
				appearance="discovery"
				type="inverted"
			/>

			<Flag
				title="Flag"
				description="Discovery Flag"
				appearance="discovery"
				type="pale"
			/>
			<ToastFlagContainer />
		</div>
	)
	//#endregion flag

	return (
		<ShowcaseWrapperItem
			name="Flag"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://atlassian.design/components/flag/examples",
				},
			]}
			description="Drop in replacement for the @atlaskit/flag component."
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "flag" },
			]}
		/>
	)
}

export default FlagShowcase

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { DynamicForm } from "@linked-planet/ui-kit-ts"
import { Button, ButtonGroup } from "@linked-planet/ui-kit-ts"

interface TestObject {
	firstname: string
	lastname: string
	language: string
	hobbies: string[]
	age: number
	alive: boolean
}

const testObject = {
	firstname: "Max",
	lastname: "Mustermann",
	language: "de",
	hobbies: ["Football", "Guitar"],
	age: 30,
	alive: true,
}

const languages = [
	{ label: "German", value: "de" },
	{ label: "English", value: "en" },
	{ label: "Swedisch", value: "se" },
]

const hobbies = [
	{ label: "Football", value: "Football" },
	{ label: "Guitar", value: "Guitar" },
	{ label: "Basketball", value: "Basketball" },
]

//#region form-vertical
function FormVerticalExample() {
	return (
		<div className="bg-surface">
			<DynamicForm.Form<TestObject>
				obj={testObject}
				onSubmit={(data) => {
					console.info("Saving form", data)
				}}
			>
				{(formProps) => (
					<>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="firstname"
							title="Firstname"
						/>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="lastname"
							title="Lastname"
						/>
						<DynamicForm.SelectSingleFormField
							formProps={formProps}
							name="language"
							title="Language"
							options={languages}
							onChange={(value) =>
								console.info("On language change", value)
							}
						/>
						<DynamicForm.SelectMultiFormField
							formProps={formProps}
							name="hobbies"
							title="Hobbies"
							options={hobbies}
						/>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="age"
							title="Age"
						/>
						<DynamicForm.CheckboxFormField
							formProps={formProps}
							name="alive"
							title="Alive"
						/>
					</>
				)}
			</DynamicForm.Form>
		</div>
	)
}
//#endregion form-vertical

//#region form-horizontal
function FormHorizontalExample() {
	return (
		<div className="bg-surface">
			<DynamicForm.Form<TestObject>
				horizontal
				obj={testObject}
				onSubmit={(data) => {
					console.info("Saving form", data)
				}}
			>
				{(formProps) => (
					<>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="firstname"
							title="Firstname"
							placeholder="Vorname"
						/>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="lastname"
							title="Lastname"
							placeholder="Nachname"
						/>
						<DynamicForm.SelectSingleFormField
							formProps={formProps}
							name="language"
							title="Language"
							options={languages}
							onChange={(value) =>
								console.info("On language change", value)
							}
						/>
						<DynamicForm.SelectMultiFormField
							formProps={formProps}
							name="hobbies"
							title="Hobbies"
							options={hobbies}
						/>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="age"
							title="Age"
						/>
						<DynamicForm.CheckboxFormField
							formProps={formProps}
							name="alive"
							title="Alive"
						/>
					</>
				)}
			</DynamicForm.Form>
		</div>
	)
}
//#endregion form-horizontal

//#region form-custom
function FormCustomExample() {
	return (
		<div className="bg-surface">
			<DynamicForm.Form<TestObject>
				hideReset
				hideSave
				className="max-w-4xl mt-3"
				obj={testObject}
				onSubmit={(data) => {
					console.info("Saving form", data)
				}}
			>
				{(formProps) => (
					<>
						<div className="flex gap-2">
							<DynamicForm.InputFormField
								formProps={formProps}
								name="firstname"
								title="Firstname"
							/>
							<DynamicForm.InputFormField
								formProps={formProps}
								name="lastname"
								title="Lastname"
							/>

							<DynamicForm.SelectSingleFormField
								formProps={formProps}
								name="language"
								title="Language"
								options={languages}
								onChange={(value) =>
									console.info("On language change", value)
								}
							/>
						</div>
						<DynamicForm.SelectMultiFormField
							formProps={formProps}
							name="hobbies"
							title="Hobbies"
							options={hobbies}
						/>
						<DynamicForm.InputFormField
							formProps={formProps}
							name="age"
							title="Age"
						/>
						<DynamicForm.CheckboxFormField
							formProps={formProps}
							name="alive"
							title="Alive"
						/>
						<ButtonGroup>
							<Button appearance="primary" type="submit">
								Submit
							</Button>
							<Button appearance="subtle" type="reset">
								Reset
							</Button>
						</ButtonGroup>
					</>
				)}
			</DynamicForm.Form>
		</div>
	)
}
//#endregion form-custom

export default function FormShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Form"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Form",
				},
			]}
			examples={[
				{
					title: "Form Vertical",
					example: <FormVerticalExample />,
					sourceCodeExampleId: "form-horizontal",
				},
				{
					title: "Form Horizontal",
					example: <FormHorizontalExample />,
					sourceCodeExampleId: "form-vertical",
				},
				{
					title: "Form Custom",
					example: <FormCustomExample />,
					sourceCodeExampleId: "form-custom",
				},
			]}
		/>
	)
}

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { useGlobalState } from "@linked-planet/ui-kit-ts/GlobalState"
import { Input, Label } from "@linked-planet/ui-kit-ts"

//#region global-state
function GlobalStateExample() {
	// define global state type
	interface MyData {
		key: string
		name: string
	}

	// create global state hook
	const useMyData = useGlobalState<MyData>("myData", {
		key: "1",
		name: "Foo Bar",
	})

	// use hook in local components
	const [myData, setMyData] = useMyData

	return (
		<>
			<>
				<Label htmlFor="myDataKey">Key</Label>
				<Input
					type="text"
					id="myDataKey"
					value={myData.key}
					onChange={(e) => {
						setMyData({ key: e.target.value, name: myData.name })
					}}
				/>
				<Label htmlFor="myDataName">Name</Label>
				<Input
					type="text"
					id="myDataName"
					value={myData.name}
					onChange={(e) => {
						setMyData({ key: myData.key, name: e.target.value })
					}}
				/>
			</>
			<div className="bg-surface mt-8">{myData.key}</div>
			<div className="bg-surface">{myData.name}</div>
		</>
	)
}
//#endregion global-state

//#region global-state-array

function ArrayString() {
	const [arrayData] = useGlobalState<string[]>("myArrayData", [])
	return (
		<>
			<div className="bg-surface mt-8">{arrayData.join(", ")}</div>
		</>
	)
}

function GlobalArrayStateExample() {
	// create global state hook
	const [arrayData, setArrayData] = useGlobalState<string[]>("myArrayData", [
		"Apple",
		"Banana",
	])

	return (
		<>
			<>
				<Label htmlFor="myDataKey">Array Data Input</Label>
				<Input
					type="text"
					id="myDataKey"
					onKeyUp={(e) => {
						if (e.key !== "Enter") return
						setArrayData([
							...arrayData,
							(e.target as HTMLInputElement).value,
						])
					}}
				/>
			</>
			<ArrayString />
		</>
	)
}
//#endregion global-state-array

export default function GlobalStateShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="GlobalState"
			description="Global state is a way to store data in a global store. It is useful for storing data that is needed in multiple components. But it does not have fine-grained reactivity - use it only for simple values and shallow objects where things are subscribed to changes only on the top 'value' level."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=GlobalState",
				},
			]}
			examples={[
				{
					title: "Global State",
					example: <GlobalStateExample />,
					sourceCodeExampleId: "global-state",
				},
				{
					title: "Global Array State",
					example: <GlobalArrayStateExample />,
					sourceCodeExampleId: "global-state-array",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ArrowDownIcon from "@atlaskit/icon/glyph/arrow-down"
import BulletListIcon from "@atlaskit/icon/glyph/bullet-list"
import CheckCircleIcon from "@atlaskit/icon/glyph/check-circle"
import LogIcon from "@atlaskit/icon/glyph/backlog"
import RefreshIcon from "@atlaskit/icon/glyph/refresh"
import SendIcon from "@atlaskit/icon/glyph/send"
import TrashIcon from "@atlaskit/icon/glyph/trash"

function IconShowcase(props: ShowcaseProps) {
	//#region icon
	const example = (
		<div>
			<ArrowDownIcon label="" />
			<BulletListIcon label="" />
			<CheckCircleIcon label="" />
			<LogIcon label="" />
			<RefreshIcon label="" />
			<SendIcon label="" />
			<TrashIcon label="" primaryColor="red" />
		</div>
	)
	//#endregion icon

	return (
		<ShowcaseWrapperItem
			name="Icon"
			{...props}
			packages={[
				{
					name: "@atlaskit/icon",
					url: "https://atlassian.design/components/icon/icon-explorer",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "icon" },
			]}
		/>
	)
}

export default IconShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { IconSizeHelper } from "@linked-planet/ui-kit-ts"

import AddItemIcon from "@atlaskit/icon/glyph/add-item"

export default function IconSizeHelperShowcase(props: ShowcaseProps) {
	//#region iconsizehelper
	const example = (
		<>
			<IconSizeHelper size={67}>
				<AddItemIcon label="" />
			</IconSizeHelper>
			<IconSizeHelper
				size={"2.3rem"}
				className="text-brand bg-warning-bold"
				style={{
					borderRadius: "50%",
				}}
			>
				<AddItemIcon label="" />
			</IconSizeHelper>
		</>
	)
	//#endregion iconsizehelper

	return (
		<ShowcaseWrapperItem
			name="Icon Size Helper"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#IconSizeHelper",
				},
			]}
			examples={[
				{
					title: "Icon Size Helper",
					example: example,
					sourceCodeExampleId: "iconsizehelper",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { InlineMessage } from "@linked-planet/ui-kit-ts"

export default function InlineMessageShowcase(props: ShowcaseProps) {
	//#region inlinemessage
	const example = (
		<>
			<InlineMessage
				message={{ text: "This is a standard inline message." }}
			/>
			<InlineMessage
				message={{
					text: "This is a success inline message.",
					appearance: "success",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a danger inline message.",
					appearance: "danger",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a warning inline message.",
					appearance: "warning",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is an information inline message.",
					appearance: "information",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a discovery inline message.",
					appearance: "discovery",
				}}
			/>
			<hr />
			<InlineMessage
				message={{
					text: "This is an information message with a timeout.",
					timeOut: 5,
					appearance: "information",
				}}
				openingDirection="topdown"
			/>
			<InlineMessage
				message={{
					text: "This is an discovery message with a timeout and bottom up removal.",
					appearance: "discovery",
				}}
				openingDirection="bottomup"
			/>
			<InlineMessage
				message={{
					text: "This is a not removable message.",
					appearance: "information",
				}}
				removable={false}
			/>
		</>
	)
	//#endregion inlinemessage

	return (
		<ShowcaseWrapperItem
			name="Inline Message"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "inlinemessage",
				},
			]}
		/>
	)
}

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKTextField from "@atlaskit/textfield"
import {
	Button,
	ButtonGroup,
	Fieldset,
	Input,
	Label,
	TextArea,
} from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

import ScheduleIcon from "@atlaskit/icon/glyph/schedule"

//#region input-form-example
type FormData = {
	testInput: string
}

function FormExample() {
	const {
		handleSubmit,
		control,
		reset,
		formState: { errors, isValid },
	} = useForm<FormData>({
		defaultValues: {
			testInput: "test",
		},
		mode: "all",
	})

	console.log("errors", errors)

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<Label htmlFor="testInput" required>
				Test Input
			</Label>
			<Input
				{...control.register("testInput", {
					required: true,
					minLength: 3,
				})}
				placeholder="Placeholder"
				invalid={!!errors.testInput}
				errorMessage={
					errors.testInput?.type === "required"
						? "Required"
						: "Min length 3"
				}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion input-form-example

export default function InputShowcase(props: ShowcaseProps) {
	const exampleAK = (
		<Fieldset legend="Input Example">
			<AKTextField />
			<AKTextField isDisabled />
			<AKTextField placeholder="Placeholder" />
			<AKTextField isInvalid value={"invalid"} />
			<AKTextField isReadOnly value={"readonly"} />
			<AKTextField type="number" defaultValue={1} />
			<AKTextField type="number" defaultValue={1} appearance="subtle" />
			{/*<AKTextArea placeholder="Text Area">It wants children</AKTextArea>*/}
		</Fieldset>
	)

	//#region input
	const exampleLP = (
		<Fieldset legend="Input Example">
			<Label htmlFor="testInput" required>
				This is a required input label.
			</Label>
			<Input
				minLength={3}
				id="testInput"
				helpMessage="This is a help message."
			/>
			<Input disabled />
			<Label htmlFor="testInput2">This is a label.</Label>
			<Input placeholder="Placeholder" id="testInput2" />
			<Input
				invalid={true}
				value={"invalid"}
				errorMessage="This is an error message."
			/>
			<Input
				aria-invalid={true}
				value={"aria-invalid"}
				errorMessage="This is an error message."
				helpMessage="This is a help message."
			/>
			<Input readOnly value={"readonly"} />
			<Input type="number" defaultValue={1} />
			<Input type="number" defaultValue={1} appearance="subtle" />
			<Input
				type="text"
				defaultValue={"default text"}
				iconAfter={<ScheduleIcon label="" />}
				iconBefore={<ScheduleIcon label="" />}
			/>
			<TextArea placeholder="Placeholder" />
			<TextArea placeholder="Placeholder" disabled />
		</Fieldset>
	)
	//#endregion input

	const example = (
		<div className="flex gap-4">
			{exampleAK}
			{exampleLP}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Input"
			description="Input compatible to use with react-hook-form but with Atlassian fitting styling."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Input",
				},
			]}
			examples={[
				{
					title: "TextInput",
					example: example,
					sourceCodeExampleId: "input",
				},
				{
					title: "Form Example",
					example: <FormExample />,
					sourceCodeExampleId: "input-form-example",
				},
			]}
		/>
	)
}

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ReactJoyride from "react-joyride"
import { token } from "@atlaskit/tokens"
import { Button, ButtonGroup } from "@linked-planet/ui-kit-ts"

function JoyrideShowcase(props: ShowcaseProps) {
	//#region joyride
	// fix missing global
	if (!(window as any).global) (window as any).global = window

	const [isJoyrideActive, setIsJoyrideActive] = useState(false)
	const example = (
		<>
			<div
				style={{
					color: token("color.text.warning", "#990"),
					backgroundColor: token("color.background.neutral", "#fff"),
					padding: "1rem",
				}}
			>
				If you get the error &apos;global is not defined&apos; you have
				to add the following:
				<br />
				<div>
					<pre>if (!window.global) window.global = window</pre>
				</div>
			</div>
			<div>
				<ButtonGroup>
					<Button
						selected={isJoyrideActive}
						onClick={() => setIsJoyrideActive(true)}
					>
						Start Tour
					</Button>
					<Button className="joyride-first">First step</Button>
					<Button className="joyride-second">Second step</Button>
					<Button className="joyride-third">Third step</Button>
				</ButtonGroup>

				<ReactJoyride
					run={isJoyrideActive}
					continuous={true}
					showProgress={true}
					disableScrolling={false}
					scrollToFirstStep={true}
					scrollOffset={220}
					locale={{
						back: "Zurück",
						close: "Schließen",
						last: "Fertig",
						next: "Weiter",
						open: "Öffnen",
						skip: "Überspringen",
					}}
					callback={(joyrideState) => {
						switch (joyrideState.action) {
							case "close":
								setIsJoyrideActive(false)
								break
							case "reset":
								setIsJoyrideActive(false)
								break
						}
					}}
					steps={[
						{
							title: "First step title",
							target: ".joyride-first",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>First step content...</span>,
						},
						{
							title: "Second step title",
							target: ".joyride-second",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Second step content...</span>,
						},
						{
							title: "Third step title",
							target: ".joyride-third",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Third step content...</span>,
						},
					]}
				/>
			</div>
		</>
	)
	//#endregion joyride

	return (
		<ShowcaseWrapperItem
			name="Joyride"
			{...props}
			packages={[
				{
					name: "react-joyride",
					url: "https://docs.react-joyride.com/",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "joyride" },
			]}
		/>
	)
}

export default JoyrideShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	Button,
	Checkbox,
	Dropdown,
	Input,
	Label,
	Select,
} from "@linked-planet/ui-kit-ts"

//#region layeringexample
function Example() {
	return (
		<div className="bg-surface hover:bg-surface-hovered active:bg-surface-pressed border-border border p-4">
			bg-surface
			<div className="flex p-4">
				<Input placeholder="Test Input" />
				<Input disabled placeholder="Test Input Disabled" />
				<Input placeholder="Test Input 2" />
				<Select
					options={[
						{ label: "Test", value: "test" },
						{ label: "Test 2", value: "test2" },
					]}
					placeholder="Test Select"
				/>
				<Dropdown.Menu trigger="Dropdown">
					<Dropdown.Item>Test</Dropdown.Item>
					<Dropdown.Item>Test 2</Dropdown.Item>
				</Dropdown.Menu>
			</div>
			<div className="bg-surface-raised hover:bg-surface-raised-hovered active:bg-surface-raised-pressed border-border border p-4">
				bg-surface-raised
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
				<div className="bg-surface-overlay hover:bg-surface-overlay-hovered active:bg-surface-overlay-pressed border-border border p-4">
					bg-surface-overlay
					<div className="p-4">
						<Input
							placeholder="Test Input"
							errorMessage="TEST"
							invalid
						/>
						<Input disabled placeholder="Test Input Disabled" />
					</div>
				</div>
			</div>
			<div className="bg-surface-sunken border-border mt-4 border p-4">
				bg-surface-sunken
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
			</div>
			<div className="border-border shadow-raised mt-4 border p-4">
				shadow-raised
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
			</div>
			<div className="border-border shadow-overflow mt-4 border p-4">
				shadow-overflow
				<div className="p-4">
					<Label>Test Label</Label>
					<Input placeholder="Test Input" />
					<Label>Test Label 2</Label>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<Label>Test Label 3</Label>
					<Checkbox label="Test Checkbox" />
				</div>
			</div>
			<div className="border-border shadow-overlay mt-4 border p-4">
				shadow-overlay
				<div className="flex">
					<Input placeholder="Test Input" />
					<div>
						<Button>In Div</Button>
					</div>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<div>
						<Dropdown.Menu trigger="DD in Div">
							<Dropdown.Item>Test</Dropdown.Item>
							<Dropdown.Item>Test 2</Dropdown.Item>
						</Dropdown.Menu>
					</div>
				</div>
				<div className="mt-4 flex">
					<Input placeholder="Test Input" />
					<Button>In Div</Button>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<Dropdown.Menu trigger="DD in Div">
						<Dropdown.Item>Test</Dropdown.Item>
						<Dropdown.Item>Test 2</Dropdown.Item>
					</Dropdown.Menu>
				</div>
			</div>
		</div>
	)
}
//#endregion layeringexample

export default function LayeringShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Layering"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Not a component but only a showcase of the color layering system."
			examples={[
				{
					title: "Layering",
					example: <Example />,
					sourceCodeExampleId: "layeringexample",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { LoadingSpinner } from "@linked-planet/ui-kit-ts"

export default function LoadingSpinnerShowcase(props: ShowcaseProps) {
	//#region loadingspinner
	const example = (
		<div className="flex gap-4">
			<LoadingSpinner />
			<LoadingSpinner size="xsmall" />
			<LoadingSpinner size="small" />
			<LoadingSpinner size="medium" />
			<LoadingSpinner size="large" />
			<LoadingSpinner size="xlarge" />
		</div>
	)
	//#endregion loadingspinner

	return (
		<ShowcaseWrapperItem
			name="Loading Spinner"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "loadingspinner",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKLozenge from "@atlaskit/lozenge"
import { Lozenge } from "@linked-planet/ui-kit-ts"

function LozengeShowcase(props: ShowcaseProps) {
	//#region lozenge
	const example = (
		<div className="flex flex-col gap-8">
			<div className="">
				<AKLozenge>First lozenge</AKLozenge>
				<AKLozenge appearance="new">new</AKLozenge>
				<AKLozenge appearance="new" isBold>
					new bold
				</AKLozenge>
				<AKLozenge appearance="success">success</AKLozenge>
				<AKLozenge appearance="success" isBold>
					success bold
				</AKLozenge>
				<AKLozenge appearance="inprogress">inprogress</AKLozenge>
				<AKLozenge appearance="inprogress" isBold>
					inprogress bold
				</AKLozenge>
				<AKLozenge appearance="moved">moved</AKLozenge>
				<AKLozenge appearance="moved" isBold>
					moved bold
				</AKLozenge>
				<AKLozenge appearance="removed">removed</AKLozenge>
				<AKLozenge appearance="removed" isBold>
					removed bold
				</AKLozenge>
			</div>
			<div>
				<Lozenge>First lozenge</Lozenge>
				<Lozenge appearance="new">new</Lozenge>
				<Lozenge appearance="new" bold>
					new bold
				</Lozenge>
				<Lozenge appearance="success">success</Lozenge>
				<Lozenge appearance="success" bold>
					success bold
				</Lozenge>
				<Lozenge appearance="inprogress">inprogress</Lozenge>
				<Lozenge appearance="inprogress" bold>
					inprogress bold
				</Lozenge>
				<Lozenge appearance="moved">moved</Lozenge>
				<Lozenge appearance="moved" bold>
					moved bold
				</Lozenge>
				<Lozenge appearance="removed">removed</Lozenge>
				<Lozenge appearance="removed" bold>
					removed bold
				</Lozenge>
			</div>
		</div>
	)
	//#endregion lozenge

	return (
		<ShowcaseWrapperItem
			name="Lozenge"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Lozenge",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "lozenge",
				},
			]}
		/>
	)
}

export default LozengeShowcase

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

function MenuShowcase(props: ShowcaseProps) {
	//#region menu
	const [items] = useState(["Menu A", "Menu B", "Menu C"])
	const [selectedItems, setSelectedItems] = useState(["Menu A"])
	const example = (
		<div>
			{/*<MenuGroup>
				<HeadingItem>
					<h4>Filter</h4>
				</HeadingItem>

				{items.map((item) => {
					return (
						<a
							key={item}
							onClick={() => {
								if (selectedItems.includes(item)) {
									setSelectedItems([
										...selectedItems.filter(
											(it) => it != item,
										),
									])
								} else {
									setSelectedItems([...selectedItems, item])
								}
							}}
						>
							<Tag
								appearance={
									selectedItems.includes(item)
										? "gray"
										: undefined
								}
							>
								{item}
							</Tag>
							<Badge appearance="default">0</Badge>
						</a>
					)
				})}
			</MenuGroup>*/}
		</div>
	)
	//#endregion menu

	return (
		<ShowcaseWrapperItem
			name="Menu"
			{...props}
			packages={[
				{
					name: "@atlaskit/menu",
					url: "https://atlassian.design/components/menu/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "menu" },
			]}
		/>
	)
}

export default MenuShowcase

import { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import CrossIcon from "@atlaskit/icon/glyph/cross"
/*import {
	default as AKModal,
	ModalBody as AKModalBody,
	ModalFooter as AKModalFooter,
	ModalHeader as AKModalHeader,
	ModalTitle as AKModalTitle,
	ModalTransition as AKModalTransition,
} from "@atlaskit/modal-dialog"*/
import {
	Modal,
	Select,
	Button,
	Dropdown,
	Collapsible,
} from "@linked-planet/ui-kit-ts"
//import { default as AKSelect } from "@atlaskit/select"
import { DropdownMenuItem } from "@radix-ui/react-dropdown-menu"

function AKExample() {
	const [isAKModalActive, setIsAKModalActive] = useState(false)

	const selectOptions = []
	for (let i = 0; i < 100; i++) {
		selectOptions.push({
			label: i.toString(),
			value: i.toString(),
		})
	}

	return (
		<>
			<div>AKModal: {isAKModalActive.toString()}</div>
			<Button onClick={() => setIsAKModalActive(true)}>
				Show AK Modal
			</Button>

			{/*isAKModalActive && (
				<AKModalTransition>
					<AKModal onClose={() => setIsAKModalActive(false)}>
						<AKModalHeader>
							<AKModalTitle>Sample Modal</AKModalTitle>
							<Button
								appearance="link"
								onClick={() => setIsAKModalActive(false)}
							>
								<CrossIcon label="Close popup" />
							</Button>
						</AKModalHeader>

						<AKModalBody>
							<p>This is the body of the AK modal.</p>
							<AKSelect options={selectOptions} />
							<Select
								placeholder="Choose"
								options={selectOptions}
								className="z-10"
							/>
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Distinctio ipsam harum rerum quia, nam, autem
							non, commodi expedita dolore quisquam saepe odit
							maiores id alias reiciendis. Aut aperiam minus eum.
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Illum quos dolorum officia id porro illo sit
							voluptates error doloremque? Iste deserunt amet illo
							incidunt modi. Facilis reiciendis ratione at
							veritatis. Lorem ipsum dolor sit amet consectetur,
							adipisicing elit. Deserunt non, perspiciatis
							voluptate cumque vel eveniet ratione sequi ullam
							facilis! Beatae, voluptatem aperiam consequatur
							assumenda consectetur possimus accusantium maxime
							similique labore! Lorem ipsum dolor sit amet
							consectetur, adipisicing elit. Ullam, possimus
							facere ut odit mollitia vel consectetur earum
							reiciendis beatae inventore fugiat, quo eaque ipsum
							soluta facilis doloremque, voluptatibus odio
							officiis. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Laudantium voluptatum aut
							voluptates distinctio nam neque dolore, maiores
							autem impedit, doloribus eveniet laborum
							necessitatibus ex! Possimus odit in commodi nulla
							architecto. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Officia, facere reiciendis
							incidunt obcaecati aut corrupti tempora commodi nam
							aspernatur et quas beatae delectus perspiciatis
							alias quia inventore molestias quis exercitationem?
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Blanditiis temporibus doloremque nam molestiae
							quidem, repellendus eligendi ex magnam quasi. Est
							doloribus quam accusantium? Consequuntur, vel
							sapiente alias repudiandae nisi soluta. Lorem ipsum
							dolor sit amet consectetur adipisicing elit.
							Reiciendis, quibusdam maxime. Numquam, explicabo! At
							vero eligendi cupiditate vel molestias eos sint,
							obcaecati minus suscipit ducimus libero
							reprehenderit, itaque debitis atque? Lorem ipsum
							dolor sit amet, consectetur adipisicing elit.
							Repellendus vero consequatur velit dolores neque
							distinctio harum tempore. Vitae, doloribus
							perferendis! Deserunt reprehenderit dolor tempora
							atque amet officiis ea, velit iste. Lorem ipsum
							dolor sit, amet consectetur adipisicing elit. Est
							nemo accusamus, inventore assumenda et nulla. Eius,
							consequuntur repudiandae ea corrupti eos magni
							itaque temporibus blanditiis aspernatur, earum quam
							ut. Laudantium. Lorem ipsum dolor sit amet
							consectetur adipisicing elit. Doloremque recusandae,
							distinctio in fuga vero ullam tempora nisi laborum
							unde architecto, doloribus dicta fugiat itaque
							voluptatibus dolorum vel aspernatur, inventore nemo?
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Error, corporis animi. Praesentium voluptate,
							optio tenetur harum odio sequi eos possimus officiis
							dignissimos. Laboriosam voluptates fuga est.
							Deserunt quod officia harum!
						</AKModalBody>

						<AKModalFooter>
							<ButtonGroup>
								<Button
									autoFocus={true}
									appearance="primary"
									onClick={() => setIsAKModalActive(false)}
								>
									Close
								</Button>
							</ButtonGroup>
						</AKModalFooter>
					</AKModal>
				</AKModalTransition>
			)*/}
		</>
	)
}

function ControlledExample() {
	const selectOptions = []
	for (let i = 0; i < 100; i++) {
		selectOptions.push({
			label: i.toString(),
			value: i.toString(),
		})
	}

	const ddItems = []
	for (let i = 0; i < 100; i++) {
		ddItems.push(<DropdownMenuItem>{i}</DropdownMenuItem>)
	}

	//#region modal_controlled
	const [isModalActive, setIsModalActive] = useState(false)

	return (
		<>
			<div>Modal: {isModalActive.toString()}</div>
			<div>
				<Button onClick={() => setIsModalActive(true)}>
					Show Modal2
				</Button>

				<Modal.Container
					open={isModalActive}
					//defaultOpen={true}
					onOpenChange={(opened) => {
						if (!opened) setIsModalActive(false)
					}}
					shouldCloseOnEscapePress={true}
					accessibleDialogDescription="This is a modal dialog example"
					useModal={true}
				>
					<Modal.Header>
						<Modal.Title accessibleDialogTitle="Sample Modal">
							Sample Modal
						</Modal.Title>
						<Button
							appearance="link"
							onClick={() => setIsModalActive(false)}
							className="text-text p-0"
						>
							<CrossIcon label="Close popup" />
						</Button>
					</Modal.Header>
					<Modal.Body>
						<div>
							<p>This is the body of the modal.</p>
						</div>
						<Select
							placeholder="Choose..."
							options={selectOptions}
						/>
						<Select
							placeholder="Choose..."
							options={selectOptions}
							menuPlacement="top"
							menuIsOpen
						/>
						<Dropdown.Menu
							className="w-full"
							align="end"
							trigger="Dropdown"
							usePortal={false}
						>
							{ddItems}
						</Dropdown.Menu>
						<Collapsible header={"lorem"} defaultOpen={false}>
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Distinctio ipsam harum rerum quia, nam, autem
							non, commodi expedita dolore quisquam saepe odit
							maiores id alias reiciendis. Aut aperiam minus eum.
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Illum quos dolorum officia id porro illo sit
							voluptates error doloremque? Iste deserunt amet illo
							incidunt modi. Facilis reiciendis ratione at
							veritatis. Lorem ipsum dolor sit amet consectetur,
							adipisicing elit. Deserunt non, perspiciatis
							voluptate cumque vel eveniet ratione sequi ullam
							facilis! Beatae, voluptatem aperiam consequatur
							assumenda consectetur possimus accusantium maxime
							similique labore! Lorem ipsum dolor sit amet
							consectetur, adipisicing elit. Ullam, possimus
							facere ut odit mollitia vel consectetur earum
							reiciendis beatae inventore fugiat, quo eaque ipsum
							soluta facilis doloremque, voluptatibus odio
							officiis. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Laudantium voluptatum aut
							voluptates distinctio nam neque dolore, maiores
							autem impedit, doloribus eveniet laborum
							necessitatibus ex! Possimus odit in commodi nulla
							architecto. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Officia, facere reiciendis
							incidunt obcaecati aut corrupti tempora commodi nam
							aspernatur et quas beatae delectus perspiciatis
							alias quia inventore molestias quis exercitationem?
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Blanditiis temporibus doloremque nam molestiae
							quidem, repellendus eligendi ex magnam quasi. Est
							doloribus quam accusantium? Consequuntur, vel
							sapiente alias repudiandae nisi soluta. Lorem ipsum
							dolor sit amet consectetur adipisicing elit.
							Reiciendis, quibusdam maxime. Numquam, explicabo! At
							vero eligendi cupiditate vel molestias eos sint,
							obcaecati minus suscipit ducimus libero
							reprehenderit, itaque debitis atque? Lorem ipsum
							dolor sit amet, consectetur adipisicing elit.
							Repellendus vero consequatur velit dolores neque
							distinctio harum tempore. Vitae, doloribus
							perferendis! Deserunt reprehenderit dolor tempora
							atque amet officiis ea, velit iste. Lorem ipsum
							dolor sit, amet consectetur adipisicing elit. Est
							nemo accusamus, inventore assumenda et nulla. Eius,
							consequuntur repudiandae ea corrupti eos magni
							itaque temporibus blanditiis aspernatur, earum quam
							ut. Laudantium. Lorem ipsum dolor sit amet
							consectetur adipisicing elit. Doloremque recusandae,
							distinctio in fuga vero ullam tempora nisi laborum
							unde architecto, doloribus dicta fugiat itaque
							voluptatibus dolorum vel aspernatur, inventore nemo?
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Error, corporis animi. Praesentium voluptate,
							optio tenetur harum odio sequi eos possimus officiis
							dignissimos. Laboriosam voluptates fuga est.
							Deserunt quod officia harum!
						</Collapsible>
					</Modal.Body>
					<Modal.Footer>
						<Modal.CloseTrigger>
							<Button appearance="primary" className="z-0">
								Close
							</Button>
						</Modal.CloseTrigger>
					</Modal.Footer>
				</Modal.Container>
			</div>
		</>
	)
	//#endregion modal_controlled
}

function ModalShowcase(props: ShowcaseProps) {
	const example = (
		<>
			<AKExample />
			<ControlledExample />
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Modal"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Modal",
				},
			]}
			examples={[
				{
					title: "Example Controlled",
					example,
					sourceCodeExampleId: "modal_controlled",
				},
			]}
		/>
	)
}

export default ModalShowcase

import React from "react"
import {
	Button,
	ButtonGroup,
	Dropdown,
	PageLayout,
} from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

function PageLayoutExample() {
	//#region pagelayout
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle
						titleMenu={
							<Dropdown.Menu>
								<Dropdown.Item>Menu Item 1</Dropdown.Item>
								<Dropdown.Item>Menu Item 2</Dropdown.Item>
								<Dropdown.SubMenu
									trigger="submenu"
									chevronSide="left"
								>
									<Dropdown.Item>Submenu Entry</Dropdown.Item>
								</Dropdown.SubMenu>
								<Dropdown.ItemGroup key="4" hasSeparator>
									<Dropdown.ItemCheckbox>
										Check 1
									</Dropdown.ItemCheckbox>
									<Dropdown.ItemCheckbox>
										Check 2
									</Dropdown.ItemCheckbox>
								</Dropdown.ItemGroup>
								,
								<Dropdown.ItemRadioGroup key="5" hasSeparator>
									<Dropdown.ItemRadio value="r1">
										Radio 1
									</Dropdown.ItemRadio>
									<Dropdown.ItemRadio value="r2">
										Radio 2
									</Dropdown.ItemRadio>
								</Dropdown.ItemRadioGroup>
							</Dropdown.Menu>
						}
					>
						Page Header Title
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						Page Header Sub Title
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<ButtonGroup>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
						</ButtonGroup>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyContent>
						<h1>Text H1</h1>
						<h2>Text H2</h2>
						<h3>Text H3</h3>
						<h4>Text H4</h4>
						<h5>Text H5</h5>
						<h6>Text H6</h6>
						<p>Text P (paragraph)</p>
						<span>Text SPAN</span>
						<pre>Text PRE</pre>
						<code>Text CODE</code>
						<hr />
						<div className="text-2xs">Text 2XS</div>
						<div className="text-xs">Text XS</div>
						<div className="text-sm">Text SM</div>
						<div className="text-md">Text MD</div>
						<div className="text-lg">Text LG</div>
						<div className="text-xl">Text XL</div>
						<div className="text-2xl">Text 2XL</div>
						<div className="text-3xl">Text 3XL</div>
						<div className="text-4xl">Text 4XL</div>
						<div className="text-5xl">Text 5XL</div>
						<div className="text-6xl">Text 6XL</div>
						<div className="text-7xl">Text 7XL</div>
						<div className="text-8xl">Text 8XL</div>
						<div className="text-9xl">Text 9XL</div>
						<hr />
						{Array(100)
							.fill(null)
							.map((_, i) => (
								<div key={i}>Page Body Content {i}</div>
							))}
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayout
}

function PageLayoutExampleWithBodyHeader() {
	//#region pagelayoutwithbodyheader
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader shadow={false}>
					<PageLayout.PageHeaderTitle>
						Page Header Title
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						Page Header Sub Title
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<ButtonGroup>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
						</ButtonGroup>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyHeader>
						Body Header
					</PageLayout.PageBodyHeader>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayoutwithbodyheader
}

function PageLayouOnlyTitle() {
	//#region pagelayouttitleonly
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle>
						Page Header Title
					</PageLayout.PageHeaderTitle>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayouttitleonly
}

export default function PageLayoutShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="PageLayout"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Page Layout",
					example: <PageLayoutExample />,
					sourceCodeExampleId: "pagelayout",
				},
				{
					title: "Body Header",
					example: <PageLayoutExampleWithBodyHeader />,
					sourceCodeExampleId: "pagelayoutwithbodyheader",
				},
				{
					title: "Title Only",
					example: <PageLayouOnlyTitle />,
					sourceCodeExampleId: "pagelayouttitleonly",
				},
			]}
		/>
	)
}

import React, { useMemo, useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Pagination } from "@linked-planet/ui-kit-ts"
//import { default as AKPagination } from "@atlaskit/pagination"

function PageExample() {
	//#region pagination
	const [selectedPage, setSelectedPage] = useState(1)
	const [pageSize, setPageSize] = useState(10)

	const pages = useMemo(
		() => [...Array(100)].map((item, index) => index + 1),
		[],
	)

	return (
		<>
			<Pagination
				pages={pages}
				currentPage={selectedPage}
				onPageChange={(page) => setSelectedPage(page)}
				totalPages={10}
				//maxPageButtons={10}
				pageSize={pageSize}
				pageSizes={[10, 20, 50, 100]}
				onPageSizeChange={setPageSize}
				pageSizeMenuSide="top"
				pageSizeMenuAlign="end"
			/>
		</>
	)
	//#endregion pagination
}

function IndexExample() {
	//#region pagination-index
	const [selectedIndex, setSelectedIndex] = useState(0)
	const [pageSize, setPageSize] = useState(10)

	const pages = useMemo(
		() => [...Array(10)].map((item, index) => index + 1),
		[],
	)

	return (
		<>
			<Pagination
				pages={pages}
				currentPageIndex={selectedIndex}
				onPageIndexChange={(i) => setSelectedIndex(i)}
				totalPages={10}
				maxPageButtons={7}
				pageSize={pageSize}
				pageSizes={[10, 20, 50, 100]}
				onPageSizeChange={setPageSize}
				pageSizeMenuSide="top"
				pageSizeMenuAlign="end"
			/>
			{/*<AKPagination pages={pages} max={6} selectedIndex={selectedIndex} />*/}
		</>
	)
	//#endregion pagination-index
}

function PaginationShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Pagination"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Pagination",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <PageExample />,
					sourceCodeExampleId: "pagination",
				},
				{
					title: "Example Index",
					example: <IndexExample />,
					sourceCodeExampleId: "pagination-index",
				},
			]}
		/>
	)
}

export default PaginationShowcase

import EditorCloseIcon from "@atlaskit/icon/glyph/editor/close"
import { Calendar, Popover, Select } from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region popover-example
function PopoverExample() {
	return (
		<>
			<Popover.Root
				appearance="primary"
				side="top"
				trigger="open popover"
				closer={<EditorCloseIcon label="Close Popover" />}
				className="w-96"
				contentClassName="w-96"
				usePortal
			>
				<Calendar mode="single" />
				<Select
					menuPlacement="top"
					menuIsOpen
					usePortal
					options={[
						{ label: "Option 1", value: "1" },
						{ label: "Option 2", value: "2" },
						{ label: "Option 3", value: "3" },
					]}
				/>
			</Popover.Root>
			<Popover.Root
				trigger={<div className="text-warning-bold">Other Trigger</div>}
				contentClassName="p-4"
				closer="Close"
				side="bottom"
				align="end"
			>
				Content
			</Popover.Root>
			<Popover.Root
				trigger="disabled"
				contentClassName="p-4"
				side="bottom"
				align="end"
				disabled
			>
				Content
			</Popover.Root>
		</>
	)
}
//#endregion popover-example

export default function PopoverShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Popover"
			description="Popup is a component that displays a floating window that appears on top of the app’s content, similar to a dropdown."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Popover",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <PopoverExample />,
					sourceCodeExampleId: "popover-example",
				},
			]}
		/>
	)
}

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { SectionMessage } from "@linked-planet/ui-kit-ts"
//import AKSectionMessage from "@atlaskit/section-message"

function SectionMessageShowcase(props: ShowcaseProps) {
	//#region section-message
	const example = (
		<div className="flex gap-3">
			<div className="flex flex-col gap-3">
				{/*<AKSectionMessage title="Section Message Title">
					Default Section Message
				</AKSectionMessage>
				<AKSectionMessage appearance="success">
					Success Section Message
				</AKSectionMessage>
				<AKSectionMessage appearance="warning">
					Warning Section Message
				</AKSectionMessage>
				<AKSectionMessage appearance="error">
					Error Section Message
				</AKSectionMessage>
				<AKSectionMessage appearance="information">
					Information Section Message
				</AKSectionMessage>
				<AKSectionMessage appearance="discovery">
					Discovery Section Message
				</AKSectionMessage>*/}
			</div>
			<div className="flex flex-col gap-3">
				<SectionMessage
					title="Section Message Title"
					actions={[
						{
							content: "Action",
						},
						{
							content: "Action2",
						},
					]}
				>
					Default Section Message
				</SectionMessage>
				<SectionMessage appearance="success">
					Success Section Message
				</SectionMessage>
				<SectionMessage appearance="warning">
					Warning Section Message
				</SectionMessage>
				<SectionMessage appearance="error">
					Error Section Message
				</SectionMessage>
				<SectionMessage appearance="information">
					Information Section Message
				</SectionMessage>
				<SectionMessage appearance="discovery">
					Discovery Section Message
				</SectionMessage>
			</div>
		</div>
	)
	//#endregion section-message

	return (
		<ShowcaseWrapperItem
			name="Section Messsage"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "/single?component=SectionMessage",
				},
			]}
			description="Drop in replacement for the @atlaskit/section-message component. Practically the same as the Flag."
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "section-message",
				},
			]}
		/>
	)
}

export default SectionMessageShowcase

//import { default as AKSelect } from "@atlaskit/select"
import {
	Button,
	ButtonGroup,
	Label,
	Select,
	type SelectComponentProps,
	type OptionGroupType,
	selectComponents,
} from "@linked-planet/ui-kit-ts"
import { useMemo, useState } from "react"
import { useForm } from "react-hook-form"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region select2form-uncontrolled

type FormData = {
	singleValue: string | null // null because react-hook-form does not support undefined values (doesn't react on them)
	multiValues: string[] | null
	groupedMultiValues: string[] | null
}

function FormExample() {
	const availableOptions = [
		{ label: "First option", value: "first" },
		{ label: "Second option", value: "second" },
		{ label: "Third option", value: "third" },
		{ label: "Fourth option", value: "fourth" },
	]

	const availableGroupOptions: OptionGroupType<string>[] = [
		{
			label: "First group",
			options: [
				{ label: "First option", value: "first" },
				{ label: "Second option", value: "second" },
			],
		},
		{
			label: "Second group",
			options: [
				{ label: "Third option", value: "third" },
				{ label: "Fourth option", value: "fourth", isDisabled: true },
			],
		},
	]

	const { handleSubmit, control, reset, setValue } = useForm<FormData>({
		defaultValues: {
			singleValue: availableOptions[0].value,
			multiValues: [availableOptions[0].value, availableOptions[1].value],
			groupedMultiValues: [availableGroupOptions[0].options[0].value],
		},
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<Label>Single Uncontrolled</Label>
			<Select<FormData, string>
				control={control}
				name="singleValue"
				options={availableOptions}
				usePortal
				errorMessage="TEST"
				invalid
			/>
			<Label>Multi Uncontrolled</Label>
			<Select<FormData, string>
				control={control}
				isMulti
				name="multiValues"
				options={availableOptions}
				usePortal
			/>
			<Label>Grouped Multi</Label>
			{/* string is the value type, FormData the type of the form data for the control, true is the isMulti flag */}
			<Select<FormData, string, true>
				isMulti
				control={control}
				name="groupedMultiValues"
				options={availableGroupOptions}
				usePortal
			/>
			<ButtonGroup className="mt-2 w-full justify-end">
				<Button type="reset">Reset</Button>
				<Button type="submit" appearance="primary">
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion select2form-uncontrolled

//#region select2form-controlled
type FormDataControlled = {
	singleValue: string
	multiValues: string[]
}

function ControlledFormExample() {
	const availableOptions = [
		{ label: "First option", value: "first" },
		{ label: "Second option", value: "second" },
		{ label: "Third option", value: "third" },
		{ label: "Fourth option", value: "fourth" },
	]

	const { handleSubmit, control } = useForm<FormDataControlled>()

	const [selectedControlled, setSelectedControlled] = useState<
		{ label: string; value: string } | undefined | null
	>(availableOptions[1])

	const [selectedControlledMulti, setSelectedControlledMulti] = useState<
		readonly { label: string; value: string }[] | undefined | null
	>([availableOptions[1], availableOptions[2]])

	return (
		<>
			<form onSubmit={handleSubmit((data) => console.log(data))}>
				<Label htmlFor="controlled">Controlled Single</Label>
				<Select<FormDataControlled, string, false>
					id="controlled"
					control={control}
					name="singleValue"
					options={availableOptions}
					value={selectedControlled}
					onChange={(value) => setSelectedControlled(value)}
				/>

				<Label htmlFor="controlledmulti">Controlled Multi</Label>
				<Select<FormDataControlled, string, true>
					id="controlledmulti"
					isMulti
					control={control}
					name="multiValues"
					options={availableOptions}
					value={selectedControlledMulti}
					onChange={(value) => setSelectedControlledMulti(value)}
				/>

				<ButtonGroup className="mt-2 w-full justify-end">
					<Button type="submit" appearance="primary">
						Submit
					</Button>
				</ButtonGroup>
			</form>
		</>
	)
}
//#endregion select2form-controlled

//#region select-custom-component
type Book = {
	title: string
	author: string
	isbn: string
	language: string
}

const books: Book[] = [
	{
		title: "The Lord of the Rings",
		author: "J.R.R. Tolkien",
		isbn: "978-3-86680-192-9",
		language: "English",
	},
	{
		title: "Harry Potter",
		author: "J.K. Rowling",
		isbn: "978-3-86680-192-9",
		language: "English",
	},
	{
		title: "The Historical Development of the Heart from Its Formation in the Primitive Vertebrate to Its Most Recent Manifestation in Modern Homo Sapiens as Seen in the Context of the Evolutionary Process, Along with Reflections on Its Influence upon Social, Cultural, and Economic Development with Reference to the Views of Charles Darwin and Other Prominent Thinkers, and Including Detailed Examinations of the Physiological and Anatomical Aspects of the Organ, with Illustrations Drawn from Various Epochs and Regions of the World, as well as a Comprehensive Study of Heart Disease and Its Treatment from Ancient Times to the Present Day, Covering Both Eastern and Western Medical Practices, with a Special Section Devoted to the Role of Diet and Lifestyle in the Maintenance of Cardiovascular Health, Alongside a Discussion of the Spiritual and Symbolic Significance of the Heart in World Religions, and an Appendix on the Potential Future Developments in Heart Transplantation and Artificial Heart Research in the 21st Century",
		author: "Nigel Tomm",
		isbn: "123-4-56789-234-5",
		language: "English",
	},
	{
		title: "ABC",
		author: "Sir Augustus Maximilian Percival Thaddeus Leopold Ambrose Fitzwilliam Kensington-Rutherford de la Croix Montmorency Beaumont Windsor St. John Alistair Edward Victor Montgomery Hawthorne-Darcy Fitzgerald, Duke of Abernathy, Marquess of Silverwood, Earl of Whitehall, Viscount Longfellow, Baron Cresswell of Eversfield",
		isbn: "123-4-56789-234-5",
		language: "English",
	},
]

// https://react-select.com/components
function BookOption(props: SelectComponentProps.OptionProps<Book>) {
	const value = props.data.value
	return (
		<selectComponents.Option {...props}>
			<div className="py-2">
				<h3 className="font-bold">{value.title}</h3>
				<div
					className="grid pt-1"
					style={{
						gridTemplateColumns: "1fr 12rem auto",
					}}
				>
					<p className="truncate text-left">{value.author}</p>
					<p className="truncate text-center px-2">{value.isbn}</p>
					<p className="truncate text-right pl-2">{value.language}</p>
				</div>
			</div>
		</selectComponents.Option>
	)
}

function CustomComponentExample() {
	const [selectedBook, setSelectedBook] = useState<Book | null>(null)

	const options = useMemo(() => {
		return books.map((book) => ({
			label: book.title,
			value: book,
		}))
	}, [])

	const value =
		options?.find((option) => option.value === selectedBook) ?? null

	return (
		<Select<Book, false>
			options={options}
			value={value}
			onChange={(opt) => {
				setSelectedBook(opt?.value ?? null)
			}}
			components={{
				Option: BookOption,
			}}
		/>
	)
}

//#endregion

function SelectShowcase(props: ShowcaseProps) {
	//#region select
	const example1 = (
		<div className="flex flex-col gap-4">
			{/*<AKSelect
				inputId="select-1"
				options={[
					{ label: "First option", value: "first" },
					{ label: "Second option", value: { test: "bla" } },
				]}
			/>*/}
			<Select
				isCreateable
				isClearable
				tabSelectsValue
				placeholder="Select an option"
				onChange={(value) => {
					console.log("on change", value)
				}}
				onCreateOption={(value) => {
					console.log("on create", value)
				}}
				options={[
					{ label: "First option", value: { test: "first" } },
					{ label: "Second option", value: { test: "second" } },
					{ label: "Third option", value: { test: "third" } },
				]}
				defaultValue={{
					label: "Second option",
					value: { test: "second" },
				}}
			/>

			<Select<{ test: string }, true>
				placeholder="Select an option"
				onChange={(value) => {
					console.log("value", value)
				}}
				isMulti
				options={[
					{ label: "First option", value: { test: "first" } },
					{ label: "Second option", value: { test: "second" } },
					{ label: "Third option", value: { test: "third" } },
				]}
				/** adding some custom classnames to the styling */
				classNames={{
					control: () => "bg-warning",
				}}
			/>

			<Select<{ test: string }, true>
				placeholder="Select an option"
				disabled
				isMulti
				options={[
					{ label: "First option", value: { test: "first" } },
					{ label: "Second option", value: { test: "second" } },
					{ label: "Third option", value: { test: "third" } },
				]}
			/>

			{/*<RadixSelect
				placeholder="Select an option"
				options={[
					{ label: "First option", value: "first" },
					{ label: "Second option", value: "second" },
				]}
				isDisabled={false}
				menuIsOpen={true}
			/>*/}
		</div>
	)
	//#endregion select
	//#region select2
	const example2 = (
		<div className="flex flex-col gap-4">
			{/*<AKSelect
				inputId="select-s"
				options={[
					{
						label: "First group",
						options: [
							{ label: "First option", value: "first" },
							{ label: "Second option", value: "second" },
						],
					},
					{
						label: "Second group",
						options: [
							{ label: "Third option", value: "third" },
							{ label: "Fourth option", value: "fourth" },
						],
					},
				]}
			/>*/}
			{/*<RadixSelect
				placeholder="Select a value"
				options={{
					"First Group": [{ label: "First option", value: "first" }],
					"Second Group": [
						{ label: "Second option", value: "second" },
					],
				}}
			/>*/}

			<Select
				placeholder="Select a value 2"
				invalid
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
			/>

			<Select
				placeholder="Select a value 3"
				isMulti
				inputId="input-id-test"
				instanceId="instance-id-test"
				id="id-test"
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
				dropdownLabel={(isOpen) => (isOpen ? "Close :(" : "Open :)")}
				clearValuesButtonLabel="Clear values!!!"
				removeValueButtonLabel="Remove value!!!"
			/>

			<Select
				placeholder="Select a value 3"
				isMulti
				disabled
				inputId="input-id-test"
				instanceId="instance-id-test"
				id="id-test"
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
				dropdownLabel={(isOpen) => (isOpen ? "Close :(" : "Open :)")}
				clearValuesButtonLabel="Clear values!!!"
				removeValueButtonLabel="Remove value!!!"
			/>
		</div>
	)
	//#endregion select2

	return (
		<ShowcaseWrapperItem
			name="Select"
			{...props}
			description={
				<>
					Select component with support for single and multi select,
					grouped options, custom styling and react-hook-form
					integration.
					<br />
					If used in a form and you want to clear the selected option
					use <b>NULL</b>, not undefined. React-hook-form does not
					support undefined values.
				</>
			}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Select",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "select",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "select2",
				},
				{
					title: "Form Uncontrolled",
					example: <FormExample />,
					sourceCodeExampleId: "select2form-uncontrolled",
				},
				{
					title: "Form Controlled",
					example: <ControlledFormExample />,
					sourceCodeExampleId: "select2form-controlled",
				},
				{
					title: "Custom Component",
					example: <CustomComponentExample />,
					sourceCodeExampleId: "select-custom-component",
				},
			]}
		/>
	)
}

export default SelectShowcase

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { IconSizeHelper, SideNavigation } from "@linked-planet/ui-kit-ts"
import {
	SideNavigation as AKSideNavigation,
	NavigationHeader as AKNavigationHeader,
	NavigationContent as AKNavigationContent,
	NavigationFooter as AKNavigationFooter,
	ButtonItem as AKButtonItem,
	GoBackItem as AKGoBackItem,
	Section as AKSection,
	LinkItem as AKLinkItem,
	SkeletonItem as AKSkeletonItem,
	Header as AKHeader,
	NestingItem as AKNestingItem,
	NestableNavigationContent as AKNestableNavigationContent,
} from "@atlaskit/side-navigation"

import ActivityIcon from "@atlaskit/icon/glyph/activity"

//#region side-nav-example
function SideNavExample() {
	return (
		<div className="flex gap-8">
			<div className="h-[350px]">
				<SideNavigation.Container
					className="max-w-sm"
					aria-label="Side navigation"
				>
					<SideNavigation.NavigationHeader>
						<span>test header</span>
					</SideNavigation.NavigationHeader>
					<SideNavigation.Content storeIdent="side-nav-store-showcase">
						<SideNavigation.NestableNavigationContent>
							<SideNavigation.NestingItem title="test nesting">
								<SideNavigation.ButtonItem>
									Test Nested Button
								</SideNavigation.ButtonItem>
								<SideNavigation.NestableNavigationContent>
									<SideNavigation.NestingItem title="inner nesting">
										<SideNavigation.ButtonItem>
											Inner Test Nested Button
										</SideNavigation.ButtonItem>
									</SideNavigation.NestingItem>
								</SideNavigation.NestableNavigationContent>
							</SideNavigation.NestingItem>
						</SideNavigation.NestableNavigationContent>

						<SideNavigation.ButtonItem
							description="This is a description which is also waaaaaaaaaaaaaaaaaaaaaay tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong"
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
						>
							Button Item 1 with a tooooooooooooooooooooooo long
							title
						</SideNavigation.ButtonItem>
						<SideNavigation.ButtonItem>
							Button Item 1
						</SideNavigation.ButtonItem>
						<SideNavigation.ButtonItem
							selected
							description="This is a description"
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
						>
							Selected Button Item
						</SideNavigation.ButtonItem>
						<SideNavigation.ButtonItem
							disabled
							description="This is a description"
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
						>
							Disabled Button Item
						</SideNavigation.ButtonItem>

						<SideNavigation.Section
							title="Section"
							hasSeparator
							isList
						>
							<SideNavigation.ButtonItem description="This is a description">
								Button Item 1
							</SideNavigation.ButtonItem>
							<SideNavigation.GoBackItem description="This is a description">
								Go Back Item
							</SideNavigation.GoBackItem>
							<SideNavigation.LinkItem
								href="https://www.google.com"
								description={"test link description"}
							>
								Link Item
							</SideNavigation.LinkItem>
						</SideNavigation.Section>
						<SideNavigation.SkeletonItem />
						<SideNavigation.SkeletonItem shimmering={false} />
						<SideNavigation.SkeletonItem hasIconBefore shimmering />
						<SideNavigation.SkeletonItem
							hasAvatarBefore
							shimmering
						/>
					</SideNavigation.Content>
					<SideNavigation.NavigationFooter>
						<div>test footer</div>
					</SideNavigation.NavigationFooter>
				</SideNavigation.Container>
			</div>

			<div className="h-[350px]">
				<AKSideNavigation label="">
					<AKNavigationHeader>
						<AKHeader>test header</AKHeader>
					</AKNavigationHeader>
					<AKNestableNavigationContent>
						<AKNestingItem id={"id"} title={"title"}>
							<AKButtonItem
								iconBefore={
									<IconSizeHelper>
										<ActivityIcon
											label="Activity"
											size="large"
										/>
									</IconSizeHelper>
								}
								description={"test description"}
							>
								test button
							</AKButtonItem>
							<AKNestableNavigationContent>
								<AKNestingItem
									id={"idinner"}
									title={"inner nesting"}
								>
									<AKButtonItem
										iconBefore={
											<IconSizeHelper>
												<ActivityIcon
													label="Activity"
													size="large"
												/>
											</IconSizeHelper>
										}
										description={"test description"}
									>
										inner nesting button
									</AKButtonItem>
								</AKNestingItem>
							</AKNestableNavigationContent>
						</AKNestingItem>
					</AKNestableNavigationContent>
					<AKNavigationContent>
						<AKButtonItem
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
							description={"test description"}
						>
							test button
						</AKButtonItem>
						<AKButtonItem>test button</AKButtonItem>
						<AKButtonItem
							isSelected
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
							description={"test description"}
						>
							selected button item
						</AKButtonItem>
						<AKButtonItem
							isDisabled
							iconBefore={
								<IconSizeHelper>
									<ActivityIcon
										label="Activity"
										size="large"
									/>
								</IconSizeHelper>
							}
							description={"test description"}
						>
							disabled button item
						</AKButtonItem>
						<AKSection title="Section" hasSeparator isList>
							<AKButtonItem description="This is a description">
								Button Item 1
							</AKButtonItem>
							<AKGoBackItem description="test description">
								Go Back
							</AKGoBackItem>
							<AKLinkItem
								href="https://www.google.com"
								description={"test link description"}
							>
								Link Item
							</AKLinkItem>
						</AKSection>
						<AKSkeletonItem />
						<AKSkeletonItem isShimmering />
						<AKSkeletonItem hasIcon />
						<AKSkeletonItem hasAvatar />
					</AKNavigationContent>
					<AKNavigationFooter>
						<div>test footer</div>
					</AKNavigationFooter>
				</AKSideNavigation>
			</div>
		</div>
	)
}
//#endregion side-nav-example

//#region side-nav-example-nesting
function NestingSideNavExample() {
	return (
		<div className="h-[350px]">
			<SideNavigation.Container
				className="max-w-sm"
				aria-label="Side navigation"
			>
				<SideNavigation.Content>
					<SideNavigation.NestableNavigationContent>
						<SideNavigation.NestingItem title="outer">
							<SideNavigation.NestingItem title="inner">
								<SideNavigation.Section title="Section">
									<SideNavigation.SkeletonItem />
									<SideNavigation.ButtonItem>
										Inner Button
									</SideNavigation.ButtonItem>
								</SideNavigation.Section>
								<SideNavigation.NestingItem title="inner2">
									<SideNavigation.ButtonItem>
										Inner Nested Button
									</SideNavigation.ButtonItem>
								</SideNavigation.NestingItem>
							</SideNavigation.NestingItem>
						</SideNavigation.NestingItem>
					</SideNavigation.NestableNavigationContent>
					<SideNavigation.Section title="Section">
						<SideNavigation.ButtonItem>
							Outer Button
						</SideNavigation.ButtonItem>
					</SideNavigation.Section>
				</SideNavigation.Content>
			</SideNavigation.Container>
		</div>
	)
}
//#endregion side-nav-example-nesting

function SideNavigationShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Side Navigation"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Side%20Navigation",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <SideNavExample />,
					sourceCodeExampleId: "side-nav-example",
				},
				{
					title: "Nesting in Nesting",
					example: <NestingSideNavExample />,
					sourceCodeExampleId: "side-nav-example-nesting",
				},
			]}
		/>
	)
}

export default SideNavigationShowcase

import type React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { AppLayout } from "@linked-planet/ui-kit-ts"
export function SidebarShowcase(props: ShowcaseProps) {
	//#region sidebar
	const example = (
		<div className="h-[300px]">
			<AppLayout.LeftSidebar
				widthVar={"--showcaseSidebarWidth"}
				flyoutVar={"--showcaseSidebarFlyoutWidth"}
				localStorageWidthKey={"showcaseLeftSidebarWidth"}
				localStorageCollapsedKey={"showcaseLeftSidebarCollapsed"}
			>
				<div>Sidebar Entry</div>
			</AppLayout.LeftSidebar>
		</div>
	)
	//#endregion sidebar

	return (
		<ShowcaseWrapperItem
			name="Sidebar"
			description="A sidebar component as replacement for the sidebar of the page layout. WIP"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Sidebar",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "sidbear" },
			]}
		/>
	)
}

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TableTree, {
	Cell,
	Header,
	Headers,
	Row,
	Rows,
} from "@atlaskit/table-tree"

function TableTreeShowcase(props: ShowcaseProps) {
	//#region tabletree
	interface BookData {
		title: string
		description: string
	}

	interface TableTreeItem {
		id: string
		title: string
		description: string
		children: TableTreeItem[]
	}

	const bookDataTree = [
		{
			id: "1",
			content: { title: "It is lonely at the top.", description: "1" },
			hasChildren: true,
			children: [
				{
					id: "1.1",
					content: {
						title: "Look at me! I am nested.",
						description: "1.1",
					},
					hasChildren: true,
					children: [
						{
							id: "1.1.1",
							content: {
								title: "I am deeply nested.",
								description: "1.1.1",
							},
							hasChildren: false,
						},
					],
				},
			],
		},
		/*{
			id: "2",
			content: { title: "Typescript is fun", description: "2" },
			hasChildren: false,
		},*/
	]

	const bookDataTree2: TableTreeItem[] = [
		{
			id: "1",
			title: "It is lonely at the top.",
			description: "1",
			children: [
				{
					id: "1.1",
					title: "Look at me! I am nested.",
					description: "1.1",
					children: [
						{
							id: "1.1.1",
							title: "I am deeply nested.",
							description: "1.1.1",
							children: [],
						},
					],
				},
			],
		},
		{
			id: "2",
			title: "Typescript is fun",
			description: "2",
			children: [],
		},
	]
	const example1 = (
		<TableTree
			headers={["Title", "Numbering"]}
			columns={[
				(bookData: BookData) => <span>{bookData.title}</span>,
				(bookData: BookData) => <span>{bookData.description}</span>,
			]}
			columnWidths={[300, 100]}
			items={bookDataTree}
		/>
	)
	//#endregion tabletree

	//#region tabletree2
	const example2 = (
		<TableTree>
			<Headers>
				<Header
					width="400px"
					onClick={() => window.alert("OnClick Chapter Title Header")}
				>
					Chapter Title (Click me)
				</Header>
				<Header width="100px">Numbering</Header>
			</Headers>
			<Rows
				items={bookDataTree2}
				render={(data: TableTreeItem) => (
					<Row
						itemId={data.description}
						items={data.children}
						hasChildren={
							data?.children !== undefined &&
							data.children.length > 0
						}
						isDefaultExpanded={false}
					>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert(`onClick: ${data.title}`)
								}
								onKeyUp={(e) => {
									if (e.key === "Enter") {
										window.alert(`onKeyUp: ${data.title}`)
									}
								}}
							>
								{data.title}
							</div>
						</Cell>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert(`onClick: ${data.description}`)
								}
								onKeyUp={(e) => {
									if (e.key === "Enter") {
										window.alert(
											`onKeyUp: ${data.description}`,
										)
									}
								}}
							>
								{data.description}
							</div>
						</Cell>
					</Row>
				)}
			/>
		</TableTree>
	)
	//#endregion tabletree2

	return (
		<ShowcaseWrapperItem
			name="TableTree"
			{...props}
			packages={[
				{
					name: "@atlaskit/table-tree",
					url: "https://atlassian.design/components/table-tree",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "tabletree",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "tabletree2",
				},
			]}
		/>
	)
}

export default TableTreeShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
/*import AKTabs, {
	Tab as AKTab,
	TabList as AKTabList,
	TabPanel as AKTabPanel,
} from "@atlaskit/tabs"*/

import { Tabs, Button } from "@linked-planet/ui-kit-ts"

function AutomaticTabsValue() {
	//#region tabs_automatic_value
	return (
		<Tabs.Container>
			<Tabs.TabList>
				<Tabs.Tab>Tab 1</Tabs.Tab>
				<Tabs.Tab>Tab 2</Tabs.Tab>
				<Tabs.Tab disabled>Tab 3</Tabs.Tab>
			</Tabs.TabList>
			<Tabs.TabPanel>
				<span>First Content</span>
			</Tabs.TabPanel>
			<Tabs.TabPanel>
				<span>Second Content</span>
			</Tabs.TabPanel>
			<Tabs.TabPanel>
				<span>Third Content</span>
			</Tabs.TabPanel>
		</Tabs.Container>
	)
	//#endregion tabs_automatic_value
}

function TabsSides() {
	//#region tabs_side
	return (
		<div className="flex flex-wrap gap-6">
			<Tabs.Container>
				<Tabs.TabList side="top">
					<Tabs.Tab>Tab 1</Tabs.Tab>
					<Tabs.Tab>Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel>
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel>
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>

			<Tabs.Container>
				<Tabs.TabList side="left">
					<Tabs.Tab>Tab 1</Tabs.Tab>
					<Tabs.Tab>Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel>
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel>
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>

			<Tabs.Container>
				<Tabs.TabList side="right">
					<Tabs.Tab>Tab 1</Tabs.Tab>
					<Tabs.Tab>Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel>
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel>
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>

			<Tabs.Container>
				<Tabs.TabList side="bottom">
					<Tabs.Tab>Tab 1</Tabs.Tab>
					<Tabs.Tab>Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel>
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel>
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>
		</div>
	)
	//#endregion tabs_side
}

function ExampleLabels() {
	/*const akExample = (
		<div>
			{
				<AKTabs id="tab-example" defaultSelected={1}>
					<AKTabList>
						<AKTab>
							<div>AK Tab 1</div>
						</AKTab>
						<AKTab>AK Tab 2</AKTab>
					</AKTabList>
					<AKTabPanel>
						<span>First AK Content</span>
					</AKTabPanel>
					<AKTabPanel>
						<span>Second AK Content</span>
					</AKTabPanel>
				</AKTabs>
			}
		</div>
	)*/

	//#region tabs_labels
	const lpExample = (
		<div>
			<Tabs.Container defaultSelected="tab2">
				<Tabs.TabList>
					<Tabs.Tab label="Tab 1" />
					<Tabs.Tab label="tab2">Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel label="Tab 1">
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel label="tab2">
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>
		</div>
	)
	//#endregion tabs_labels

	return (
		<div className="bg-surface flex w-full flex-col gap-4">
			{/*akExample*/}
			<hr />
			{lpExample}
		</div>
	)
}

function ExampleControlled() {
	//#region tabscontrolled
	const [selected, setSelected] = useState(0)
	const lpExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			<Tabs.Container
				selected={selected}
				onChange={(t: string) => setSelected(Number.parseInt(t))}
			>
				<Tabs.TabList>
					<Tabs.Tab label={0}>
						<div>Tab 1</div>
					</Tabs.Tab>
					<Tabs.Tab label={1}>Tab 2</Tabs.Tab>
				</Tabs.TabList>
				<Tabs.TabPanel label={0}>
					<span>First Content</span>
				</Tabs.TabPanel>
				<Tabs.TabPanel label={1}>
					<span>Second Content</span>
				</Tabs.TabPanel>
			</Tabs.Container>
		</div>
	)
	//#endregion tabscontrolled

	const akExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			{/*<AKTabs
				id="tab-example-controlled"
				selected={selected}
				onChange={setSelected}
			>
				<AKTabList>
					<AKTab>
						<div>Tab 1</div>
					</AKTab>
					<AKTab>Tab 2</AKTab>
				</AKTabList>
				<AKTabPanel>
					<span>First Content</span>
				</AKTabPanel>
				<AKTabPanel>
					<span>Second Content</span>
				</AKTabPanel>
	</AKTabs>*/}
		</div>
	)

	return (
		<>
			<Button
				onClick={() => {
					setSelected(1)
				}}
			>
				Select second tab
			</Button>
			{akExample}
			{lpExample}
		</>
	)
}

function TabsShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Tabs"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Tabs",
				},
			]}
			description={
				<p>
					If labels are used, they must be consistent between the Tab
					component and the corresponding TabPanel component.
				</p>
			}
			examples={[
				{
					title: "Example",
					example: <AutomaticTabsValue />,
					sourceCodeExampleId: "tabs_automatic_value",
				},
				{
					title: "Example Labels",
					example: <ExampleLabels />,
					sourceCodeExampleId: "tabs_labels",
				},
				{
					title: "Example Controlled",
					example: <ExampleControlled />,
					sourceCodeExampleId: "tabscontrolled",
				},
				{
					title: "Vertical",
					example: <TabsSides />,
					sourceCodeExampleId: "tabs_side",
				},
			]}
		/>
	)
}

export default TabsShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { SimpleTag as AKSimpleTag, default as AKTag } from "@atlaskit/tag"
import AKTagGroup from "@atlaskit/tag-group"
import { TagGroup, Tag } from "@linked-planet/ui-kit-ts"

function TagShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			<AKTagGroup alignment="end">
				<AKTag
					onBeforeRemoveAction={() => {
						console.log("on before remove")
						return true
					}}
					onAfterRemoveAction={(str) =>
						console.log("on after remove", str)
					}
					text="Removable Tag"
				/>
				<AKTag isRemovable={false} text="Not Removable Tag" />
				<AKSimpleTag text="Simple Tag" appearance="default" />
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="rounded"
				/>
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="default"
				/>
			</AKTagGroup>
			<AKTagGroup>
				<AKSimpleTag text="Simple Tag" color="blue" />
			</AKTagGroup>
		</>
	)

	//#region tags
	const lpExample = (
		<div className="flex w-full flex-wrap items-center">
			<TagGroup>
				<Tag
					onBeforeRemoveAction={() => {
						console.log("on before remove")
						return false
					}}
					onAfterRemoveAction={(str) =>
						console.log("on after remove", str)
					}
					removable
				>
					Removable Tag
				</Tag>
				<Tag removable={false}>Non-removal Tag</Tag>
				<Tag>Simple Tag</Tag>
				<Tag looks="rounded">Colored Simple Tag</Tag>
				<Tag>Colored Simple Tag</Tag>
			</TagGroup>
			<TagGroup>
				<Tag appearance="danger">Danger Simple Tag</Tag>
				<Tag appearance="warning">Warning Simple Tag</Tag>
				<Tag appearance="brand">Brand Simple Tag</Tag>
				<Tag appearance="success">Success Simple Tag</Tag>
				<Tag appearance="discovery" truncate>
					Discovery Simple Tag
				</Tag>
				<Tag appearance="information" truncate>
					Information Simple Tag
				</Tag>
				<Tag appearance="discovery" truncate>
					Discovery Simple Tag
				</Tag>
			</TagGroup>
		</div>
	)
	//#endregion tags

	const akColorTags = (
		<AKTagGroup>
			<AKTag color="blue" text="Blue" />
			<AKTag color="blueLight" text="blueLight" />
			<AKSimpleTag color="green" text="green" />
			<AKSimpleTag color="greenLight" text="greenLight" />
			<AKSimpleTag color="grey" text="grey" />
			<AKSimpleTag color="greyLight" text="greyLight" />
			<AKSimpleTag color="purple" text="purple" />
			<AKSimpleTag color="purpleLight" text="purpleLight" />
			<AKSimpleTag color="red" text="red" />
			<AKSimpleTag color="redLight" text="redLight" />
			<AKSimpleTag color="teal" text="teal" />
			<AKSimpleTag color="tealLight" text="tealLight" />
			<AKSimpleTag color="yellow" text="yellow" />
			<AKSimpleTag color="yellowLight" text="yellowLight" />
			<AKSimpleTag color="lime" text="lime" />
			<AKSimpleTag color="limeLight" text="limeLight" />
			<AKSimpleTag color="magenta" text="magenta" />
			<AKSimpleTag color="magentaLight" text="magentaLight" />
			<AKSimpleTag color="orange" text="orange" />
			<AKSimpleTag color="orangeLight" text="orangeLight" />
			<AKSimpleTag color="standard" text="standard" />
		</AKTagGroup>
	)

	//#region tagscolors
	const colorTags = (
		<div className="flex w-full flex-col gap-2 overflow-hidden">
			<TagGroup wrap>
				<Tag appearance="blue">blue</Tag>
				<Tag appearance="green">green</Tag>
				<Tag appearance="gray">gray</Tag>
				<Tag appearance="purple">purple</Tag>
				<Tag appearance="red">red</Tag>
				<Tag appearance="teal">teal</Tag>
				<Tag appearance="yellow">yellow</Tag>
				<Tag appearance="lime">lime</Tag>
				<Tag appearance="pink">pink</Tag>
				<Tag appearance="orange">orange</Tag>
				<Tag appearance="indigo">indigo</Tag>
				<Tag appearance="cyan">cyan</Tag>
				<Tag appearance="violet">violet</Tag>
				<Tag appearance="amber">amber</Tag>
				<Tag appearance="emerald">emerald</Tag>
				<Tag appearance="fuchsia">fuchsia</Tag>
				<Tag appearance="sky">sky</Tag>
			</TagGroup>
			<TagGroup wrap>
				<Tag appearance="blueLight">blueLight</Tag>
				<Tag appearance="greenLight">greenLight</Tag>
				<Tag appearance="grayLight">greyLight</Tag>
				<Tag appearance="purpleLight">purpleLight</Tag>
				<Tag appearance="redLight">redLight</Tag>
				<Tag appearance="tealLight">tealLight</Tag>
				<Tag appearance="yellowLight">yellowLight</Tag>
				<Tag appearance="limeLight">limeLight</Tag>
				<Tag appearance="pinkLight">pinkLight</Tag>
				<Tag appearance="orangeLight">orangeLight</Tag>
				<Tag appearance="indigoLight">indigoLight</Tag>
				<Tag appearance="cyanLight">cyanLight</Tag>
				<Tag appearance="violetLight">violetLight</Tag>
				<Tag appearance="amberLight">amberLight</Tag>
				<Tag appearance="emeraldLight">emeraldLight</Tag>
				<Tag appearance="fuchsiaLight">fuchsiaLight</Tag>
				<Tag appearance="skyLight">skyLight</Tag>
			</TagGroup>
			<TagGroup wrap>
				<Tag appearance="blueBold">blueBold</Tag>
				<Tag appearance="greenBold">greenBold</Tag>
				<Tag appearance="grayBold">greyBold</Tag>
				<Tag appearance="purpleBold">purpleBold</Tag>
				<Tag appearance="redBold">redBold</Tag>
				<Tag appearance="tealBold">tealBold</Tag>
				<Tag appearance="yellowBold">yellowBold</Tag>
				<Tag appearance="limeBold">limeBold</Tag>
				<Tag appearance="pinkBold">pinkBold</Tag>
				<Tag appearance="orangeBold">orangeBold</Tag>
				<Tag appearance="indigoBold">indigoBold</Tag>
				<Tag appearance="cyanBold">cyanBold</Tag>
				<Tag appearance="violetBold">violetBold</Tag>
				<Tag appearance="amberBold">amberBold</Tag>
				<Tag appearance="emeraldBold">emeraldBold</Tag>
				<Tag appearance="fuchsiaBold">fuchsiaBold</Tag>
				<Tag appearance="skyBold">skyBold</Tag>
			</TagGroup>
			<TagGroup wrap>
				<Tag appearance="default">default</Tag>
				<Tag appearance="danger">danger</Tag>
				<Tag appearance="warning">warning</Tag>
				<Tag appearance="information">information</Tag>
				<Tag appearance="success">success</Tag>
				<Tag appearance="discovery">discovery</Tag>
				<Tag appearance="brand">brand</Tag>
			</TagGroup>
		</div>
	)
	//#endregion

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	const colors = (
		<div>
			<div>{akColorTags}</div>
			<hr className="border-border my-4" />
			<div>{colorTags}</div>
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Tag & Tag-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Tag",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tags" },
				{
					title: "Colors",
					example: colors,
					sourceCodeExampleId: "tagscolors",
				},
			]}
		/>
	)
}

export default TagShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Button, ButtonGroup, TextArea } from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

//#region textarea-form-example
function FormExample() {
	const {
		register,
		handleSubmit,
		reset,
		formState: { errors, isValid },
	} = useForm<{ testTextArea: string }>({
		defaultValues: {
			testTextArea: "default value",
		},
		mode: "onChange",
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<TextArea
				placeholder="Placeholder"
				aria-invalid={!!errors.testTextArea}
				errorMessage={
					errors.testTextArea?.message === "required"
						? "Required"
						: "Min length 3"
				}
				{...register("testTextArea", {
					required: true,
					minLength: 3,
				})}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion textarea-form-example

function TextAreaShowcase(props: ShowcaseProps) {
	//#region textarea
	const example = (
		<div className="flex flex-col gap-2">
			<TextArea
				placeholder="This is a placeholder."
				helpMessage="This is a help message."
			/>
			<TextArea
				placeholder="This is a placeholder."
				helpMessage="This is a help message."
				errorMessage="This is an error message."
				aria-invalid={true}
				minLength={5}
			/>
		</div>
	)
	//#endregion textarea

	return (
		<ShowcaseWrapperItem
			name="Text area"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#TextArea",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "textarea" },
				{
					title: "Form Example",
					example: <FormExample />,
					sourceCodeExampleId: "textarea-form-example",
				},
			]}
		/>
	)
}

export default TextAreaShowcase

import React from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

function TextFieldShowcase(props: ShowcaseProps) {
	//#region textfield
	//#endregion textfield

	return (
		<ShowcaseWrapperItem
			name="Text field"
			description="Please use the Input component instead."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Input",
				},
			]}
			examples={[
				{
					title: "Input Link",
					example: (
						<a href="single?component=Input">Open Input Page</a>
					),
					sourceCodeExampleId: "textfield",
				},
			]}
		/>
	)
}

export default TextFieldShowcase

import { useCallback, useMemo } from "react"
import { useState } from "react"
import dayjs, { type Dayjs } from "dayjs"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { Button, TimeTable, timeTableUtils } from "@linked-planet/ui-kit-ts"

import CreateNewTimeTableItemDialog from "@linked-planet/ui-kit-ts/components/timetable/CreateNewItem"
import ChevronLeftIcon from "@atlaskit/icon/glyph/chevron-left"
import ChevronRightIcon from "@atlaskit/icon/glyph/chevron-right"
import ChevronDownIcon from "@atlaskit/icon/glyph/chevron-down"

import { useTranslation } from "@linked-planet/ui-kit-ts/localization/LocaleContext"
import type { TranslatedTimeTableMessages } from "@linked-planet/ui-kit-ts/components/timetable/TimeTableMessageContext"
import type { TimeTableTypes } from "@linked-planet/ui-kit-ts/components/timetable"

//import "@linked-planet/ui-kit-ts/dist/style.css" //-> this is not necessary in this setup, but in the real library usage

const debounceTimeout = 500
let debounceTimeoutCurrent: number | undefined = undefined
function debounceHelper(callback: () => void) {
	if (debounceTimeoutCurrent) {
		clearTimeout(debounceTimeoutCurrent)
	}
	debounceTimeoutCurrent = window.setTimeout(() => {
		callback()
	}, debounceTimeout)
}

type ExampleGroup = TimeTableTypes.TimeTableGroup

type ExampleItem = TimeTableTypes.TimeSlotBooking

const exampleEntries: TimeTableTypes.TimeTableEntry<
	ExampleGroup,
	ExampleItem
>[] = [
	{
		group: {
			id: "group-empty",
			title: "Empty Group",
		},
		items: [],
	},
	{
		group: {
			id: "group-1",
			title: "Group 1",
			subtitle: "Group 1 description",
		},
		items: [
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 1-3",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				title: "Item 1-3-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(1, "day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				title: "Item 1-4",
			},
			{
				// expected to be on group row 1
				startDate: dayjs().startOf("day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-5",
			},
			{
				// expected to be on group row 2
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				title: "Item 1-6",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2-2",
			},
		],
	},
	{
		group: {
			id: "group-2",
			title: "Group 2",
			subtitle: "Group 2 description",
		},
		items: [
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(20, "minutes"),
				title: "Item 2-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(21, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(40, "minutes"),
				title: "Item 2-2",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(41, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(50, "minutes"),
				title: "Item 2-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(51, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(50, "minutes"),
				title: "Item 2-3-1",
			},
			{
				startDate: dayjs().startOf("day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(10, "hours"),
				title: "Item 2-4",
			},
		],
	},
	{
		group: {
			id: "group-3",
			title: "Group 3",
			subtitle: "Group 3 description",
		},
		items: [
			{
				// this entry is totally before the available slots of the day
				startDate: dayjs().startOf("day").add(5, "hours"),
				endDate: dayjs().startOf("day").add(6, "hours"),
				title: "Item 3-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(2, "days").add(9, "hours"),
				title: "Item 3-2",
			},
			{
				// this entry is totally after the available slots of the day
				startDate: dayjs().startOf("day").add(17, "hours"),
				endDate: dayjs().startOf("day").add(20, "hours"),
				title: "Item 3-3",
			},
		],
	},
	{
		group: {
			id: "group-4",
			title: "Group 4",
			subtitle: "Group 4 description",
		},
		items: [
			{
				// this case ends after the end of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(16, "hours"),
				title: "Item 4-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(1, "day")
					.add(13.75, "hours"),
				title: "Item 4-2",
			},
			{
				// this case starts before the start of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(7.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "days")
					.add(13.75, "hours"),
				title: "Item 4-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(10.2, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "day")
					.add(13.75, "hours"),
				title: "Item 4-4",
			},
			{
				startDate: dayjs().startOf("day").add(-1, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 4-4-5",
			},
		],
	},
	{
		group: {
			id: "group-5",
			title: "Group 5",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(-2, "day"),
				endDate: dayjs().startOf("day").add(7, "days"),
				title: "Item 5-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(12, "hours"),
				title: "Item 5-2",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"), // 00:00-00:00
				endDate: dayjs().startOf("day").add(1, "day"),
				title: "Item 5-3",
			},
		],
	},
	{
		group: {
			id: "group-6",
			title: "Group 6 (Directly Connected)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs().startOf("day").add(12, "hours"),
				title: "Item 6-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 6-1-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"),
				endDate: dayjs().startOf("day").add(2, "day"),
				title: "Item 6-2-1",
			},
			{
				startDate: dayjs().startOf("day").add(2, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 6-2-2",
			},
		],
	},
	{
		group: {
			id: "group-7",
			title: "Group 7 (Full Day)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day"),
				endDate: dayjs().endOf("day"),
				title: "Item 7-1",
			},
		],
	},
]

function createTestItems(
	startDate: Dayjs,
	endDate: Dayjs,
	groupNumber: number,
) {
	const itemCount = Math.round(Math.random() * 10)
	const ret = []
	for (let i = 0; i < itemCount; i++) {
		const addDays = Math.round(
			Math.random() * endDate.diff(startDate, "days"),
		)
		const addStartMinutes = Math.round(Math.random() * 3 * 60)
		const addEndMinutes = Math.round(Math.random() * 6 * 60)
		const itemStartDate = startDate
			.add(addDays, "days")
			.add(addStartMinutes, "minutes")
		const itemEndDate = itemStartDate.add(addEndMinutes, "minutes")
		ret.push({
			startDate: itemStartDate,
			endDate: itemEndDate,
			title: `Random Item ${groupNumber}-${i}`,
		})
	}
	return ret
}

function createTestEntries(
	startDate: Dayjs,
	endDate: Dayjs,
	currentEntries: TimeTableTypes.TimeTableEntry<ExampleGroup, ExampleItem>[],
) {
	if (startDate.isSame(startDateInitial) && endDate.isSame(endDateInitial)) {
		return exampleEntries
	}

	const groupWithItems = currentEntries.map((group, g) => {
		const newGroup: TimeTableTypes.TimeTableEntry<
			ExampleGroup,
			ExampleItem
		> = {
			group: group.group,
			items: createTestItems(startDate, endDate, g),
		}
		return newGroup
	})

	return groupWithItems
}

function createMoreTestGroups(
	startDate: Dayjs,
	endDate: Dayjs,
	count: number,
	startCount: number,
) {
	const newGroups: TimeTableTypes.TimeTableEntry<
		ExampleGroup,
		ExampleItem
	>[] = []
	for (let i = 0; i < count; i++) {
		const groupNumber = startCount + i
		newGroups.push({
			group: {
				id: `group-${groupNumber}`,
				title: `Group ${groupNumber}`,
				subtitle: "random",
			},
			items: createTestItems(startDate, endDate, groupNumber),
		})
	}
	return newGroups
}

const startDateInitial = dayjs().startOf("day").add(-1, "day").add(8, "hours")
const endDateInitial = dayjs().startOf("day").add(5, "days").add(20, "hours")

function TestCustomHeaderRowTimeSlot<
	G extends TimeTableTypes.TimeTableGroup,
	I extends TimeTableTypes.TimeSlotBooking,
>({
	timeSlot,
	timeSlotMinutes,
	isLastOfDay,
	timeFrameOfDay,
	viewType,
	slotsArray,
	entries,
	tableCellRef,
}: TimeTableTypes.CustomHeaderRowTimeSlotProps<G, I>) {
	const groupItems = entries[1].items

	const groupItemsOfCell: I[] = []
	const startAndEndInSlow: {
		status: "in" | "before" | "after"
		startSlot: number
		endSlot: number
	}[] = []
	for (let i = 0; i < groupItems.length; i++) {
		const item = groupItems[i]
		const startAndEnd = timeTableUtils.getStartAndEndSlot(
			item,
			slotsArray,
			timeFrameOfDay,
			timeSlotMinutes,
			viewType,
		)
		if (slotsArray[startAndEnd.startSlot] === timeSlot) {
			groupItemsOfCell.push(item)
			startAndEndInSlow.push(startAndEnd)
		}
	}

	const leftAndWidths = groupItemsOfCell.map((it, i) => {
		const startAndEnd = startAndEndInSlow[i]
		if (startAndEnd.status === "before" || startAndEnd.status === "after") {
			return null
		}
		return timeTableUtils.getLeftAndWidth(
			it,
			startAndEnd.startSlot,
			startAndEnd.endSlot,
			slotsArray,
			timeFrameOfDay,
			viewType,
			timeSlotMinutes,
		)
	})

	const cellWidth = tableCellRef.current?.offsetWidth ?? 70

	const ret = leftAndWidths.map((it, i) =>
		it ? (
			<div
				key={groupItemsOfCell[i].title}
				className="absolute top-0 bottom-0 bg-discovery-bold whitespace-nowrap overflow-visible z-10 opacity-50"
				style={{
					left: `${it.left * cellWidth}px`,
					width: `${it.width * cellWidth}px`,
				}}
				title={groupItemsOfCell[i].title}
			>
				<div className="truncate">{groupItemsOfCell[i].title}</div>
			</div>
		) : null,
	)

	return <div className="bg-surface-pressed absolute inset-0">{ret}</div>
}

function CustomHeaderRowHeader<
	G extends TimeTableTypes.TimeTableGroup,
	I extends TimeTableTypes.TimeSlotBooking,
>({
	slotsArray,
	timeFrameOfDay,
	viewType,
	entries,
}: TimeTableTypes.CustomHeaderRowHeaderProps<G, I>) {
	return (
		<div className="bg-surface-pressed">
			{entries[1].group.title} has {entries.length} entries
		</div>
	)
}

function Example() {
	//#region timetable

	const [timeSteps, setTimeSteps] = useState(60)
	const [timeStepsInputValue, setTimeStepsInputValue] = useState(timeSteps)
	const [groupHeaderColumnWidth, setGroupHeaderColumnWidth] = useState(150)
	const [columnWidth, setColumnWidth] = useState(70)
	const [rowHeight, setRowHeight] = useState(40)
	const [disabledWeekendInteractions, setDisabledWeekendInteractions] =
		useState(true)
	const [showTimeSlotHeader, setShowTimeSlotHeader] = useState(true)
	const [hideOutOfDayRangeMarkers, setHideOutOfDayRangeMarkers] =
		useState(false)
	const [locale, setLocale] = useState<"en" | "de">("en")

	const [timeFrame, setTimeFrame] = useState({
		startDate: startDateInitial,
		endDate: endDateInitial,
	})

	const [selectedTimeSlotItem, setSelectedTimeSlotItem] = useState<
		ExampleItem | undefined
	>()

	const [entries, setEntries] = useState(exampleEntries)

	const onTimeSlotItemClickCB = useCallback(
		(group: ExampleGroup, item: ExampleItem) => {
			setSelectedTimeSlotItem((prev) => {
				if (prev === item) {
					return undefined
				}
				return item
			})
		},
		[],
	)

	//#region time frame and groups pagination
	const requestNextTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const nextStartDate = timeFrame.startDate.add(dayDiff, "days")
		const nextEndDate = timeFrame.endDate.add(dayDiff, "days")
		setTimeFrame({
			startDate: nextStartDate,
			endDate: nextEndDate,
		})
		const newEntries = createTestEntries(
			nextStartDate,
			nextEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestPrevTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const prevStartDate = timeFrame.startDate.add(-dayDiff, "days")
		const prevEndDate = timeFrame.endDate.add(-dayDiff, "days")
		setTimeFrame({
			startDate: prevStartDate,
			endDate: prevEndDate,
		})
		const newEntries = createTestEntries(
			prevStartDate,
			prevEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestMoreEntriesCB = () => {
		const missing = entries.length + 10 - exampleEntries.length
		const missingGroups = createMoreTestGroups(
			timeFrame.startDate,
			timeFrame.endDate,
			missing,
			exampleEntries.length,
		)
		setEntries([...exampleEntries, ...missingGroups])
	}
	//#endregion

	const [showCreateNewItemModal, setShowCreateNewItemModal] = useState(false)
	const [selectedTimeRange, setSelectedTimeRange] = useState<{
		startDate: Dayjs
		endDate: Dayjs
		group: TimeTableTypes.TimeTableGroup
	} | null>(null)
	const [disableTimeRangeSelection, setDisableTimeRangeSelection] =
		useState(false)

	const onCreateNewItemConfirmCB = useCallback(
		(
			group: TimeTableTypes.TimeTableGroup,
			item: TimeTableTypes.TimeSlotBooking,
		) => {
			setShowCreateNewItemModal(false)
			setEntries((prev) => {
				const groupIndex = prev.findIndex((e) => e.group === group)
				if (groupIndex === -1) {
					console.error("group not found", group)
					return prev
				}
				const newEntries = [...prev]
				const newGroup = { ...newEntries[groupIndex] }
				const newGroupItems = [...newGroup.items]
				newGroupItems.push(item)
				newGroup.items = newGroupItems
				newEntries[groupIndex] = newGroup
				return newEntries
			})
			setSelectedTimeRange(null)
		},
		[],
	)

	const [viewType, setViewType] =
		useState<TimeTableTypes.TimeTableViewType>("hours")

	const translation = useTranslation() as TranslatedTimeTableMessages
	const nowOverwrite = undefined //startDate.add( 1, "day" ).add( 1, "hour" ).add( 37, "minutes" );

	const isCellDisabled = useCallback(
		(group: TimeTableTypes.TimeTableGroup, start: Dayjs) => {
			if (group.title === "Group 2") {
				return start.isBefore(dayjs().startOf("day"))
			}
			return false
		},
		[],
	)

	return (
		<>
			<div className="flex gap-8">
				{/* time table setup values */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label className="mr-4" htmlFor="startdate">
						Start:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.startDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: dayjs(e.target.value),
								endDate: timeFrame.endDate,
							})
						}}
					/>
					<label className="mr-4" htmlFor="enddate">
						End:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.endDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: timeFrame.startDate,
								endDate: dayjs(e.target.value),
							})
						}}
					/>
					<label className="mr-4" htmlFor="timesteps">
						Time Steps [min]:
					</label>
					<input
						type="number"
						name="timesteps"
						value={timeStepsInputValue}
						step={10}
						min={10}
						max={1200}
						onChange={(e) => {
							const val = Number.parseInt(e.target.value)
							setTimeStepsInputValue(val)
							debounceHelper(() => setTimeSteps(val))
						}}
						className="mr-1 w-16 text-center"
					/>
				</div>
				{/* time table layout */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label className="mr-4" htmlFor="firstcolwidth">
						Group Header Width [px]:
					</label>
					<input
						type="number"
						name="firstcolwidth"
						value={groupHeaderColumnWidth}
						step={10}
						min={10}
						max={300}
						onChange={(e) =>
							debounceHelper(() =>
								setGroupHeaderColumnWidth(
									Number.parseInt(e.target.value),
								),
							)
						}
						className="mr-1 w-16 text-center"
					/>
					<label className="mr-4" htmlFor="colwidth">
						Column Width [px]:
					</label>
					<input
						type="number"
						name="colwidth"
						defaultValue={columnWidth}
						step={5}
						min={10}
						max={1000}
						onChange={(e) =>
							debounceHelper(() => {
								setColumnWidth(Number.parseInt(e.target.value))
							})
						}
						className="mr-1 w-16 text-center"
					/>
					<label className="mr-4" htmlFor="rowheight">
						Row Height [px]:
					</label>
					<input
						type="number"
						name="rowheight"
						defaultValue={rowHeight}
						step={2}
						min={10}
						max={100}
						onChange={(e) =>
							debounceHelper(() =>
								setRowHeight(Number.parseInt(e.target.value)),
							)
						}
						className="mr-1 w-16 text-center"
					/>
				</div>
				{/* time table settings */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label htmlFor="diableweekends" className="mr-4">
						Disable Weekend Interactions:
					</label>
					<input
						type="checkbox"
						name="disableweekends"
						checked={disabledWeekendInteractions}
						onChange={(e) =>
							setDisabledWeekendInteractions(e.target.checked)
						}
						className="mr-1 text-center"
					/>
					<label htmlFor="showtimeslotheader" className="mr-4">
						Show Time Slot Header:
					</label>
					<input
						type="checkbox"
						name="showtimeslotheader"
						checked={showTimeSlotHeader}
						onChange={(e) => {
							setShowTimeSlotHeader(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label htmlFor="hideoutofdayrange" className="mr-4">
						Hide Out Of Day Range Markers:
					</label>
					<input
						type="checkbox"
						name="hideoutofdayrange"
						checked={hideOutOfDayRangeMarkers}
						onChange={(e) => {
							setHideOutOfDayRangeMarkers(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label
						htmlFor="disabletimerangeselection"
						style={{
							marginRight: "1rem",
						}}
					>
						Disable Time Range Selection
					</label>
					<input
						type="checkbox"
						name="disabletimerangeselection"
						checked={disableTimeRangeSelection}
						onChange={(e) => {
							setDisableTimeRangeSelection(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label htmlFor="viewtype" className="mr-4">
						View Type
					</label>
					<select
						name="viewtype"
						onChange={(e) =>
							setViewType(
								e.target
									.value as TimeTableTypes.TimeTableViewType,
							)
						}
						value={viewType}
					>
						<option value="hours">Hours</option>
						<option value="days">Days</option>
						<option value="weeks">Weeks</option>
						<option value="months">Months</option>
						<option value="years">Years</option>
					</select>
				</div>
				<div className="grid grid-cols-2 items-start gap-2">
					<label htmlFor="locale" className="mr-4">
						Locale
					</label>
					<select
						name="locale"
						onChange={(e) =>
							setLocale(e.target.value as "en" | "de")
						}
						value={locale}
					>
						<option value="en">en</option>
						<option value="de">de</option>
					</select>
				</div>
			</div>
			<div className="flex-start flex">
				<Button
					onClick={requestPrevTimeFrameCB}
					title="Previous Time Frame"
					className="mb-2 mr-2"
				>
					<ChevronLeftIcon label="prevtimeframe" />
				</Button>
				<Button
					onClick={requestNextTimeFrameCB}
					title="Next Time Frame"
					className="mb-2 mr-2"
				>
					<ChevronRightIcon label="nexttimeframe" />
				</Button>
				<Button
					disabled={!selectedTimeRange}
					onClick={() => {
						setShowCreateNewItemModal(true)
					}}
					title="Create New Item"
					className="mb-2 mr-2"
				>
					Create New Item
				</Button>
			</div>
			<div
				style={{
					height: "600px",
				}}
			>
				<TimeTable
					groupHeaderColumnWidth={groupHeaderColumnWidth}
					columnWidth={columnWidth}
					rowHeight={rowHeight}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					timeStepsMinutes={timeSteps}
					entries={entries}
					selectedTimeSlotItem={selectedTimeSlotItem}
					selectedTimeRange={selectedTimeRange}
					disableMessages
					/*groupComponent={ Group }
					timeSlotItemComponent={ Item }
					placeHolderComponent={ ( props: PlaceholderItemProps<ExampleGroup> ) => (
						<div
							style={ { height: props.height, backgroundColor: "rgba(0,0,0,0.1)", textAlign: "center" } }
							onClick={ () => props.clearTimeRangeSelectionCB() }
						>
							Placeholder
						</div>
					) }*/
					onTimeSlotItemClick={onTimeSlotItemClickCB}
					nowOverwrite={nowOverwrite}
					timeTableMessages={translation}
					onTimeRangeSelected={
						!disableTimeRangeSelection
							? setSelectedTimeRange
							: undefined
					}
					disableWeekendInteractions={disabledWeekendInteractions}
					showTimeSlotHeader={showTimeSlotHeader}
					hideOutOfRangeMarkers={hideOutOfDayRangeMarkers}
					isCellDisabled={isCellDisabled}
					viewType={viewType}
					locale={locale}
					customHeaderRow={{
						timeSlot: TestCustomHeaderRowTimeSlot,
						header: CustomHeaderRowHeader,
					}}
				/>
			</div>
			<Button title="Load more entries." onClick={requestMoreEntriesCB}>
				<ChevronDownIcon label="entryloader" />
			</Button>
			{showCreateNewItemModal && selectedTimeRange && (
				<CreateNewTimeTableItemDialog
					group={selectedTimeRange.group}
					startDate={selectedTimeRange.startDate}
					endDate={selectedTimeRange.endDate}
					onCancel={() => setShowCreateNewItemModal(false)}
					onConfirm={onCreateNewItemConfirmCB}
					timeSteps={timeSteps}
				/>
			)}
		</>
	)

	//endregion timetable
}

function ExampleCalendar() {
	//#region timetabledays
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("day"),
			endDate: endDateInitial.startOf("day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages
	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<TimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					rowHeight={30}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					showTimeSlotHeader={false}
					viewType={"days"}
					itemsOutsideOfDayRangeFound={(items) => {
						console.info("items outside of day range found", items)
					}}
				/>
			</div>
		</>
	)

	//#endregion timetabledays
}

function ExampleMonthCalendar() {
	//region timetablemonths
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("month").subtract(1, "day"),
			endDate: endDateInitial.endOf("month").add(1, "day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages

	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<TimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					rowHeight={30}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					viewType={"months"}
					showTimeSlotHeader={false}
				/>
			</div>
		</>
	)

	//#endregion timetablemonths
}

export default function TimeTableShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Time Table"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <Example />,
					sourceCodeExampleId: "timetable",
				},
				{
					title: "Days",
					example: <ExampleCalendar />,
					sourceCodeExampleId: "timetabledays",
				},
				{
					title: "Months",
					example: <ExampleMonthCalendar />,
					sourceCodeExampleId: "timetablemonths",
				},
			]}
		/>
	)
}

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import {
	Button,
	ToastFlagContainer,
	showDiscoveryFlag,
	showErrorFlag,
	showFlag,
	showFlagExtended,
	showInformationFlag,
	showSuccessFlag,
	showWarningFlag,
} from "@linked-planet/ui-kit-ts"

//#region toastflagShowExtendedFlag
// add the ToastFlagContainer to the root of your app
function ExampleShowExtendedFlag() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() => {
					showFlagExtended({
						title: "standard flag",
						description: "test",
						autoClose: false,
						flagType: "bold",
					})
				}}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						flagType: "inverted",
					})
				}
			>
				Standard Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: This flag does not disappear!",
						description:
							"This is a standard not disappearing toast flag.",
						autoClose: false,
					})
				}
			>
				Standard Not Dissapearing
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "success",
					})
				}
			>
				Success
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
					})
				}
			>
				Information
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
						flagType: "inverted",
					})
				}
			>
				Information Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "error flag",
						description: "This is a error toast flag.",
						appearance: "error",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "discovery flag",
						description: "This is a discovery toast flag.",
						appearance: "discovery",
					})
				}
			>
				Discovery
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a discovery!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
						appearance: "warning",
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer />
		</div>
	)
}
//#endregion toastflagShowExtendedFlag

//#region toastflagShowFlag
function ExampleShowFlags() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() =>
					showFlag({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						autoClose: 2000,
					})
				}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlag({
						title: "1: This flag does not disappear!",
						description: "...and is at the bottom left",
						autoClose: false,
						position: "bottom-left",
					})
				}
			>
				Standard Not Disappearing Bottom Left
			</Button>

			<Button
				onClick={() =>
					showFlag({
						title: "Default Style",
						description: "The default style is rather dark.",
						flagType: "bold",
					})
				}
			>
				Standard Bold
			</Button>

			<Button
				onClick={() =>
					showFlag({
						title: "Pale Style",
						description: "Pale colored background.",
						flagType: "pale",
					})
				}
			>
				Standard Pale
			</Button>
			<Button
				onClick={() =>
					showSuccessFlag({
						title: "1: Whoa a new flag! Inverted Style",
						flagType: "inverted",
						description:
							"The inverted style is the default one for the simple flags.",
					})
				}
			>
				Success Inverted Style
			</Button>
			<Button
				onClick={() =>
					showSuccessFlag({
						title: "Default Style",
						flagType: "bold",
						description:
							"Using the default flag style (see flags).",
					})
				}
			>
				Success Default Flag Style
			</Button>

			<Button
				onClick={() =>
					showSuccessFlag({
						title: "Pale Style",
						flagType: "pale",
						description: "Using the pale flag style (see flags).",
					})
				}
			>
				Success Pale Flag Style
			</Button>
			<Button
				onClick={() =>
					showInformationFlag({
						title: "Information",
						flagType: "pale",
						description: "Pale flag style (see flags).",
					})
				}
			>
				Information Pale
			</Button>
			<Button
				onClick={() =>
					showDiscoveryFlag({
						title: "Discovery",
						description: "This is a bold discovery toast.",
						flagType: "bold",
					})
				}
			>
				Discovery
			</Button>
			<Button
				onClick={() =>
					showDiscoveryFlag({
						title: "Discovery",
						description: "This is a pale discovery toast.",
						flagType: "pale",
					})
				}
			>
				Discovery Pale
			</Button>
			<Button
				onClick={() =>
					showDiscoveryFlag({
						title: "Discovery",
						description:
							"This is a inverted (default) discovery toast.",
						flagType: "inverted",
					})
				}
			>
				Discovery Inverted
			</Button>
			<Button
				onClick={() =>
					showErrorFlag({
						title: "error flag",
						description: "This is a error toast flag.",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showWarningFlag({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a warning flag!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer toastWidth={"400px"} />
		</div>
	)
}
//#endregion toastflagShowFlag

export default function ToastFlagShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Toast Flag Notification"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="A toast flag notification is a small notification that appears at the bottom of the screen. It is based on the react-toastify library, and you need to add the ToastContainer component to your app."
			examples={[
				{
					title: "Example Show Flags",
					example: <ExampleShowFlags />,
					sourceCodeExampleId: "toastflagShowFlag",
				},
				{
					title: "Example Show Exended Flag",
					example: <ExampleShowExtendedFlag />,
					sourceCodeExampleId: "toastflagShowExtendedFlag",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKToggle from "@atlaskit/toggle"
import { Toggle } from "@linked-planet/ui-kit-ts"

function ToggleShowcase(props: ShowcaseProps) {
	const [isToggleActive, setIsToggleActive] = useState(false)

	const akExample = (
		<>
			{/*<AKToggle
				label="test label"
				name="test name"
				value="test value"
				isChecked={isToggleActive}
				onChange={() => setIsToggleActive(!isToggleActive)}
	/>*/}
		</>
	)

	//#region toggle
	const lpExample = (
		<Toggle
			label="test label"
			name="test name"
			value="test value"
			isChecked={isToggleActive}
			onChange={() => setIsToggleActive(!isToggleActive)}
		/>
	)
	//#endregion toggle

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Toggle"
			{...props}
			packages={[
				{
					name: "@atlaskit/toggle",
					url: "https://atlassian.design/components/toggle/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "toggle" },
			]}
		/>
	)
}

export default ToggleShowcase

import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import SearchIcon from "@atlaskit/icon/glyph/search"
import WatchIcon from "@atlaskit/icon/glyph/watch"
import ActivityIcon from "@atlaskit/icon/glyph/activity"
import CameraIcon from "@atlaskit/icon/glyph/camera"
import TaskIcon from "@atlaskit/icon/glyph/task"
import { Tooltip, TooltipProvider, Button } from "@linked-planet/ui-kit-ts"

//import "react-tooltip/dist/react-tooltip.css" -> imported into the libraries css

function TooltipShowcase(props: ShowcaseProps) {
	//#region tooltip
	const example = (
		<TooltipProvider>
			<div className="flex w-full flex-col items-center">
				<div className="flex gap-4">
					<Tooltip
						side="left"
						tooltipContent={<span>I&apos;m a tooltip</span>}
						usePortal
						align="start"
					>
						<div>
							<SearchIcon label="" />
						</div>
					</Tooltip>
					<Tooltip
						tooltipHTMLContent={
							"<span>I&apos;m a <b>top</b> tooltip with stringified HTML</span>"
						}
						usePortal={false}
						side="bottom"
						align="end"
					>
						<div>
							<ActivityIcon label="" />
						</div>
					</Tooltip>
					<Tooltip
						side="top"
						defaultOpen
						tooltipContent={"I'm a top tooltip"}
					>
						<div>
							<CameraIcon label="" />
						</div>
					</Tooltip>
					<Tooltip
						side="bottom"
						open
						tooltipContent={
							<p>
								I&apos;m a bottom-end tooltip <br />
								with a unique id.
							</p>
						}
					>
						<div>
							<TaskIcon label="" />
						</div>
					</Tooltip>
					<Tooltip
						tooltipContent={`Der Fliegenpilz ist mit seinem auffälligen roten, weiß gepunkteten Hut weit und gut zu sehen. Er hat einen Durchmesser von 5 bis über 15 Zentimeter, ist jung kugelig oder halbkugelig geschlossen, dann konvex, schließlich scheibenförmig mit etwas herabgebogenem, gestreiftem Rand. Jung ist er durch sehr dicht stehende Warzen und Schuppen noch fast weiß mit schwachem orangen oder rötlichem Schimmer, dann tief rot und mit grauweißen kegelförmigen Warzen, zum Teil auch breiten Schuppen – den charakteristischen weißen „Punkten“ – besetzt, die leicht abgewischt werden können. Sie sind Reste einer Gesamthülle (Velum universale), die den jungen Pilz anfangs schützend umschließt.

						Der rote Hut ist bisweilen auch fleckenweise heller, und zwar besonders gegen den Rand mit oranger Mischfarbe, gelegentlich durch tiefer rot gefärbte Linien wie faserig gestreift. Am Hutrand hängen teilweise leicht entfernbare weiße Velumflocken. Im Übrigen ist die Oberfläche weitgehend glatt bzw. wie gehämmert uneben, im feuchten Zustand etwas schmierig und schwach glänzend. Die Hutdeckschicht ist als Haut bis zur Mitte des Hutes abziehbar; das dadurch freigelegte Hutfleisch ist tief safrangelb gefärbt.
						
						Auf der Unterseite des Hutes befinden sich Lamellen. Diese stehen frei, untermischt und ziemlich gedrängt. Sie sind schwach bauchig und weisen eine fein gezähnte Schneide auf, die unter der Lupe gesehen zugleich flockig ist. Ihre Farbe ist weißlich, bei älteren Stücken aus der Tiefe heraus mit schwach lachsfarbenem Schein. Gegen den Hutrand sind sie stumpf geformt. Sie fühlen sich weich an und haben eine glatte Lamellenfläche. Der Sporenstaub ist weiß.
						
						Der Stiel ist 8 bis 20 Zentimeter hoch und 1,5 bis 3 Zentimeter dick und besitzt einen runden Querschnitt. Die Stielspitze ist gegen den Hut ausweitend, die Stielbasis knollig verdickt. In seiner oberen Hälfte (oft sogar ziemlich weit oben) weist er einen häutigen, empfindlichen Ring auf, der unterseits flockig ist und oberseits wie gepresste Watte aussieht; dieser hat einen gezähnten Rand und ist weiß bzw. gelegentlich und stellenweise leicht gelblich gefärbt.
						
						Der Stiel ist insgesamt weiß, an seiner Spitze bereift, gegen die Stielknolle auch schwach bräunlich und bisweilen durch unscheinbare Linien gezeichnet, die unregelmäßig netzig zusammenlaufen können. An der Stielknolle fügen sich zahlreiche weißlich-graue Warzen zu drei bis vier meist unvollständigen Ringzonen. Bisweilen findet sich auch eine Volva, die jedoch in der Regel nicht gut entwickelt ist.[3]
						
						Das Fleisch ist schwammig, weich, lediglich in der Knolle ziemlich fest und ohne besonderen Geruch. Es ist im Stiel voll und schwach faserig bis schwammig. Von der Hutoberfläche her ist es orangegelb eingefärbt, sonst rein weiß. Während des Trocknungsprozesses schimmert die Huthaut zeitweilig golden bis kupfern, nimmt jedoch später eine mattorange Färbung an, wobei der metallische Schimmer wieder verblasst.[4]:103–104
						
						Ältere Pilzkörper bilden im Becherstadium eine Vertiefung in ihrem Hut, in dem sich Regenwasser sammeln kann, der sogenannte Zwergenwein.[5]`}
					>
						<div>
							<WatchIcon label="" />
						</div>
					</Tooltip>
					<Tooltip
						tooltipContent={
							<div>
								Button:
								<Button>Button</Button>
							</div>
						}
						side="right"
						align="end"
					>
						<div className="bg-brand-bold p-2 rounded text-text-inverse">
							Button with tooltip
						</div>
					</Tooltip>
				</div>
			</div>
		</TooltipProvider>
	)
	//#endregion tooltip

	return (
		<ShowcaseWrapperItem
			name="Tooltip"
			description={
				<p>
					A tooltip component that wraps the children in a div and
					adds a tooltip to it. <br />
					Use tooltipContent for the tooltip content and
					tooltipHTMLContent in case you have stringified HTML as
					tooltip content. <br />
					<br />
					Based on react-tooltip.
					<br />
					The variant defines the color of the tooltip - if it is not
					defined, it is unstyled.
					<br />
					<b>Important:</b> The tooltip component's child must be
					ref-able, otherwise the tooltip will not work (i.g. use a
					div around an icon).
				</p>
			}
			{...props}
			packages={[
				{
					name: "tooltip",
					url: "http://localhost:3000/ui-kit-ts/single#Tooltip",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tooltip" },
			]}
		/>
	)
}

export default TooltipShowcase

import CrossIcon from "@atlaskit/icon/glyph/cross"
import {
	Button,
	ButtonGroup,
	Modal,
	Select,
	ToastFlagContainer,
} from "@linked-planet/ui-kit-ts"
import { Tour, TourStep } from "@linked-planet/ui-kit-ts"
import { useMemo, useState } from "react"
import ShowcaseWrapperItem, {
	type ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region tour
const defaultLocale = {
	back: "Back",
	close: "Close",
	last: "Done",
	next: "Next",
	open: "Open",
	skip: "Skip",
} as const

function TourExample() {
	const [isActive, setActive] = useState(false)
	const [popup, setPopup] = useState(false)

	const steps = useMemo(() => {
		const InitStep = new TourStep({
			step: {
				title: "Tour starten",
				target: "#tour-start",
				disableBeacon: true,
				showSkipButton: false,
				placement: "bottom",
				locale: { ...defaultLocale, next: "Start Tour" },
				content: (
					<span>
						The first step selects the tour start to start the tour.
					</span>
				),
			},
		})

		const SecondStep = new TourStep({
			step: {
				title: "Button",
				target: "#joyride-first",
				disableBeacon: true,
				showSkipButton: false,
				placement: "right",
				locale: defaultLocale,
				content: (
					<span>
						This step selects the popup which would open the popup.
					</span>
				),
			},
		})

		const ThirdPopupStep = new TourStep({
			step: {
				title: "Popup",
				target: "#test-select",
				disableBeacon: true,
				showSkipButton: false,
				placement: "right",
				locale: defaultLocale,
				content: (
					<span>
						This step opens the popup and selects the dropdown in
						it.
					</span>
				),
			},
			onInit: () => {
				setPopup(true)
			},
			onPrepare: () => {
				console.log("prepare message")
			},
			onExit: () => {
				setPopup(false)
			},
		})

		const FourthStep = new TourStep({
			step: {
				title: "Weiterer Button",
				target: "#joyride-second",
				disableBeacon: true,
				showSkipButton: false,
				placement: "right",
				locale: defaultLocale,
				content: (
					<span>
						This step closes the popup and continues with this
						button.
					</span>
				),
			},
		})
		return [InitStep, SecondStep, ThirdPopupStep, FourthStep]
	}, [])

	return (
		<div className="bg-surface">
			<ButtonGroup>
				<div id="tour-start" className="flex justify-center flex-1">
					<Button
						type="button"
						className="px-2"
						onClick={() => setActive(true)}
						appearance="primary"
					>
						Tour starten
					</Button>
					<Tour
						isActive={isActive}
						setActive={setActive}
						steps={steps}
						skipOnError={false}
						showInfoAndError={true}
						beforeAll={() => {
							// initialize dummy data or other inits before tour starts
							console.info("Starting Tour")
						}}
						afterAll={() => {
							// cleanup dummy data or other inits after tour finished
							console.info("Ending Tour")
						}}
					/>
				</div>
				<Button
					data-id="Test-1"
					//onClick={() => setPopup(true)}
					id="joyride-first"
				>
					First step
				</Button>
				<Button data-id="Test-2" id="joyride-second">
					Second step
				</Button>
			</ButtonGroup>
			<Modal.Container
				open={popup}
				//defaultOpen={true}
				onOpenChange={(opened) => {
					if (!opened) setPopup(false)
				}}
				//shouldCloseOnEscapePress={false}
				shouldCloseOnOverlayClick={false} // this is required, the show "clicks" outside of the dialog closing the modal, which results in the failing of the next step because the element is not mounted anymore
				accessibleDialogDescription="This is a modal dialog example"
			>
				<Modal.Header>
					<Modal.Title accessibleDialogTitle="Sample Modal">
						Sample Modal
					</Modal.Title>
					<Button
						appearance="link"
						onClick={() => setPopup(false)}
						className="text-text p-0"
					>
						<CrossIcon label="Close popup" />
					</Button>
				</Modal.Header>
				<Modal.Body>
					<div>
						<p>This is the body of the modal.</p>
					</div>
					<Select
						id="test-select"
						data-id="test-select"
						placeholder="Choose..."
						options={[]}
					/>
				</Modal.Body>
				<Modal.Footer>
					<Modal.CloseTrigger>
						<Button appearance="primary" className="z-0">
							Close
						</Button>
					</Modal.CloseTrigger>
				</Modal.Footer>
			</Modal.Container>
			<ToastFlagContainer />
		</div>
	)
}

//#endregion tour

export default function TourShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Tour"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Tour",
				},
			]}
			description="This is a simple wrapper for joyride guided tour including beforeAll, afterAll, onInit, onPrepare, onExit events."
			examples={[
				{
					title: "Tour",
					example: <TourExample />,
					sourceCodeExampleId: "tour",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { TruncatedText } from "@linked-planet/ui-kit-ts"

//import "react-tooltip/dist/react-tooltip.css" -> imported into the libraries css

function TruncatedTextShowcase(props: ShowcaseProps) {
	//#region truncatedtext
	const example = (
		<div className="flex gap-4">
			<TruncatedText lines={2}>
				Lorem ipsum dolor sit, amet consectetur adipisicing elit. Iusto
				quod libero hic accusantium porro. Temporibus quaerat molestiae
				recusandae tenetur maiores ab sit ullam deleniti eligendi,
				officia nobis! Id, natus qui?
			</TruncatedText>
			<TruncatedText>
				Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aut
				ipsum iure minus, molestiae rem debitis culpa. Molestiae maxime
				cumque exercitationem commodi dolores, modi dolorem aut. Quis
				reprehenderit temporibus pariatur corrupti?
			</TruncatedText>
			<TruncatedText>only short text, no truncation needed</TruncatedText>
		</div>
	)
	//#endregion truncatedtext

	return (
		<ShowcaseWrapperItem
			name="TruncatedText"
			description={
				<p>
					A container for a text, which truncates the text after a
					given number of lines using an ellipsis, and showing a
					&quot;more&quot; link to expand the text.
				</p>
			}
			{...props}
			packages={[
				{
					name: "truncatedtext",
					url: "http://localhost:3000/ui-kit-ts/single#TruncatedText",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "truncatedtext",
				},
			]}
		/>
	)
}

export default TruncatedTextShowcase

import React, { useState } from "react"
import {
	debounceHelper,
	rateLimitHelper,
	useDebounceHelper,
	useRateLimitHelper,
} from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region debounceHelper
// export this outside of a component, or this will be recreated on every render
const debounced = debounceHelper()

function DebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")

	return (
		<div>
			<h4>debounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debounced(() => {
						setDebouncedValue(newVal)
					}, 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion debounceHelper

//#region useDebounceHelperHook
function UseDebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")
	const debHelper = useDebounceHelper()

	return (
		<div>
			<h4>useDebounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debHelper(() => setDebouncedValue(newVal), 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion useDebounceHelperHook

//#region rateLimitHelper
// export this outside of a component, or this will be recreated on every render
const rateLimited = rateLimitHelper(500)
function RateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")

	return (
		<div>
			<h4>rateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rateLimited(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion rateLimitHelper

//#region useRateLimitHelper
function UseRateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")
	const rlHelper = useRateLimitHelper(500)

	return (
		<div>
			<h4>useRateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rlHelper(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion useRateLimitHelper

export default function UtilsShowCase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Utilities"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Debounce Helper",
					example: <DebounceHelperExample />,
					sourceCodeExampleId: "debounceHelper",
				},
				{
					title: "useDebounce",
					example: <UseDebounceHelperExample />,
					sourceCodeExampleId: "useDebounceHelperHook",
				},
				{
					title: "Rate Limit Helper",
					example: <RateLimitHelperExample />,
					sourceCodeExampleId: "rateLimitHelper",
				},
				{
					title: "useRateLimit",
					example: <UseRateLimitHelperExample />,
					sourceCodeExampleId: "useRateLimitHelper",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import { AppLayout, Checkbox, PageLayout } from "@linked-planet/ui-kit-ts"

import "@atlaskit/css-reset" // sets base styles of AK
import Fillers from "./Fillers"

//#region applayoutexample
export default function AppLayoutExample() {
	const [bannerSticky, setBannerSticky] = useState(true)
	const [topNavSticky, setTopNavSticky] = useState(true)
	const [leftPanelSticky, setLeftPanelSticky] = useState(true)
	const [rightPanelSticky, setRightPanelSticky] = useState(true)

	const [leftSidebarSticky, setLeftSidebarSticky] = useState(true)
	const [rightSidebarSticky, setRightSidebarSticky] = useState(true)
	const [mainFixedHeight, setMainFixedHeight] = useState(true)

	return (
		<AppLayout.Container>
			<AppLayout.Banner
				sticky={bannerSticky}
				className="flex justify-between gap-4 border-2 border-solid px-4 py-2"
			>
				Sticky Banner
				<Checkbox
					checked={bannerSticky}
					onCheckedChange={setBannerSticky}
					label="Banner Sticky"
				/>
			</AppLayout.Banner>
			<AppLayout.TopNavigation
				sticky={topNavSticky}
				className="flex justify-between gap-4 border-2 border-solid p-4"
			>
				Top Navigation
				<Checkbox
					checked={topNavSticky}
					onCheckedChange={setTopNavSticky}
					label="Top Navigation Sticky"
				/>
			</AppLayout.TopNavigation>
			<AppLayout.LeftPanel
				sticky={leftPanelSticky}
				className="border-2 border-dashed p-4"
			>
				<h3 className="mb-4">Left Panel</h3>
				<Checkbox
					checked={leftPanelSticky}
					onCheckedChange={setLeftPanelSticky}
					label="Sticky"
				/>
				<hr />
				<Fillers />
			</AppLayout.LeftPanel>
			<AppLayout.RightPanel
				sticky={rightPanelSticky}
				className="border-2 border-dashed p-4"
			>
				<h3 className="mb-4">Right Panel</h3>
				<Checkbox
					checked={rightPanelSticky}
					onCheckedChange={setRightPanelSticky}
					label="Sticky"
				/>
				<hr />
				<Fillers />
			</AppLayout.RightPanel>
			<AppLayout.Content>
				<AppLayout.LeftSidebar sticky={leftSidebarSticky}>
					<h3 className="mb-4">Left Sidebar</h3>
					<Checkbox
						checked={leftSidebarSticky}
						onCheckedChange={setLeftSidebarSticky}
						label="Left Sidebar Sticky"
					/>
					<Fillers />
				</AppLayout.LeftSidebar>

				<AppLayout.RightSidebar sticky={rightSidebarSticky}>
					<h3 className="mb-4">Right Sidebar</h3>
					<Checkbox
						checked={rightSidebarSticky}
						onCheckedChange={setRightSidebarSticky}
						label="Right Sidebar Sticky"
					/>
					<Fillers />
				</AppLayout.RightSidebar>

				<AppLayout.Main
					className="overflow-hidden border-2 border-dotted"
					fixedHeight={mainFixedHeight}
				>
					<div className="bg-warning border-warning-bold absolute right-4 top-4 z-10 border-2 border-solid p-4">
						<Checkbox
							checked={mainFixedHeight}
							onCheckedChange={setMainFixedHeight}
							label="Fixed Height"
						/>
					</div>
					<PageLayout.Page>
						<PageLayout.PageHeader shadow={false}>
							<PageLayout.PageHeaderTitle>
								Page Layout
							</PageLayout.PageHeaderTitle>
							<PageLayout.PageHeaderSubTitle>
								Subtitle
							</PageLayout.PageHeaderSubTitle>
						</PageLayout.PageHeader>
						<PageLayout.PageBody>
							<PageLayout.PageBodyHeader>
								Page Body Header
							</PageLayout.PageBodyHeader>
							<PageLayout.PageBodyContent>
								<Fillers />
							</PageLayout.PageBodyContent>
							<PageLayout.PageBodyFooter>
								Page Body Footer
							</PageLayout.PageBodyFooter>
						</PageLayout.PageBody>
					</PageLayout.Page>
				</AppLayout.Main>
			</AppLayout.Content>
		</AppLayout.Container>
	)
}
//#endregion applayoutexample
