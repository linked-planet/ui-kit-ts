import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"
import {
	Avatar as LPAvatar,
	AvatarItem as LPAvatarItem,
} from "@linked-planet/ui-kit-ts"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"

function AvatarShowcase(props: ShowcaseProps) {
	const example1AK = (
		<>
			{/*<div className="flex gap-4">
				<AvatarItem
					avatar={
						<Avatar
							size="xsmall"
							appearance="circle"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="small"
							appearance="square"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="medium"
							name="M T"
							presence="busy"
							status="declined"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" presence="focus" status="locked" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" isDisabled presence="online" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="xlarge"
							appearance="square"
							label="testlabel"
							name="M T"
							presence="offline"
						/>
					}
				/>
				<Avatar size="xxlarge" />
				<Avatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<Avatar borderColor="#ff0000" />
				<span>as link:</span>
				<Avatar size="medium" name="M T" href="#" />
				<Avatar size="xlarge" href="#" />
				<Avatar href="#" borderColor="#00ff00" />
				<Avatar size="medium" isDisabled={true} name="M T" href="#" />
				<Avatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<Avatar href="#" src={"images/github-logo.png"} size="xlarge" />
				</div>*/}
		</>
	)

	//#region avatar1
	const example1 = (
		<div>
			{example1AK}
			<div className="flex gap-4">
				<LPAvatar
					size="xsmall"
					appearance="circle"
					presence="online"
					status="approved"
				/>
				<LPAvatar
					size="small"
					appearance="square"
					presence="online"
					status="approved"
				/>
				<LPAvatar size="medium" presence="busy" status="declined" />
				<LPAvatar size="large" presence="focus" status="locked" />
				<LPAvatar size="large" isDisabled presence="online" />
				<LPAvatar
					size="xlarge"
					appearance="square"
					label="testlabel"
					presence="offline"
				/>
				<LPAvatar size="xxlarge" />
				<LPAvatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<LPAvatar borderColor="#ff0000" />
				<span>as link:</span>
				<LPAvatar size="medium" name="M T" label="testlabel" href="#" />
				<LPAvatar size="xlarge" href="#" />
				<LPAvatar size="medium" href="#" />
				<LPAvatar href="#" borderColor="#00ff00" />
				<LPAvatar size="medium" isDisabled={true} href="#" />
				<LPAvatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<LPAvatar
					href="#"
					src={"images/github-logo.png"}
					size="xlarge"
				/>
			</div>
		</div>
	)
	//#endregion avatar1

	const example2AK = (
		<>
			{/*<AvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={<Avatar size="medium" borderColor="red" />}
			/>
	<Avatar size="medium" />*/}
		</>
	)

	//#region avatar2
	const example2 = (
		<div className="flex flex-col">
			{example2AK}
			<LPAvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={
					<LPAvatar
						size="large"
						presence="online"
						borderColor="red"
					/>
				}
			/>
			<LPAvatarItem
				primaryText={
					<div>
						<h1>TEST H1</h1>
					</div>
				}
				secondaryText={
					<div>
						<div className="bg-brand text-danger-bold h-4 w-12 flex-none">
							UUU
						</div>
					</div>
				}
				avatar={<LPAvatar size="large" presence="online" />}
			/>
		</div>
	)
	//#endregion avatar2

	const example3AK = (
		<div className="flex flex-1 justify-center border-2">
			{/*<AvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<Avatar size="medium" />}
				/>*/}
		</div>
	)

	//#region avatar3
	const example3 = (
		<div>
			{example3AK}
			<div className="flex flex-1 justify-center border-2">
				<LPAvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<LPAvatar size="medium" />}
				/>
			</div>
		</div>
	)
	//#endregion avatar3

	return (
		<ShowcaseWrapperItem
			name="Avatar"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Avatars",
				},
			]}
			examples={[
				{
					title: "Avatar",
					example: example1,
					sourceCodeExampleId: "avatar1",
				},
				{
					title: "Avatar Item",
					example: example2,
					sourceCodeExampleId: "avatar2",
				},
				{
					title: "Avatar Item 2",
					example: example3,
					sourceCodeExampleId: "avatar3",
				},
			]}
		/>
	)
}

export default AvatarShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AwesomeSlider from "react-awesome-slider"

import "react-awesome-slider/dist/styles.css"

function AwesomeSliderShowcase(props: ShowcaseProps) {
	//#region awesome-slider
	const example = (
		<div
			style={{
				minWidth: 600,
				display: "flex",
				height: 200,
				position: "relative",
				zIndex: 0,
			}}
		>
			<AwesomeSlider bullets={false}>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/logo.png"
						width={100}
						height={100}
					/>
				</div>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/github-logo.png"
						width={100}
						height={100}
					/>
				</div>
			</AwesomeSlider>
		</div>
	)
	//#endregion awesome-slider

	return (
		<ShowcaseWrapperItem
			name="Awesome Slider"
			{...props}
			packages={[
				{
					name: "react-awesome-slider",
					url: "https://github.com/rcaferati/react-awesome-slider",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "awesome-slider",
				},
			]}
		/>
	)
}

export default AwesomeSliderShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKBadge from "@atlaskit/badge"
import { Badge } from "@linked-planet/ui-kit-ts"

function BadgeShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			{/*<div
				style={{
					display: "flex",
					gap: "1rem",
				}}
			>
				<AKBadge></AKBadge>
				<AKBadge appearance="added" />
				<AKBadge appearance="important" />
				<AKBadge appearance="removed" />
				<AKBadge appearance="primary" />
				<AKBadge appearance="primaryInverted">test</AKBadge>
			</div>*/}
		</>
	)

	//#region badge
	const lpExample = (
		<div
			style={{
				display: "flex",
				gap: "1rem",
			}}
		>
			<Badge>0</Badge>
			<Badge appearance="added">1</Badge>
			<Badge appearance="important">2</Badge>
			<Badge appearance="removed">3</Badge>
			<Badge appearance="primary">4</Badge>
			<Badge appearance="primaryInverted">test</Badge>
		</div>
	)
	//#endregion badge

	const example = (
		<div>
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Badge"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Badge",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example,
					sourceCodeExampleId: "badge",
				},
			]}
		/>
	)
}

export default BadgeShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Banner from "@atlaskit/banner"
import WarningIcon from "@atlaskit/icon/glyph/warning"
import ErrorIcon from "@atlaskit/icon/glyph/error"

function BannerShowcase(props: ShowcaseProps) {
	//#region banner1
	const example = (
		<Banner appearance="announcement">
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner1

	//#region banner2
	const example2 = (
		<Banner appearance="warning" icon={<WarningIcon label="" />}>
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner2

	//#region banner3
	const example3 = (
		<Banner
			appearance="error"
			icon={
				<ErrorIcon
					secondaryColor="var(--ds-background-danger-bold, #DE350B)"
					label=""
				/>
			}
		>
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner3

	return (
		<ShowcaseWrapperItem
			name="Banner"
			{...props}
			packages={[
				{
					name: "@atlaskit/banner",
					url: "https://atlassian.design/components/banner/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example,
					sourceCodeExampleId: "banner1",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "banner2",
				},
				{
					title: "Example 3",
					example: example3,
					sourceCodeExampleId: "banner3",
				},
			]}
		/>
	)
}

export default BannerShowcase

import React, { CSSProperties, useMemo, useState } from "react"
import {
	BookCard,
	BookCardComponents,
} from "@linked-planet/ui-kit-ts/components/BookCard"

import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import Button, { ButtonGroup } from "@atlaskit/button"
import { Fieldset } from "@atlaskit/form"
import { Badge, SimpleTag, TagGroup } from "@linked-planet/ui-kit-ts"

//#region bookcardcomponents
function BookCardComponentsExample() {
	return (
		<BookCardComponents.CardBase
			header={
				<BookCardComponents.CardHeader>
					<BookCardComponents.CardHeaderMeta>
						<BookCardComponents.CardHeaderTitle>
							Book Title very very very very very very very very
							very very very very very very very long
						</BookCardComponents.CardHeaderTitle>
						<BookCardComponents.CardHeaderSubtitle>
							Book Subtitle
						</BookCardComponents.CardHeaderSubtitle>
					</BookCardComponents.CardHeaderMeta>
					<BookCardComponents.CardHeaderActions>
						<BookCardComponents.CardHeaderActionsInfo>
							<Badge appearance="default">action</Badge>
						</BookCardComponents.CardHeaderActionsInfo>
					</BookCardComponents.CardHeaderActions>
				</BookCardComponents.CardHeader>
			}
			defaultOpen={true}
		>
			<BookCardComponents.CardGridBody>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title very very very very very very very very
						very very very very very very very long
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content</div>
				</BookCardComponents.CardBodyEntry>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title 2
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content 2</div>
				</BookCardComponents.CardBodyEntry>
			</BookCardComponents.CardGridBody>
		</BookCardComponents.CardBase>
	)
}
//#endregion bookcardcomponents

function BookCardExample() {
	//#region bookcard
	const [bodyLayout, setBodyLayout] = useState<"row" | "grid" | "column">(
		"grid",
	)

	const [isClosed, setIsClosed] = useState<boolean | undefined>(undefined)

	const children = useMemo(() => {
		const childCount = bodyLayout === "column" ? 10 : 100
		const ret = Array(childCount)
		for (let i = 0; i < childCount; i++) {
			ret[i] = (
				<BookCardComponents.CardBodyEntry key={i}>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title {i}
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content {i}</div>
				</BookCardComponents.CardBodyEntry>
			)
		}
		return ret
	}, [bodyLayout])

	const bodyStyle = useMemo(() => {
		switch (bodyLayout) {
			case "row":
				break
			case "grid":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			case "column":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			default:
				break
		}
	}, [bodyLayout])

	const bookCardExample = (
		<>
			<BookCard
				title="Book Title very very very very very very very very very
						very very very very very very long"
				subtitle="Book Subtitle"
				bodyLayout={bodyLayout}
				bodyStyle={bodyStyle}
				closed={isClosed}
				actionsInfo={"Action:"}
				actions={
					<>
						<TagGroup>
							<SimpleTag
								key="action"
								text="action item"
								color="lightblue"
							/>
							<SimpleTag
								key="action 1"
								text="action item 1"
								color="lightgreen"
							/>
						</TagGroup>
					</>
				}
			>
				<>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<div>Book Entry Content</div>
					</BookCardComponents.CardBodyEntry>
					{children}
				</>
			</BookCard>
		</>
	)
	//#endregion bookcard

	return (
		<div>
			<div
				style={{
					display: "flex",
					flexDirection: "row",
					justifyContent: "space-between",
					marginBottom: "8px",
				}}
			>
				<Fieldset legend="Book Card Collapsible">
					<ButtonGroup>
						<Button
							isSelected={isClosed === false}
							onClick={() => setIsClosed(false)}
						>
							Opened
						</Button>
						<Button
							isSelected={isClosed === true}
							onClick={() => setIsClosed(true)}
						>
							Closed
						</Button>
						<Button
							isSelected={isClosed === undefined}
							onClick={() => setIsClosed(undefined)}
						>
							Closed Undefined
						</Button>
					</ButtonGroup>
				</Fieldset>
				<Fieldset legend="Book Card Body Layout">
					<ButtonGroup>
						<Button
							isSelected={bodyLayout === "row"}
							onClick={() => setBodyLayout("row")}
						>
							Row
						</Button>
						<Button
							isSelected={bodyLayout === "grid"}
							onClick={() => setBodyLayout("grid")}
						>
							Grid
						</Button>
						<Button
							isSelected={bodyLayout === "column"}
							onClick={() => setBodyLayout("column")}
						>
							Column
						</Button>
					</ButtonGroup>
				</Fieldset>
			</div>
			{bookCardExample}
		</div>
	)
}

export default function BookCardShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Book Card (Components)"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description={
				<>
					<p>
						Book Card is a card component that is used to display
						search result information or similar. It can be used as
						a collapsible component or as a static component.
					</p>
					<p>
						If <b>closed</b> is used, the collapse state is
						controlled. By <b>defaultOpen</b> if it collapsible but
						uncontrolled. If both are undefined, the component is
						static.
					</p>
					<p>
						Book Card is a composition of several components. The
						components can be used individually or as a whole.
					</p>
				</>
			}
			examples={[
				{
					title: "Complete Bookcard",
					example: <BookCardExample key="bookcardexample" />,
					sourceCodeExampleId: "bookcard",
				},
				{
					title: "Components",
					example: (
						<BookCardComponentsExample key="bookcardcomponentexample" />
					),
					sourceCodeExampleId: "bookcardcomponents",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
/*import AKButton, {
	ButtonGroup as AKButtonGroup,
	LoadingButton as AKLoadingButton,
} from "@atlaskit/button"*/
import { Button, LoadingButton, ButtonGroup } from "@linked-planet/ui-kit-ts"
import SearchIcon from "@atlaskit/icon/glyph/search"

function ButtonShowcase(props: ShowcaseProps) {
	const [isLoading, setIsLoading] = useState(false)

	const akExample = (
		<>
			{/*<AKButtonGroup>
				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
				>
					Default Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isSelected={true}
				>
					Selected Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Disabled Default button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="subtle"
					onClick={() => console.log("Button pressed")}
				>
					Subtle button
				</AKButton>

				<AKButton
					appearance="link"
					onClick={() => console.log("Button pressed")}
				>
					Link button
				</AKButton>

				<AKButton
					appearance="warning"
					onClick={() => console.log("Button pressed")}
				>
					Warning button
				</AKButton>

				<AKButton
					appearance="danger"
					onClick={() => console.log("Button pressed")}
					iconAfter={<SearchIcon label="" />}
					iconBefore={<SearchIcon label="" />}
				>
					Danger button
				</AKButton>
				<AKLoadingButton
					isLoading={isLoading}
					onClick={() => {
						setIsLoading(true)
						window.setTimeout(() => setIsLoading(false), 3000)
					}}
					iconBefore={<SearchIcon label="" />}
					iconAfter={<SearchIcon label="" />}
				>
					Icon Loading Button
				</AKLoadingButton>
			</AKButtonGroup>*/}
		</>
	)

	//#region button
	const lpExample = (
		<ButtonGroup>
			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				autoFocus={true}
			>
				Default Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				isSelected={true}
			>
				Selected Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				isDisabled={true}
			>
				Disabled Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
			>
				Primary Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
				isDisabled={true}
			>
				Primary Button
			</Button>

			<Button
				appearance="subtle"
				onClick={() => console.log("Button pressed")}
			>
				Subtle Button
			</Button>

			<Button
				appearance="link"
				onClick={() => console.log("Button pressed")}
			>
				Link Button
			</Button>

			<Button
				appearance="warning"
				onClick={() => console.log("Button pressed")}
			>
				Warning Button
			</Button>

			<Button
				appearance="danger"
				onClick={() => console.log("Button pressed")}
			>
				Danger Button
			</Button>

			<Button
				appearance="success"
				onClick={() => console.log("Button pressed")}
			>
				Success Button
			</Button>

			<Button
				appearance="information"
				onClick={() => console.log("Button pressed")}
				iconAfter={<SearchIcon label="" />}
				iconBefore={<SearchIcon label="" />}
			>
				Information Button
			</Button>

			<LoadingButton
				onClick={() => {
					setIsLoading(true)
					window.setTimeout(() => setIsLoading(false), 3000)
				}}
				isLoading={isLoading}
				iconBefore={<SearchIcon label="" />}
				iconAfter={<SearchIcon label="" />}
			>
				Icon Loading Button
			</LoadingButton>
		</ButtonGroup>
	)
	//#endregion button

	const example = (
		<div
			style={{
				display: "flex",
				flexDirection: "column",
				alignItems: "center",
				justifyContent: "space-evenly",
				height: "100%",
				gap: "1rem",
				paddingLeft: "10rem",
				paddingRight: "10rem",
			}}
		>
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Button & Button-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Button",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "button" },
			]}
		/>
	)
}

export default ButtonShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Calendar from "@atlaskit/calendar"

function CalendarShowcase(props: ShowcaseProps) {
	//#region calendar
	const example = (
		<div style={{ minWidth: 300 }}>
			<Calendar locale="de-DE" weekStartDay={1} />
		</div>
	)
	//#endregion calendar

	return (
		<ShowcaseWrapperItem
			name="Calendar"
			{...props}
			packages={[
				{
					name: "@atlaskit/calendar",
					url: "https://atlassian.design/components/calendar/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "calendar" },
			]}
		/>
	)
}

export default CalendarShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKCheckbox from "@atlaskit/checkbox"
import { Checkbox } from "@linked-planet/ui-kit-ts"

function CheckboxShowcase(props: ShowcaseProps) {
	const [isCheckboxActive, setIsCheckboxActive] = useState(false)

	const akExample = (
		<div style={{ display: "flex", gap: "1rem" }}>
			<AKCheckbox
				label="controlled"
				isChecked={isCheckboxActive}
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="uncontrolled" defaultChecked />
			<AKCheckbox label="disabled" isDisabled />
			<AKCheckbox label="invalid" isInvalid />
			<AKCheckbox
				label="indeterminate"
				isChecked={isCheckboxActive}
				isIndeterminate
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="indeterminate uncontrolled" isIndeterminate />
			<AKCheckbox label="required" isIndeterminate isRequired />
		</div>
	)

	//#region checkbox
	const lpExample = (
		<div style={{ display: "flex", gap: "1rem" }}>
			<Checkbox
				label="controlled"
				isChecked={isCheckboxActive}
				onChange={setIsCheckboxActive}
			/>
			<Checkbox label="uncontrolled" defaultChecked />
			<Checkbox label="disabled" isDisabled />
			<Checkbox label="invalid" isInvalid />
			<Checkbox
				label="indeterminate"
				isIndeterminate
				isChecked={isCheckboxActive}
				onChange={setIsCheckboxActive}
			/>
			<Checkbox label="indeterminate uncontrolled" isIndeterminate />
			<Checkbox label="required" isIndeterminate isRequired />
		</div>
	)
	//#endregion checkbox

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Checkbox"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Checkbox",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "checkbox" },
			]}
		/>
	)
}

export default CheckboxShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { CodeBlock } from "@atlaskit/code"

function CodeBlockShowcase(props: ShowcaseProps) {
	//#region code-block
	const code = `class Hello {
    public static void main(String args...) {
        System.out.println('Hello world')
    }
}`
	const example = <CodeBlock language="java" text={code} />
	//#endregion code-block

	return (
		<ShowcaseWrapperItem
			name="Code block"
			{...props}
			packages={[
				{
					name: "@atlaskit/code",
					url: "https://atlassian.design/components/code/code-block/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "code-block",
				},
			]}
		/>
	)
}

export default CodeBlockShowcase

import { Collapsible } from "@linked-planet/ui-kit-ts/components/Collapsible"
import React from "react"
import type { ShowcaseProps } from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ShowcaseWrapperItem from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

export default function CollapsibleShowcase(props: ShowcaseProps) {
	//#region collapsible
	const example = (
		<Collapsible
			header={
				<div>
					<h4>Collapsible Title</h4>
				</div>
			}
			openButtonPosition="left"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible

	//#region collapsible1
	const example1 = (
		<Collapsible
			header={
				<div className="m-auto p-2">
					<h2>Collapsible Title</h2>
				</div>
			}
			openButtonPosition="right"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible1

	return (
		<ShowcaseWrapperItem
			name="Collapsible"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Chevron Left",
					example,
					sourceCodeExampleId: "collapsible",
				},
				{
					title: "Chevron Right",
					example: example1,
					sourceCodeExampleId: "collapsible1",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	DateRangePicker,
	DateType,
	DateTypeFormatString,
} from "@linked-planet/ui-kit-ts"
import dayjs from "dayjs"

//#region date-range-picker
function Example() {
	const today = dayjs().format(DateTypeFormatString) as DateType
	const todayPlus2 = dayjs()
		.add(2, "day")
		.format(DateTypeFormatString) as DateType
	const todayPlus10 = dayjs()
		.add(10, "day")
		.format(DateTypeFormatString) as DateType

	const [startDate, setStartDate] = useState<DateType>()
	const [endDate, setEndDate] = useState<DateType>()
	const [weekendDisabled, setWeekendDisabled] = useState(false)
	const [disabled, setDisabled] = useState(false)

	return (
		<div style={{ minWidth: 300 }}>
			<div
				style={{
					display: "grid",
					gridTemplateColumns: "1fr 1fr",
				}}
			>
				<div>Start Date: {startDate}</div>
				<div>End Date: {endDate}</div>
				<label htmlFor="disableWeekends">
					<input
						id="disableWeekends"
						type="checkbox"
						onChange={(e) => {
							if (e.target.checked) {
								setWeekendDisabled(true)
							} else {
								setWeekendDisabled(false)
							}
						}}
					/>
					Disable Weekends
				</label>
				<label htmlFor="disableAll">
					<input
						id="disableAll"
						type="checkbox"
						onChange={(e) => {
							if (e.target.checked) {
								setDisabled(true)
							} else {
								setDisabled(false)
							}
						}}
					/>
					Disabled
				</label>
			</div>
			<DateRangePicker
				minDate={today}
				maxDate={todayPlus10}
				disabledDates={[todayPlus2]}
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				onDateRangeSelected={(start: DateType, end: DateType) => {
					//setStartDate(start)
					//setEndDate(end)
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
					setStartDate(date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
					setEndDate(date)
				}}
				selectedStartDate={startDate}
				selectedEndDate={endDate}
				weekStartDate={1}
				disableWeekend={weekendDisabled}
				disabled={disabled}
			/>
		</div>
	)
	//#region date-range-picker
}

//#region date-range-picker-2
function Example2() {
	const selectedStartDate = dayjs()
		.set("year", 1911)
		.set("month", 1) //month are 0-indexed in dayjs!
		.set("date", 11)
		.format(DateTypeFormatString) as DateType
	const selectedEndDate = dayjs()
		.set("year", 1911)
		.set("month", 1)
		.set("date", 16)
		.format(DateTypeFormatString) as DateType

	return (
		<>
			<p>No onChange handler, selection will not change.</p>
			<p>Initial calendar view gets derived from selected start date</p>
			<DateRangePicker
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				selectedStartDate={selectedStartDate}
				selectedEndDate={selectedEndDate}
				weekStartDate={1}
				onDateRangeSelected={(start: string, end: string) => {
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
				}}
			/>
		</>
	)
}
//#endregion date-range-picker-2

//#region date-range-picker-3
function Example3() {
	const viewDefaultMonth = 8
	const viewDefaultYear = 1985
	const viewDefaultDay = 2

	return (
		<>
			<p>No onChange handler, selection will not change.</p>
			<p>Used viewDefault properties to set the initial calendar view.</p>
			<DateRangePicker
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				viewDefaultMonth={viewDefaultMonth}
				viewDefaultYear={viewDefaultYear}
				viewDefaultDay={viewDefaultDay}
				weekStartDate={1}
				onDateRangeSelected={(start: string, end: string) => {
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
				}}
			/>
		</>
	)
}
//#endregion date-range-picker-3

function DateRangePickerShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Date Range Picker"
			{...props}
			packages={[
				{
					name: "@atlaskit/calendar",
					url: "https://atlassian.design/components/calendar/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: <Example />,
					sourceCodeExampleId: "date-range-picker",
				},
				{
					title: "Example 2",
					example: <Example2 />,
					sourceCodeExampleId: "date-range-picker-2",
				},
				{
					title: "Example 3",
					example: <Example3 />,
					sourceCodeExampleId: "date-range-picker-3",
				},
			]}
		/>
	)
}

export default DateRangePickerShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { DateTimePicker } from "@atlaskit/datetime-picker"

function DateTimePickerShowcase(props: ShowcaseProps) {
	//#region datetime-picker
	const example = (
		<div style={{ minWidth: 300 }}>
			<DateTimePicker />
		</div>
	)
	//#endregion datetime-picker

	return (
		<ShowcaseWrapperItem
			name="Date Time Picker"
			{...props}
			packages={[
				{
					name: "@atlaskit/datetime-picker",
					url: "https://atlassian.design/components/datetime-picker/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "datetime-picker",
				},
			]}
		/>
	)
}

export default DateTimePickerShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
/*import AKDropdownMenu, {
	DropdownItemCheckbox as AKDropdownItemCheckbox,
	DropdownItemGroup as AKDropdownItemGroup,
	DropdownItem as AKDropdownItem,
	DropdownItemRadioGroup as AKDropdownItemRadioGroup,
	DropdownItemRadio as AKDropdownItemRadio,
	DropdownItemCheckboxGroup as AKDropdownItemCheckboxGroup,
} from "@atlaskit/dropdown-menu"*/

import { Dropdown } from "@linked-planet/ui-kit-ts"

function DropDownMenuShowcase(props: ShowcaseProps) {
	const [radioValue, setRadioValue] = React.useState("testval1")
	const [checkBoxes, setCheckBoxes] = React.useState<string[]>([])

	const handleRadioChange = (value: string) => {
		setRadioValue(value)
	}

	const handleCheckboxChange = (value: string) => {
		if (checkBoxes.includes(value)) {
			setCheckBoxes(checkBoxes.filter((c) => c !== value))
		} else {
			setCheckBoxes([...checkBoxes, value])
		}
	}

	const akExample = (
		<>
			{/*<AKDropdownMenu trigger={"Trigger"}>
				<AKDropdownItemCheckbox
					id="item-1"
					description={"test description"}
					isSelected={checkBoxes.includes("item-1")}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-2"
					isSelected={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-3"
					isDisabled={true}
					isSelected={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</AKDropdownItemCheckbox>
				<AKDropdownItemGroup title="test group" hasSeparator>
					<AKDropdownItem
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</AKDropdownItem>
					<AKDropdownItem isSelected>
						Second dropdown item
					</AKDropdownItem>
					<AKDropdownItem isDisabled>
						Disabled dropdown item
					</AKDropdownItem>
				</AKDropdownItemGroup>
				<AKDropdownItem>After group dropdown item</AKDropdownItem>
				<AKDropdownItemRadioGroup
					id="dropdown-item-radio-it"
					hasSeparator
					title="test title"
				>
					<AKDropdownItemRadio
						id="radio-1"
						description={"another description"}
						isSelected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-2"
						isSelected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-3"
						isSelected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</AKDropdownItemRadio>
					<AKDropdownItemRadio id="radio-4" isDisabled>
						Radio Disabled
					</AKDropdownItemRadio>
				</AKDropdownItemRadioGroup>
				<AKDropdownItemCheckboxGroup id="some-id">
					<AKDropdownItemCheckbox id="checkbox-1">
						Checkbox 1
					</AKDropdownItemCheckbox>
					<AKDropdownItemCheckbox id="checkbox-2">
						Checkbox 2
					</AKDropdownItemCheckbox>
				</AKDropdownItemCheckboxGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<AKDropdownItem key={i}>long test item {i}</AKDropdownItem>
				))}
				</AKDropdownMenu>*/}
		</>
	)

	//#region dropdown-menu
	const lpExample = (
		<>
			<Dropdown.Menu
				trigger="Dropdown"
				placement={"right"}
				align="center"
			>
				<Dropdown.ItemCheckbox
					isSelected={checkBoxes.includes("item-1")}
					description={"test description"}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					isSelected={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					isDisabled={true}
					isSelected={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemGroup title="test group" hasSeparator>
					<Dropdown.Item
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</Dropdown.Item>
					<Dropdown.Item isSelected>
						Second dropdown item
					</Dropdown.Item>
					<Dropdown.Item isDisabled>
						Disabled dropdown item
					</Dropdown.Item>
				</Dropdown.ItemGroup>
				<Dropdown.Item>After group dropdown item</Dropdown.Item>
				<Dropdown.SubMenu trigger="submenu">
					<Dropdown.Item>Submenu Entry</Dropdown.Item>
				</Dropdown.SubMenu>
				<Dropdown.ItemRadioGroup hasSeparator title="test title">
					<Dropdown.ItemRadio
						value="radio-1"
						description={"another description"}
						isSelected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-2"
						isSelected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-3"
						isSelected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-4"
						isDisabled
						isSelected={radioValue === "radio-4"}
						onClick={() => handleRadioChange("radio-4")}
					>
						Radio Disabled
					</Dropdown.ItemRadio>
				</Dropdown.ItemRadioGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<Dropdown.Item key={i}>long test item {i}</Dropdown.Item>
				))}
			</Dropdown.Menu>
		</>
	)

	//#endregion dropdown-menu

	const example = (
		<div className="flex gap-4">
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Dropdown menu"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Dropdown",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "dropdown-menu",
				},
			]}
		/>
	)
}

export default DropDownMenuShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import DynamicTable from "@atlaskit/dynamic-table"
import Button from "@atlaskit/button"

function DynamicTableShowcase(props: ShowcaseProps) {
	//#region table
	const example = (
		<div style={{ minWidth: 300 }}>
			<DynamicTable
				caption=""
				head={{
					cells: [
						{
							key: "first",
							content: "First col",
							isSortable: true,
						},
						{
							key: "second",
							content: "Second col",
							isSortable: true,
						},
						{ key: "third", content: <span>Action col</span> },
					],
				}}
				rowsPerPage={3}
				rows={[
					{
						key: "1stRow",
						cells: [
							{ content: "1-1" },
							{ content: "1-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "2ndRow",
						cells: [
							{ content: "2-1" },
							{ content: "2-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "3rdRow",
						cells: [
							{ content: "3-1" },
							{ content: "3-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "4thRow",
						cells: [
							{ content: "4-1" },
							{ content: "4-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "5thRow",
						cells: [
							{ content: "5-1" },
							{ content: "5-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "6thRow",
						cells: [
							{ content: "6-1" },
							{ content: "6-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
				]}
				onSort={(item) => console.log("Sorting", item)}
				onSetPage={(pageNumber) =>
					console.log("SetPageNumber", pageNumber)
				}
			></DynamicTable>
		</div>
	)
	//#endregion table

	return (
		<ShowcaseWrapperItem
			name="Dynamic table"
			{...props}
			packages={[
				{
					name: "@atlaskit/dynamic-table",
					url: "https://atlassian.design/components/dynamic-table/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "table" },
			]}
		/>
	)
}

export default DynamicTableShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Button from "@atlaskit/button"
import EmptyState from "@atlaskit/empty-state"

function EmptyStateShowcase(props: ShowcaseProps) {
	//#region empty-state
	const example = (
		<div style={{ minWidth: 300 }}>
			<EmptyState
				header="Empty state"
				description={<span>Content of this state</span>}
				primaryAction={<Button>Dummy button</Button>}
			/>
		</div>
	)
	//#endregion empty-state

	return (
		<ShowcaseWrapperItem
			name="Empty state"
			{...props}
			packages={[
				{
					name: "@atlaskit/empty-state",
					url: "https://atlassian.design/components/empty-state/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "empty-state",
				},
			]}
		/>
	)
}

export default EmptyStateShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Flag } from "@linked-planet/ui-kit-ts"
import WarningIcon from "@atlaskit/icon/glyph/warning"

function FlagShowcase(props: ShowcaseProps) {
	//#region flag
	const example = (
		<div
			style={{
				display: "flex",
				flexDirection: "column",
				gap: "1rem",
			}}
		>
			<Flag
				title="Flag"
				icon={<WarningIcon label="" />}
				description="Action Flag"
				actions={[{ content: "Action", onClick: () => {} }]}
			/>
			<Flag
				title="Flag"
				description="Action Flag"
				actions={[{ content: "Action", onClick: () => {} }]}
				invert={false}
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
				invert={false}
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
				invert={false}
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
			/>

			<Flag
				title="Flag"
				description="Error Flag"
				appearance="error"
				invert={false}
			/>

			<Flag title="Flag" description="Error Flag" appearance="error" />

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				invert={false}
				actions={[{ content: "Action", onClick: () => {} }]}
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
			/>
		</div>
	)
	//#endregion flag

	return (
		<ShowcaseWrapperItem
			name="Flag"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://atlassian.design/components/flag/examples",
				},
			]}
			description="Drop in replacement for the @atlaskit/flag component."
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "flag" },
			]}
		/>
	)
}

export default FlagShowcase

import React, { Fragment } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Form, {
	CheckboxField,
	Field,
	Fieldset,
	FormFooter,
	FormHeader,
	FormSection,
	HelperMessage,
} from "@atlaskit/form"
import TextField from "@atlaskit/textfield"
import Button, { ButtonGroup, LoadingButton } from "@atlaskit/button"
import Checkbox from "@atlaskit/checkbox"
import Select, {
	CreatableSelect,
	OptionType,
	ValueType,
} from "@atlaskit/select"

function FormShowcase(props: ShowcaseProps) {
	//#region form
	interface TestData {
		name: string
		readonlyField: string
		disabledField: string
		surname: string
		checkboxGroup: string[]
		favoriteColor: "RED" | "BLUE"
		favoriteColorCreatable: string
	}

	const initFormData = {
		name: "Carl",
		readonlyField: "Read-only Field",
		disabledField: "Disabled Field",
		surname: "Coderrrr",
		checkboxGroup: ["Coder"],
		favoriteColor: "BLUE",
		favoriteColorCreatable: "BLUE",
	}

	const example = (
		<Form
			onSubmit={(formData: TestData) =>
				console.log("Form submit:", formData)
			}
		>
			{({ formProps }) => (
				<form {...formProps}>
					<FormHeader
						title="Give me your input"
						description="I describe this form"
					/>

					<FormSection title="Your data" description="I'm curious">
						<Field
							label="Name"
							name="name"
							defaultValue={initFormData.name}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
									<HelperMessage>Help!</HelperMessage>
								</Fragment>
							)}
						</Field>

						<Field
							label="Read-only Field"
							name="readonlyField"
							defaultValue={initFormData.readonlyField}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField
										readOnly={true}
										{...fieldProps}
									/>
								</Fragment>
							)}
						</Field>

						<Field
							label="Disabled Field"
							name="disabledField"
							defaultValue={initFormData.disabledField}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
								</Fragment>
							)}
						</Field>

						<Field
							label="Surname"
							name="surname"
							defaultValue={initFormData.surname}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
									<HelperMessage>Help!</HelperMessage>
								</Fragment>
							)}
						</Field>

						<Fieldset legend="See more info">
							{["Coder", "React fan"].map((item) => {
								return (
									<CheckboxField
										name="checkboxGroup"
										value={item}
										defaultIsChecked={initFormData.checkboxGroup.includes(
											item,
										)}
										key={item}
									>
										{({ fieldProps }) => (
											<Checkbox
												{...fieldProps}
												label={item}
											/>
										)}
									</CheckboxField>
								)
							})}
						</Fieldset>
					</FormSection>

					<FormSection title="More data" description="Tell me more">
						<Field<ValueType<OptionType>>
							label="Favorite Color"
							name="favoriteColor"
							defaultValue={{
								label: initFormData.favoriteColor,
								value: initFormData.favoriteColor,
							}}
						>
							{({ fieldProps }) => (
								<Fragment>
									<Select
										{...fieldProps}
										inputId="favoriteColor"
										options={[
											{ label: "RED", value: "RED" },
											{ label: "BLUE", value: "BLUE" },
										]}
										defaultValue={{
											label: initFormData.favoriteColor,
											value: initFormData.favoriteColor,
										}}
									/>
								</Fragment>
							)}
						</Field>

						<Field<ValueType<OptionType>>
							label="Favorite Color (Creatable)"
							name="favoriteColorCreatable"
							defaultValue={{
								label: initFormData.favoriteColor,
								value: initFormData.favoriteColor,
							}}
						>
							{({ fieldProps }) => (
								<Fragment>
									<CreatableSelect
										{...fieldProps}
										inputId="favoriteColorCreatable"
										options={[
											{ label: "RED", value: "RED" },
											{ label: "BLUE", value: "BLUE" },
										]}
										defaultValue={{
											label: initFormData.favoriteColorCreatable,
											value: initFormData.favoriteColorCreatable,
										}}
									/>
								</Fragment>
							)}
						</Field>
					</FormSection>

					<FormFooter>
						<ButtonGroup>
							<Button appearance="subtle">Reset</Button>
							<LoadingButton
								type="submit"
								appearance="primary"
								isLoading={false}
							>
								Save
							</LoadingButton>
						</ButtonGroup>
					</FormFooter>
				</form>
			)}
		</Form>
	)
	//#endregion form

	return (
		<ShowcaseWrapperItem
			name="Form"
			{...props}
			packages={[
				{
					name: "@atlaskit/form",
					url: "https://atlassian.design/components/form/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "form" },
			]}
		/>
	)
}

export default FormShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ArrowDownIcon from "@atlaskit/icon/glyph/arrow-down"
import BulletListIcon from "@atlaskit/icon/glyph/bullet-list"
import CheckCircleIcon from "@atlaskit/icon/glyph/check-circle"
import LogIcon from "@atlaskit/icon/glyph/backlog"
import RefreshIcon from "@atlaskit/icon/glyph/refresh"
import SendIcon from "@atlaskit/icon/glyph/send"
import TrashIcon from "@atlaskit/icon/glyph/trash"

function IconShowcase(props: ShowcaseProps) {
	//#region icon
	const example = (
		<div>
			<ArrowDownIcon label="" />
			<BulletListIcon label="" />
			<CheckCircleIcon label="" />
			<LogIcon label="" />
			<RefreshIcon label="" />
			<SendIcon label="" />
			<TrashIcon label="" primaryColor="red" />
		</div>
	)
	//#endregion icon

	return (
		<ShowcaseWrapperItem
			name="Icon"
			{...props}
			packages={[
				{
					name: "@atlaskit/icon",
					url: "https://atlassian.design/components/icon/icon-explorer",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "icon" },
			]}
		/>
	)
}

export default IconShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { IconSizeHelper } from "@linked-planet/ui-kit-ts"

import AddItemIcon from "@atlaskit/icon/glyph/add-item"

export default function IconSizeHelperShowcase(props: ShowcaseProps) {
	//#region iconsizehelper
	const example = (
		<>
			<IconSizeHelper size={67}>
				<AddItemIcon label="" />
			</IconSizeHelper>
			<IconSizeHelper
				size={"2.3rem"}
				className="text-brand bg-warning-bold"
				style={{
					borderRadius: "50%",
				}}
			>
				<AddItemIcon label="" />
			</IconSizeHelper>
		</>
	)
	//#endregion iconsizehelper

	return (
		<ShowcaseWrapperItem
			name="Icon Size Helper"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#IconSizeHelper",
				},
			]}
			examples={[
				{
					title: "Icon Size Helper",
					example: example,
					sourceCodeExampleId: "iconsizehelper",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { InlineMessage } from "@linked-planet/ui-kit-ts"

export default function InlineMessageShowcase(props: ShowcaseProps) {
	//#region inlinemessage
	const example = (
		<>
			<InlineMessage
				message={{ text: "This is a standard inline message." }}
			/>
			<InlineMessage
				message={{
					text: "This is a success inline message.",
					appearance: "success",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a danger inline message.",
					appearance: "danger",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a warning inline message.",
					appearance: "warning",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is an information inline message.",
					appearance: "information",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a discovery inline message.",
					appearance: "discovery",
				}}
			/>
			<hr />
			<InlineMessage
				message={{
					text: "This is an information message with a timeout.",
					timeOut: 5,
					appearance: "information",
				}}
				openingDirection="topdown"
			/>
			<InlineMessage
				message={{
					text: "This is an discovery message with a timeout and bottom up removal.",
					appearance: "discovery",
				}}
				openingDirection="bottomup"
			/>
			<InlineMessage
				message={{
					text: "This is a not removable message.",
					appearance: "information",
				}}
				removable={false}
			/>
		</>
	)
	//#endregion inlinemessage

	return (
		<ShowcaseWrapperItem
			name="Inline Message"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "inlinemessage",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ReactJoyride from "react-joyride"
import Button, { ButtonGroup } from "@atlaskit/button"
import { token } from "@atlaskit/tokens"

function JoyrideShowcase(props: ShowcaseProps) {
	//#region joyride
	// fix missing global
	// @ts-expect-error global is not defined
	if (!window.global) window.global = window

	const [isJoyrideActive, setIsJoyrideActive] = useState(false)
	const example = (
		<>
			<div
				style={{
					color: token("color.text.warning", "#990"),
					backgroundColor: token("color.background.neutral", "#fff"),
					padding: "1rem",
				}}
			>
				If you get the error &apos;global is not defined&apos; you have
				to add the following:
				<br></br>
				<div>
					<pre>if (!window.global) window.global = window</pre>
				</div>
			</div>
			<div>
				<ButtonGroup>
					<Button
						isSelected={isJoyrideActive}
						onClick={() => setIsJoyrideActive(true)}
					>
						Start Tour
					</Button>
					<Button className="joyride-first">First step</Button>
					<Button className="joyride-second">Second step</Button>
					<Button className="joyride-third">Third step</Button>
				</ButtonGroup>

				<ReactJoyride
					run={isJoyrideActive}
					continuous={true}
					showProgress={true}
					disableScrolling={false}
					scrollToFirstStep={true}
					scrollOffset={220}
					locale={{
						back: "Zurück",
						close: "Schließen",
						last: "Fertig",
						next: "Weiter",
						open: "Öffnen",
						skip: "Überspringen",
					}}
					callback={(joyrideState) => {
						switch (joyrideState.action) {
							case "close":
								setIsJoyrideActive(false)
								break
							case "reset":
								setIsJoyrideActive(false)
								break
						}
					}}
					steps={[
						{
							title: "First step title",
							target: ".joyride-first",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>First step content...</span>,
						},
						{
							title: "Second step title",
							target: ".joyride-second",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Second step content...</span>,
						},
						{
							title: "Third step title",
							target: ".joyride-third",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Third step content...</span>,
						},
					]}
				/>
			</div>
		</>
	)
	//#endregion joyride

	return (
		<ShowcaseWrapperItem
			name="Joyride"
			{...props}
			packages={[
				{
					name: "react-joyride",
					url: "https://docs.react-joyride.com/",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "joyride" },
			]}
		/>
	)
}

export default JoyrideShowcase

import React, { useCallback, useEffect, useMemo } from "react"
import { useState } from "react"
import dayjs, { Dayjs } from "dayjs"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { LPTimeTable } from "@linked-planet/ui-kit-ts"
import type {
	TimeSlotBooking,
	TimeTableEntry,
	TimeTableGroup,
} from "@linked-planet/ui-kit-ts"
import CreateNewTimeTableItemDialog from "@linked-planet/ui-kit-ts/components/timetable/CreateNewItem"
import ChevronLeftIcon from "@atlaskit/icon/glyph/chevron-left"
import ChevronRightIcon from "@atlaskit/icon/glyph/chevron-right"
import ChevronDownIcon from "@atlaskit/icon/glyph/chevron-down"
import Button from "@atlaskit/button"

import { useTranslation } from "@linked-planet/ui-kit-ts/localization/LocaleContext"
import type { TranslatedTimeTableMessages } from "@linked-planet/ui-kit-ts/components/timetable/TimeTableMessageContext"
import { TimeTableViewType } from "@linked-planet/ui-kit-ts/components/timetable/LPTimeTable"

//import "@linked-planet/ui-kit-ts/dist/style.css" //-> this is not necessary in this setup, but in the real library usage

const debounceTimeout = 500
let debounceTimeoutCurrent: number | undefined = undefined
function debounceHelper(callback: () => void) {
	if (debounceTimeoutCurrent) {
		clearTimeout(debounceTimeoutCurrent)
	}
	debounceTimeoutCurrent = setTimeout(() => {
		callback()
	}, debounceTimeout)
}

type ExampleGroup = TimeTableGroup

type ExampleItem = TimeSlotBooking

const exampleEntries: TimeTableEntry<ExampleGroup, ExampleItem>[] = [
	{
		group: {
			title: "Empty Group",
		},
		items: [],
	},
	{
		group: {
			title: "Group 1",
			subtitle: "Group 1 description",
		},
		items: [
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 1-3",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				title: "Item 1-3-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(1, "day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				title: "Item 1-4",
			},
			{
				// expected to be on group row 1
				startDate: dayjs().startOf("day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-5",
			},
			{
				// expected to be on group row 2
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				title: "Item 1-6",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2-2",
			},
		],
	},
	{
		group: {
			title: "Group 2",
			subtitle: "Group 2 description",
		},
		items: [
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(20, "minutes"),
				title: "Item 2-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(21, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(40, "minutes"),
				title: "Item 2-2",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(41, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(50, "minutes"),
				title: "Item 2-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(51, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(50, "minutes"),
				title: "Item 2-3-1",
			},
			{
				startDate: dayjs().startOf("day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(10, "hours"),
				title: "Item 2-4",
			},
		],
	},
	{
		group: {
			title: "Group 3",
			subtitle: "Group 3 description",
		},
		items: [
			{
				// this entry is totally before the available slots of the day
				startDate: dayjs().startOf("day").add(5, "hours"),
				endDate: dayjs().startOf("day").add(6, "hours"),
				title: "Item 3-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(2, "days").add(9, "hours"),
				title: "Item 3-2",
			},
			{
				// this entry is totally after the available slots of the day
				startDate: dayjs().startOf("day").add(17, "hours"),
				endDate: dayjs().startOf("day").add(20, "hours"),
				title: "Item 3-3",
			},
		],
	},
	{
		group: {
			title: "Group 4",
			subtitle: "Group 4 description",
		},
		items: [
			{
				// this case ends after the end of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(16, "hours"),
				title: "Item 4-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(1, "day")
					.add(13.75, "hours"),
				title: "Item 4-2",
			},
			{
				// this case starts before the start of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(7.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "days")
					.add(13.75, "hours"),
				title: "Item 4-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(10.2, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "day")
					.add(13.75, "hours"),
				title: "Item 4-4",
			},
			{
				startDate: dayjs().startOf("day").add(-1, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 4-4-5",
			},
		],
	},
	{
		group: {
			title: "Group 5",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(-2, "day"),
				endDate: dayjs().startOf("day").add(7, "days"),
				title: "Item 5-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(12, "hours"),
				title: "Item 5-2",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"),
				endDate: dayjs().startOf("day").add(1, "day"),
				title: "Item 5-3",
			},
		],
	},
	{
		group: {
			title: "Group 6 (Directly Connected)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs().startOf("day").add(12, "hours"),
				title: "Item 6-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 6-1-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"),
				endDate: dayjs().startOf("day").add(2, "day"),
				title: "Item 6-2-1",
			},
			{
				startDate: dayjs().startOf("day").add(2, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 6-2-2",
			},
		],
	},
	{
		group: {
			title: "Group 7 (Full Day)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day"),
				endDate: dayjs().endOf("day"),
				title: "Item 7-1",
			},
		],
	},
]

function createTestItems(
	startDate: Dayjs,
	endDate: Dayjs,
	groupNumber: number,
) {
	const itemCount = Math.round(Math.random() * 10)
	const ret = []
	for (let i = 0; i < itemCount; i++) {
		const addDays = Math.round(
			Math.random() * endDate.diff(startDate, "days"),
		)
		const addStartMinutes = Math.round(Math.random() * 3 * 60)
		const addEndMinutes = Math.round(Math.random() * 6 * 60)
		const itemStartDate = startDate
			.add(addDays, "days")
			.add(addStartMinutes, "minutes")
		const itemEndDate = itemStartDate.add(addEndMinutes, "minutes")
		ret.push({
			startDate: itemStartDate,
			endDate: itemEndDate,
			title: `Random Item ${groupNumber}-${i}`,
		})
	}
	return ret
}

function createTestEntries(
	startDate: Dayjs,
	endDate: Dayjs,
	currentEntries: TimeTableEntry<ExampleGroup, ExampleItem>[],
) {
	if (startDate.isSame(startDateInitial) && endDate.isSame(endDateInitial)) {
		return exampleEntries
	}

	const groupWithItems = currentEntries.map((group, g) => {
		const newGroup: TimeTableEntry<ExampleGroup, ExampleItem> = {
			group: group.group,
			items: createTestItems(startDate, endDate, g),
		}
		return newGroup
	})

	return groupWithItems
}

function createMoreTestGroups(
	startDate: Dayjs,
	endDate: Dayjs,
	count: number,
	startCount: number,
) {
	const newGroups: TimeTableEntry<ExampleGroup, ExampleItem>[] = []
	for (let i = 0; i < count; i++) {
		const groupNumber = startCount + i
		newGroups.push({
			group: {
				title: `Group ${groupNumber}`,
				subtitle: "random",
			},
			items: createTestItems(startDate, endDate, groupNumber),
		})
	}
	return newGroups
}

const startDateInitial = dayjs().startOf("day").add(-1, "day").add(8, "hours")
const endDateInitial = dayjs().startOf("day").add(5, "days").add(16, "hours")

function Example() {
	//#region timetable

	const [timeSteps, setTimeSteps] = useState(110)
	const [timeStepsInputValue, setTimeStepsInputValue] = useState(110)
	const [groupHeaderColumnWidth, setGroupHeaderColumnWidth] = useState(150)
	const [columnWidth, setColumnWidth] = useState(70)
	const [disabledWeekendInteractions, setDisabledWeekendInteractions] =
		useState(true)
	const [showTimeSlotHeader, setShowTimeSlotHeader] = useState(true)
	const [hideOutOfDayRangeMarkers, setHideOutOfDayRangeMarkers] =
		useState(false)

	const [timeFrame, setTimeFrame] = useState({
		startDate: startDateInitial,
		endDate: endDateInitial,
	})

	const [selectedTimeSlotItem, setSelectedTimeSlotItem] = useState<
		ExampleItem | undefined
	>()

	const [entries, setEntries] = useState(exampleEntries)

	const onTimeSlotItemClickCB = useCallback(
		(group: ExampleGroup, item: ExampleItem) => {
			setSelectedTimeSlotItem((prev) => {
				if (prev === item) {
					return undefined
				}
				return item
			})
		},
		[],
	)

	//#region time frame and groups pagination
	const requestNextTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const nextStartDate = timeFrame.startDate.add(dayDiff, "days")
		const nextEndDate = timeFrame.endDate.add(dayDiff, "days")
		setTimeFrame({
			startDate: nextStartDate,
			endDate: nextEndDate,
		})
		const newEntries = createTestEntries(
			nextStartDate,
			nextEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestPrevTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const prevStartDate = timeFrame.startDate.add(-dayDiff, "days")
		const prevEndDate = timeFrame.endDate.add(-dayDiff, "days")
		setTimeFrame({
			startDate: prevStartDate,
			endDate: prevEndDate,
		})
		const newEntries = createTestEntries(
			prevStartDate,
			prevEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestMoreEntriesCB = () => {
		const missing = entries.length + 10 - exampleEntries.length
		const missingGroups = createMoreTestGroups(
			timeFrame.startDate,
			timeFrame.endDate,
			missing,
			exampleEntries.length,
		)
		setEntries([...exampleEntries, ...missingGroups])
	}
	//#endregion

	const [showCreateNewItemModal, setShowCreateNewItemModal] = useState(false)
	const [selectedTimeRange, setSelectedTimeRange] = useState<
		{ startDate: Dayjs; endDate: Dayjs; group: TimeTableGroup } | undefined
	>()
	const [clearSelectedTimeRangeCB, setClearSelectedTimeRangeCB] =
		useState<() => void>()
	const [disableTimeRangeSelection, setDisableTimeRangeSelection] =
		useState(false)

	useEffect(() => {
		console.log("SELECTED TIME RANGE", selectedTimeRange)
	}, [selectedTimeRange])

	const onCreateNewItemConfirmCB = useCallback(
		(group: TimeTableGroup, item: TimeSlotBooking) => {
			setShowCreateNewItemModal(false)
			setEntries((prev) => {
				const groupIndex = prev.findIndex((e) => e.group === group)
				if (groupIndex === -1) {
					console.error("group not found", group)
					return prev
				}
				const newEntries = [...prev]
				const newGroup = { ...newEntries[groupIndex] }
				const newGroupItems = [...newGroup.items]
				newGroupItems.push(item)
				newGroup.items = newGroupItems
				newEntries[groupIndex] = newGroup
				// clears the selected time range in the table using a callback set by the selected time slots context in the time table
				if (clearSelectedTimeRangeCB) {
					clearSelectedTimeRangeCB()
				}
				return newEntries
			})
			setSelectedTimeRange(undefined)
		},
		[clearSelectedTimeRangeCB],
	)

	const [viewType, setViewType] = useState<TimeTableViewType>("hours")

	const translation = useTranslation() as TranslatedTimeTableMessages
	const nowOverwrite = undefined //startDate.add( 1, "day" ).add( 1, "hour" ).add( 37, "minutes" );

	return (
		<>
			<div
				style={{
					display: "flex",
					gap: "2rem",
				}}
			>
				{/* time table setup values */}
				<div
					style={{
						display: "grid",
						gridTemplateColumns: "auto auto",
						gap: "0.5rem",
						alignItems: "start",
					}}
				>
					<label style={{ marginRight: "1rem" }} htmlFor="startdate">
						Start:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.startDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: dayjs(e.target.value),
								endDate: timeFrame.endDate,
							})
						}}
					/>
					<label style={{ marginRight: "1rem" }} htmlFor="enddate">
						End:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.endDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: timeFrame.startDate,
								endDate: dayjs(e.target.value),
							})
						}}
					/>
					<label
						htmlFor="timesteps"
						style={{
							marginRight: "1rem",
						}}
					>
						Time Steps [min]:
					</label>
					<input
						type="number"
						name="timesteps"
						value={timeStepsInputValue}
						step={10}
						min={10}
						max={1200}
						onChange={(e) => {
							const val = parseInt(e.target.value)
							setTimeStepsInputValue(val)
							debounceHelper(() => setTimeSteps(val))
						}}
						style={{
							width: "4rem",
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
				</div>
				{/* time table layout */}
				<div
					style={{
						display: "grid",
						gridTemplateColumns: "auto auto",
						gap: "0.5rem",
						alignItems: "start",
					}}
				>
					<label
						htmlFor="firstcolwidth"
						style={{
							marginRight: "1rem",
						}}
					>
						Group Header Width [px]:
					</label>
					<input
						type="number"
						name="firstcolwidth"
						value={groupHeaderColumnWidth}
						step={10}
						min={10}
						max={300}
						onChange={(e) =>
							debounceHelper(() =>
								setGroupHeaderColumnWidth(
									parseInt(e.target.value),
								),
							)
						}
						style={{
							width: "4rem",
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
					<label
						htmlFor="colwidth"
						style={{
							marginRight: "1rem",
						}}
					>
						Column Width [px]:
					</label>
					<input
						type="number"
						name="colwidth"
						value={columnWidth}
						step={10}
						min={10}
						max={1000}
						onChange={(e) =>
							debounceHelper(() =>
								setColumnWidth(parseInt(e.target.value)),
							)
						}
						style={{
							width: "4rem",
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
				</div>
				{/* time table settings */}
				<div
					style={{
						display: "grid",
						gridTemplateColumns: "auto auto",
						gap: "0.5rem",
						alignItems: "start",
					}}
				>
					<label
						htmlFor="diableweekends"
						style={{
							marginRight: "1rem",
						}}
					>
						Disable Weekend Interactions:
					</label>
					<input
						type="checkbox"
						name="disableweekends"
						checked={disabledWeekendInteractions}
						onChange={(e) =>
							setDisabledWeekendInteractions(e.target.checked)
						}
						style={{
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
					<label
						htmlFor="showtimeslotheader"
						style={{
							marginRight: "1rem",
						}}
					>
						Show Time Slot Header:
					</label>
					<input
						type="checkbox"
						name="showtimeslotheader"
						checked={showTimeSlotHeader}
						onChange={(e) => {
							setShowTimeSlotHeader(e.target.checked)
						}}
						style={{
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
					<label
						htmlFor="hideoutofdayrange"
						style={{
							marginRight: "1rem",
						}}
					>
						Hide Out Of Day Range Markers:
					</label>
					<input
						type="checkbox"
						name="hideoutofdayrange"
						checked={hideOutOfDayRangeMarkers}
						onChange={(e) => {
							setHideOutOfDayRangeMarkers(e.target.checked)
						}}
						style={{
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
					<label
						htmlFor="disabletimerangeselection"
						style={{
							marginRight: "1rem",
						}}
					>
						Disable Time Range Selection
					</label>
					<input
						type="checkbox"
						name="disabletimerangeselection"
						checked={disableTimeRangeSelection}
						onChange={(e) => {
							setDisableTimeRangeSelection(e.target.checked)
						}}
						style={{
							textAlign: "center",
							marginRight: "0.25rem",
						}}
					/>
					<label
						htmlFor="viewtype"
						style={{
							marginRight: "1rem",
						}}
					>
						View Type
					</label>
					<select
						name="viewtype"
						onChange={(e) =>
							setViewType(e.target.value as TimeTableViewType)
						}
						value={viewType}
					>
						<option value="hours">Hours</option>
						<option value="days">Days</option>
						<option value="weeks">Weeks</option>
						<option value="months">Months</option>
						<option value="years">Years</option>
					</select>
				</div>
			</div>
			<div
				style={{
					display: "flex",
					alignItems: "flex-start",
				}}
			>
				<Button
					onClick={requestPrevTimeFrameCB}
					title="Previous Time Frame"
					style={{
						margin: "0 0.5rem 0.5rem 0",
					}}
				>
					<ChevronLeftIcon label="prevtimeframe" />
				</Button>
				<Button
					onClick={requestNextTimeFrameCB}
					title="Next Time Frame"
					style={{
						margin: "0 0.5rem 0.5rem 0",
					}}
				>
					<ChevronRightIcon label="nexttimeframe" />
				</Button>
				<Button
					isDisabled={!selectedTimeRange}
					onClick={() => {
						setShowCreateNewItemModal(true)
					}}
					title="Create New Item"
					style={{
						margin: "0 0.5rem 0.5rem 0",
					}}
				>
					Create New Item
				</Button>
			</div>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={groupHeaderColumnWidth}
					columnWidth={columnWidth}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					timeStepsMinutes={timeSteps}
					entries={entries}
					selectedTimeSlotItem={selectedTimeSlotItem}
					/*renderGroup={ Group }
					renderTimeSlotItem={ Item }
					renderPlaceHolder={ ( props: PlaceholderItemProps<ExampleGroup> ) => (
						<div
							style={ { height: props.height, backgroundColor: "rgba(0,0,0,0.1)", textAlign: "center" } }
							onClick={ () => props.clearTimeRangeSelectionCB() }
						>
							Placeholder
						</div>
					) }*/
					onTimeSlotItemClick={onTimeSlotItemClickCB}
					nowOverwrite={nowOverwrite}
					timeTableMessages={translation}
					onTimeRangeSelected={
						!disableTimeRangeSelection
							? setSelectedTimeRange
							: undefined
					}
					setClearSelectedTimeRangeCB={setClearSelectedTimeRangeCB}
					disableWeekendInteractions={disabledWeekendInteractions}
					showTimeSlotHeader={showTimeSlotHeader}
					hideOutOfRangeMarkers={hideOutOfDayRangeMarkers}
					viewType={viewType}
				/>
			</div>
			<Button title="Load more entries." onClick={requestMoreEntriesCB}>
				<ChevronDownIcon label="entryloader" />
			</Button>
			{showCreateNewItemModal && selectedTimeRange && (
				<CreateNewTimeTableItemDialog
					group={selectedTimeRange.group}
					startDate={selectedTimeRange.startDate}
					endDate={selectedTimeRange.endDate}
					onCancel={() => setShowCreateNewItemModal(false)}
					onConfirm={onCreateNewItemConfirmCB}
					timeSteps={timeSteps}
				/>
			)}
		</>
	)

	//endregion timetable
}

function ExampleCalendar() {
	//#region timetabledays
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("day"),
			endDate: endDateInitial.startOf("day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages
	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					showTimeSlotHeader={false}
					viewType={"days"}
				/>
			</div>
		</>
	)

	//#endregion timetabledays
}

function ExampleMonthCalendar() {
	//region timetablemonths
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("month").subtract(1, "day"),
			endDate: endDateInitial.endOf("month").add(1, "day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages

	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					viewType={"months"}
					showTimeSlotHeader={false}
				/>
			</div>
		</>
	)

	//#endregion timetablemonths
}

export default function TimeTableShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Time Table"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <Example />,
					sourceCodeExampleId: "timetable",
				},
				{
					title: "Days",
					example: <ExampleCalendar />,
					sourceCodeExampleId: "timetabledays",
				},
				{
					title: "Months",
					example: <ExampleMonthCalendar />,
					sourceCodeExampleId: "timetablemonths",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { LoadingSpinner } from "@linked-planet/ui-kit-ts"

export default function LoadingSpinnerShowcase(props: ShowcaseProps) {
	//#region loadingspinner
	const example = (
		<div className="flex gap-4">
			<LoadingSpinner />
			<LoadingSpinner size="xsmall" />
			<LoadingSpinner size="small" />
			<LoadingSpinner size="medium" />
			<LoadingSpinner size="large" />
			<LoadingSpinner size="xlarge" />
		</div>
	)
	//#endregion loadingspinner

	return (
		<ShowcaseWrapperItem
			name="Loading Spinner"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "loadingspinner",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Lozenge from "@atlaskit/lozenge"

function LozengeShowcase(props: ShowcaseProps) {
	//#region lozenge
	const example = (
		<>
			<Lozenge>First lozenge</Lozenge>
			<Lozenge appearance="new">Colored lozenge</Lozenge>
			<Lozenge appearance="success" isBold>
				Colored bold lozenge
			</Lozenge>
			<Lozenge appearance="success" isBold={false}>
				Colored non-bold lozenge
			</Lozenge>
		</>
	)
	//#endregion lozenge

	return (
		<ShowcaseWrapperItem
			name="Lozenge"
			{...props}
			packages={[
				{
					name: "@atlaskit/lozenge",
					url: "https://atlassian.design/components/lozenge/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "lozenge",
				},
			]}
		/>
	)
}

export default LozengeShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { HeadingItem, MenuGroup } from "@atlaskit/menu"
import { SimpleTag } from "@linked-planet/ui-kit-ts"
import { Badge } from "@linked-planet/ui-kit-ts"

function MenuShowcase(props: ShowcaseProps) {
	//#region menu
	const [items] = useState(["Menu A", "Menu B", "Menu C"])
	const [selectedItems, setSelectedItems] = useState(["Menu A"])
	const example = (
		<div>
			<MenuGroup>
				<HeadingItem>
					<h4>Filter</h4>
				</HeadingItem>

				{items.map((item) => {
					return (
						<a
							key={item}
							onClick={() => {
								if (selectedItems.includes(item)) {
									setSelectedItems([
										...selectedItems.filter(
											(it) => it != item,
										),
									])
								} else {
									setSelectedItems([...selectedItems, item])
								}
							}}
						>
							<SimpleTag
								color={
									selectedItems.includes(item)
										? "grey"
										: "standard"
								}
								text={item}
							/>
							<Badge appearance="default">0</Badge>
						</a>
					)
				})}
			</MenuGroup>
		</div>
	)
	//#endregion menu

	return (
		<ShowcaseWrapperItem
			name="Menu"
			{...props}
			packages={[
				{
					name: "@atlaskit/menu",
					url: "https://atlassian.design/components/menu/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "menu" },
			]}
		/>
	)
}

export default MenuShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Button, { ButtonGroup } from "@atlaskit/button"
import CrossIcon from "@atlaskit/icon/glyph/cross"
import Modal, {
	ModalBody,
	ModalFooter,
	ModalHeader,
	ModalTitle,
	ModalTransition,
} from "@atlaskit/modal-dialog"

function ModalShowcase(props: ShowcaseProps) {
	//#region modal
	const [isModalActive, setIsModalActive] = useState(false)
	const example = (
		<div>
			<Button onClick={() => setIsModalActive(true)}>Show modal</Button>

			{isModalActive && (
				<ModalTransition>
					<Modal onClose={() => setIsModalActive(false)}>
						<ModalHeader>
							<ModalTitle>Sample Modal</ModalTitle>
							<Button
								appearance="link"
								onClick={() => setIsModalActive(false)}
							>
								<CrossIcon
									label="Close popup"
									primaryColor="#000"
								/>
							</Button>
						</ModalHeader>

						<ModalBody>
							<p>This is the body of the modal.</p>
						</ModalBody>

						<ModalFooter>
							<ButtonGroup>
								<Button
									autoFocus={true}
									appearance="primary"
									onClick={() => setIsModalActive(false)}
								>
									Close
								</Button>
							</ButtonGroup>
						</ModalFooter>
					</Modal>
				</ModalTransition>
			)}
		</div>
	)
	//#endregion modal

	return (
		<ShowcaseWrapperItem
			name="Modal"
			{...props}
			packages={[
				{
					name: "@atlaskit/modal-dialog",
					url: "https://atlassian.design/components/modal-dialog/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "modal" },
			]}
		/>
	)
}

export default ModalShowcase

import React from "react"
import { Dropdown, PageLayout } from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import SettingsIcon from "@atlaskit/icon/glyph/settings"

function PageLayoutExample() {
	//#region pagelayout
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle
						titleMenu={[
							<div key="0">Menu Item 1</div>,
							<div key="1">Menu Item 2</div>,
							<Dropdown.SubMenu
								key="sub"
								trigger="submenu"
								chevronSide="left"
							>
								<Dropdown.Item>Submenu Entry</Dropdown.Item>
							</Dropdown.SubMenu>,
							<Dropdown.ItemGroup key="4" hasSeparator>
								<Dropdown.ItemCheckbox>
									Check 1
								</Dropdown.ItemCheckbox>
								<Dropdown.ItemCheckbox>
									Check 2
								</Dropdown.ItemCheckbox>
							</Dropdown.ItemGroup>,
							<Dropdown.ItemRadioGroup key="5" hasSeparator>
								<Dropdown.ItemRadio value="r1">
									Radio 1
								</Dropdown.ItemRadio>
								<Dropdown.ItemRadio value="r2">
									Radio 2
								</Dropdown.ItemRadio>
							</Dropdown.ItemRadioGroup>,
						]}
					>
						<h1>Page Header Title</h1>
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						<h2>Page Header Sub Title</h2>
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<div>Page Header Line</div>
						<div>Page Header Line</div>
						<div>Page Header Line</div>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyContent>
						<div>TEST</div>
						{Array(100)
							.fill(null)
							.map((_, i) => (
								<div key={i}>Page Body Content {i}</div>
							))}
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayout
}

function PageLayoutExampleWithBodyHeader() {
	//#region pagelayoutwithbodyheader
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader shadow={false}>
					<PageLayout.PageHeaderTitle>
						<h1>Page Header Title</h1>
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						<h2>Page Header Sub Title</h2>
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<div>Page Header Line</div>
						<div>Page Header Line</div>
						<div>Page Header Line</div>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyHeader>
						Body Header
					</PageLayout.PageBodyHeader>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayoutwithbodyheader
}

export default function PageLayoutShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="PageLayout"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Page Layout",
					example: <PageLayoutExample />,
					sourceCodeExampleId: "pagelayout",
				},
				{
					title: "Page Layout With Body Header",
					example: <PageLayoutExampleWithBodyHeader />,
					sourceCodeExampleId: "pagelayoutwithbodyheader",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Pagination from "@atlaskit/pagination"

function PaginationShowcase(props: ShowcaseProps) {
	//#region pagination
	const [selectedPage, setSelectedPage] = useState(0)
	const example = (
		<Pagination
			pages={[...Array(10)].map((item, index) => {
				return index + 1
			})}
			defaultSelectedIndex={0}
			max={10}
			selectedIndex={selectedPage}
			onChange={(event, page) => setSelectedPage(page - 1)}
		/>
	)
	//#endregion pagination

	return (
		<ShowcaseWrapperItem
			name="Pagination"
			{...props}
			packages={[
				{
					name: "@atlaskit/pagination",
					url: "https://atlassian.design/components/pagination/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "pagination",
				},
			]}
		/>
	)
}

export default PaginationShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Popup } from "@atlaskit/popup"
import Button from "@atlaskit/button"

function PopupShowcase(props: ShowcaseProps) {
	//#region popup
	const [isPopupActive, setIsPopupActive] = useState(false)
	const example = (
		<Popup
			isOpen={isPopupActive}
			placement="top"
			onClose={() => setIsPopupActive(false)}
			trigger={() => (
				<Button
					onClick={() => setIsPopupActive(true)}
					isSelected={isPopupActive}
				>
					OpenPopup
				</Button>
			)}
			content={() => (
				<div style={{ padding: "15px 15px" }}>
					<span>Popup content</span>
				</div>
			)}
		/>
	)
	//#endregion popup

	return (
		<ShowcaseWrapperItem
			name="Popup"
			{...props}
			packages={[
				{
					name: "@atlaskit/popup",
					url: "https://atlassian.design/components/popup/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "popup" },
			]}
		/>
	)
}

export default PopupShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Select from "@atlaskit/select"

function SelectShowcase(props: ShowcaseProps) {
	//#region select
	const example1 = (
		<div style={{ minWidth: 300 }}>
			<Select
				inputId="select-1"
				options={[
					{ label: "First option", value: "first" },
					{ label: "Second option", value: "second" },
				]}
			/>
		</div>
	)
	//#endregion select
	//#region select2
	const example2 = (
		<div style={{ minWidth: 300 }}>
			<Select
				inputId="select-s"
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
			/>
		</div>
	)
	//#endregion select2

	return (
		<ShowcaseWrapperItem
			name="Select"
			{...props}
			packages={[
				{
					name: "@atlaskit/select",
					url: "https://atlassian.design/components/select/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "select",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "select2",
				},
			]}
		/>
	)
}

export default SelectShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { LeftSidebar } from "@linked-planet/ui-kit-ts"
export function SidebarShowcase(props: ShowcaseProps) {
	//#region sidebar
	const example = (
		<div className="h-[300px]">
			<LeftSidebar widthVariable="--leftSidebarWidth2">
				<div>Sidebar Entry</div>
			</LeftSidebar>
		</div>
	)
	//#endregion sidebar

	return (
		<ShowcaseWrapperItem
			name="Sidebar"
			description="A sidebar component as replacement for the left sidebar of the page layout. WIP"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Sidebar",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "sidbear" },
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TableTree, {
	Cell,
	Header,
	Headers,
	Row,
	Rows,
} from "@atlaskit/table-tree"

function TableTreeShowcase(props: ShowcaseProps) {
	//#region tabletree
	interface BookData {
		title: string
		description: string
	}

	interface TableTreeItem {
		id: string
		title: string
		description: string
		children?: TableTreeItem[]
	}

	const bookDataTree = [
		{
			id: "1",
			content: { title: "It is lonely at the top.", description: "1" },
			hasChildren: true,
			children: [
				{
					id: "1.1",
					content: {
						title: "Look at me! I am nested.",
						description: "1.1",
					},
					hasChildren: true,
					children: [
						{
							id: "1.1.1",
							content: {
								title: "I am deeply nested.",
								description: "1.1.1",
							},
							hasChildren: false,
						},
					],
				},
			],
		},
		{
			id: "2",
			content: { title: "Typescript is fun", description: "2" },
			hasChildren: false,
		},
	]

	const bookDataTree2 = [
		{
			id: "1",
			title: "It is lonely at the top.",
			description: "1",
			children: [
				{
					id: "1.1",
					title: "Look at me! I am nested.",
					description: "1.1",
					children: [
						{
							id: "1.1.1",
							title: "I am deeply nested.",
							description: "1.1.1",
						},
					],
				},
			],
		},
		{
			id: "2",
			title: "Typescript is fun",
			description: "2",
		},
	]
	const example1 = (
		<TableTree
			headers={["Title", "Numbering"]}
			columns={[
				(bookData: BookData) => <span>{bookData.title}</span>,
				(bookData: BookData) => <span>{bookData.description}</span>,
			]}
			columnWidths={[300, 100]}
			items={bookDataTree}
		/>
	)
	//#endregion tabletree

	//#region tabletree2
	const example2 = (
		<TableTree>
			<Headers>
				<Header
					width="400px"
					onClick={() => window.alert("OnClick Chapter Title Header")}
				>
					Chapter Title (Click me)
				</Header>
				<Header width="100px">Numbering</Header>
			</Headers>
			<Rows
				items={bookDataTree2}
				render={(data: TableTreeItem) => (
					<Row
						itemId={data.description}
						items={data.children}
						hasChildren={
							data?.children != undefined &&
							data.children.length > 0
						}
						isDefaultExpaned={false}
					>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert("onClick: " + data.title)
								}
							>
								{data.title}
							</div>
						</Cell>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert("onClick: " + data.description)
								}
							>
								{data.description}
							</div>
						</Cell>
					</Row>
				)}
			/>
		</TableTree>
	)
	//#endregion tabletree2

	return (
		<ShowcaseWrapperItem
			name="TableTree"
			{...props}
			packages={[
				{
					name: "@atlaskit/table-tree",
					url: "https://atlassian.design/components/table-tree",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "tabletree",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "tabletree2",
				},
			]}
		/>
	)
}

export default TableTreeShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
/*import AKTabs, {
	Tab as AKTab,
	TabList as AKTabList,
	TabPanel as AKTabPanel,
} from "@atlaskit/tabs"*/

import { Tabs, TabList, TabPanel, Tab, Button } from "@linked-planet/ui-kit-ts"

function AutomaticTabsValue() {
	//#region tabs_automatic_value
	return (
		<Tabs>
			<TabList>
				<Tab>Tab 1</Tab>
				<Tab>Tab 2</Tab>
			</TabList>
			<TabPanel>
				<span>First Content</span>
			</TabPanel>
			<TabPanel>
				<span>Second Content</span>
			</TabPanel>
		</Tabs>
	)
	//#endregion tabs_automatic_value
}

function ExampleLabels() {
	const akExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			{/*<AKTabs id="tab-example" defaultSelected={1}>
				<AKTabList>
					<AKTab>
						<div>Tab 1</div>
					</AKTab>
					<AKTab>Tab 2</AKTab>
				</AKTabList>
				<AKTabPanel>
					<span>First Content</span>
				</AKTabPanel>
				<AKTabPanel>
					<span>Second Content</span>
				</AKTabPanel>
	</AKTabs>*/}
		</div>
	)

	//#region tabs_labels
	const lpExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			<Tabs defaultSelected="tab2">
				<TabList>
					<Tab label="Tab 1" />
					<Tab label="tab2">Tab 2</Tab>
				</TabList>
				<TabPanel label="Tab 1">
					<span>First Content</span>
				</TabPanel>
				<TabPanel label="tab2">
					<span>Second Content</span>
				</TabPanel>
			</Tabs>
		</div>
	)
	//#endregion tabs_labels

	return (
		<>
			{akExample}
			{lpExample}
		</>
	)
}

function ExampleControlled() {
	//#region tabscontrolled
	const [selected, setSelected] = useState(0)
	const lpExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			<Tabs
				selected={selected}
				onChange={(t: string) => setSelected(parseInt(t))}
			>
				<TabList>
					<Tab label={0}>
						<div>Tab 1</div>
					</Tab>
					<Tab label={1}>Tab 2</Tab>
				</TabList>
				<TabPanel label={0}>
					<span>First Content</span>
				</TabPanel>
				<TabPanel label={1}>
					<span>Second Content</span>
				</TabPanel>
			</Tabs>
		</div>
	)
	//#endregion tabscontrolled

	const akExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			{/*<AKTabs
				id="tab-example-controlled"
				selected={selected}
				onChange={setSelected}
			>
				<AKTabList>
					<AKTab>
						<div>Tab 1</div>
					</AKTab>
					<AKTab>Tab 2</AKTab>
				</AKTabList>
				<AKTabPanel>
					<span>First Content</span>
				</AKTabPanel>
				<AKTabPanel>
					<span>Second Content</span>
				</AKTabPanel>
	</AKTabs>*/}
		</div>
	)

	return (
		<>
			<Button
				onClick={() => {
					setSelected(1)
				}}
			>
				Select second tab
			</Button>
			{akExample}
			{lpExample}
		</>
	)
}

function TabsShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Tabs"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Tabs",
				},
			]}
			description={
				<p>
					If labels are used, they must be consistent between the Tab
					component and the corresponding TabPanel component.
				</p>
			}
			examples={[
				{
					title: "Example",
					example: <AutomaticTabsValue />,
					sourceCodeExampleId: "tabs_automatic_value",
				},
				{
					title: "Example Labels",
					example: <ExampleLabels />,
					sourceCodeExampleId: "tabs_labels",
				},
				{
					title: "Example Controlled",
					example: <ExampleControlled />,
					sourceCodeExampleId: "tabscontrolled",
				},
			]}
		/>
	)
}

export default TabsShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import { SimpleTag as AKSimpleTag } from "@atlaskit/tag"
//import AKTagGroup from "@atlaskit/tag-group"
import { TagGroup, SimpleTag } from "@linked-planet/ui-kit-ts"

function TagShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			{/*<AKTagGroup alignment="end">
				<AKSimpleTag text="Simple Tag" appearance="default" />
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="rounded"
				/>
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="default"
				/>
			</AKTagGroup>
			<AKTagGroup>
				<AKSimpleTag text="Simple Tag" color="blue" />
	</AKTagGroup>*/}
		</>
	)

	//#region tags
	const lpExample = (
		<>
			<TagGroup alignment="end">
				<SimpleTag text="Simple Tag" />
				<SimpleTag
					text="Colored simple Tag"
					textColor="var(--ds-text-accent-purple-bolder, #172B4D)"
					color="var(--ds-background-accent-purple-subtle, #998DD9)"
					appearance="rounded"
				/>
				<SimpleTag
					text="Colored simple Tag"
					textColor="var(--ds-text-accent-purple-bolder, #172B4D)"
					color="var(--ds-background-accent-purple-subtle, #998DD9)"
				/>
			</TagGroup>
			<TagGroup>
				<SimpleTag text="Simple Tag" color="blue" textColor="white" />
			</TagGroup>
		</>
	)
	//#endregion tags

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Tag & Tag-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Tag",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tags" },
			]}
		/>
	)
}

export default TagShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TextArea from "@atlaskit/textarea"

function TextAreaShowcase(props: ShowcaseProps) {
	//#region textarea
	const example = (
		<div style={{ minWidth: 300 }}>
			<TextArea defaultValue="Content of text area..." />
		</div>
	)
	//#endregion textarea

	return (
		<ShowcaseWrapperItem
			name="Text area"
			{...props}
			packages={[
				{
					name: "@atlaskit/textarea",
					url: "https://atlassian.design/components/textarea/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "textarea" },
			]}
		/>
	)
}

export default TextAreaShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TextField from "@atlaskit/textfield"

function TextFieldShowcase(props: ShowcaseProps) {
	//#region textfield
	const example1 = (
		<div style={{ minWidth: 300 }}>
			<TextField defaultValue="Content of text field..." />
		</div>
	)
	//#endregion textfield
	//#region textfield2
	const example2 = (
		<div style={{ minWidth: 300 }}>
			<TextField defaultValue="Password" type="password" />
		</div>
	)
	//#endregion textfield2

	return (
		<ShowcaseWrapperItem
			name="Text field"
			{...props}
			packages={[
				{
					name: "@atlaskit/textfield",
					url: "https://atlassian.design/components/textfield/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example: example1,
					sourceCodeExampleId: "textfield",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "textfield2",
				},
			]}
		/>
	)
}

export default TextFieldShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import {
	Button,
	ToastFlagContainer,
	showErrorFlag,
	showFlag,
	showFlagExtended,
	showInformationFlag,
	showSuccessFlag,
	showWarningFlag,
} from "@linked-planet/ui-kit-ts"

//#region toastflagShowExtendedFlag
// add the ToastFlagContainer to the root of your app
function ExampleShowExtendedFlag() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						autoClose: 2000,
					})
				}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						invert: true,
					})
				}
			>
				Standard Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: This flag does not disappear!",
						description:
							"This is a standard not disappearing toast flag.",
					})
				}
			>
				Standard Not Dissapearing
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "success",
					})
				}
			>
				Success
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
					})
				}
			>
				Information
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
						invert: true,
					})
				}
			>
				Information Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "error flag",
						description: "This is a error toast flag.",
						appearance: "error",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a discovery!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
						appearance: "warning",
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer />
		</div>
	)
}
//#endregion toastflagShowExtendedFlag

//#region toastflagShowFlag
function ExampleShowFlags() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() =>
					showFlag({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						autoClose: 2000,
					})
				}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlag({
						title: "1: This flag does not disappear!",
						description: "...and is at the bottom left",
						autoClose: false,
						position: "bottom-left",
					})
				}
			>
				Standard Not Dissapearing Bottom Left
			</Button>
			<Button
				onClick={() =>
					showSuccessFlag({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
					})
				}
			>
				Success
			</Button>
			<Button
				onClick={() =>
					showInformationFlag({
						title: "1: Whoa a new information flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
					})
				}
			>
				Information
			</Button>
			<Button
				onClick={() =>
					showErrorFlag({
						title: "error flag",
						description: "This is a error toast flag.",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showWarningFlag({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a warning flag!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer />
		</div>
	)
}
//#endregion toastflagShowFlag

export default function ToastFlagShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Toast Flag Notification"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="A toast flag notification is a small notification that appears at the bottom of the screen. It is based on the react-toastify library, and you need to add the ToastContainer component to your app."
			examples={[
				{
					title: "Example Show Flags",
					example: <ExampleShowFlags />,
					sourceCodeExampleId: "toastflagShowFlag",
				},
				{
					title: "Example Show Exended Flag",
					example: <ExampleShowExtendedFlag />,
					sourceCodeExampleId: "toastflagShowExtendedFlag",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKToggle from "@atlaskit/toggle"
import { Toggle } from "@linked-planet/ui-kit-ts"

function ToggleShowcase(props: ShowcaseProps) {
	const [isToggleActive, setIsToggleActive] = useState(false)

	const akExample = (
		<>
			{/*<AKToggle
			label="test label"
			name="test name"
			value="test value"
			isChecked={isToggleActive}
			onChange={() => setIsToggleActive(!isToggleActive)}
	/>*/}
		</>
	)

	//#region toggle
	const lpExample = (
		<Toggle
			label="test label"
			name="test name"
			value="test value"
			isChecked={isToggleActive}
			onChange={() => setIsToggleActive(!isToggleActive)}
		/>
	)
	//#endregion toggle

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Toggle"
			{...props}
			packages={[
				{
					name: "@atlaskit/toggle",
					url: "https://atlassian.design/components/toggle/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "toggle" },
			]}
		/>
	)
}

export default ToggleShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import SearchIcon from "@atlaskit/icon/glyph/search"
import { Tooltip } from "@linked-planet/ui-kit-ts"

//import "react-tooltip/dist/react-tooltip.css" -> imported into the libraries css

function TooltipShowcase(props: ShowcaseProps) {
	//#region tooltip
	const example = (
		<div className="flex w-full flex-col items-center">
			<div className="flex gap-4">
				<Tooltip
					place="left"
					tooltipContent={<span>I&apos;m a tooltip</span>}
				>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip
					place="top"
					tooltipHTMLContent={`<span>I&apos;m a <b>top</b> tooltip with stringified HTML</span>`}
				>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip place="bottom" tooltipContent={"I'm a bottom tooltip"}>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip
					id="unique-id"
					place="bottom-end"
					tooltipContent={
						<p>
							I&apos;m a bottom-end tooltip <br />
							with a unique id.
						</p>
					}
				>
					<SearchIcon label="" />
				</Tooltip>
			</div>
			<div className="flex gap-4">
				Variants:
				<Tooltip
					tooltipContent={<p>I&apos;m a light tooltip.</p>}
					variant="light"
				>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip
					tooltipContent={<p>I&apos;m a error tooltip.</p>}
					variant="error"
				>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip
					tooltipContent={<p>I&apos;m a error tooltip.</p>}
					variant="error"
					opacity={0.5}
				>
					<SearchIcon label="" />
				</Tooltip>
				<Tooltip
					tooltipContent={<p>I&apos;m a dark tooltip.</p>}
					variant="dark"
				>
					<SearchIcon label="" />
				</Tooltip>
			</div>
		</div>
	)
	//#endregion tooltip

	return (
		<ShowcaseWrapperItem
			name="Tooltip"
			description={
				<p>
					A tooltip component that wraps the children in a div and
					adds a tooltip to it. <br />
					Use tooltipContent for the tooltip content and
					tooltipHTMLContent in case you have stringified HTML as
					tooltip content. <br />
					<br />
					Based on react-tooltip.
					<br />
					The variant defines the color of the tooltip - if it is not
					defined, it is unstyled.
				</p>
			}
			{...props}
			packages={[
				{
					name: "tooltip",
					url: "http://localhost:3000/ui-kit-ts/single#Tooltip",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tooltip" },
			]}
		/>
	)
}

export default TooltipShowcase

import React, { useState } from "react"
import {
	debounceHelper,
	rateLimitHelper,
	useDebounceHelper,
	useRateLimitHelper,
} from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region debounceHelper
// export this outside of a component, or this will be recreated on every render
const debounced = debounceHelper()

function DebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")

	return (
		<div>
			<h4>debounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debounced(() => {
						setDebouncedValue(newVal)
					}, 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion debounceHelper

//#region useDebounceHelperHook
function UseDebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")
	const debHelper = useDebounceHelper()

	return (
		<div>
			<h4>useDebounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debHelper(() => setDebouncedValue(newVal), 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion useDebounceHelperHook

//#region rateLimitHelper
// export this outside of a component, or this will be recreated on every render
const rateLimited = rateLimitHelper(500)
function RateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")

	return (
		<div>
			<h4>rateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rateLimited(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion rateLimitHelper

//#region useRateLimitHelper
function UseRateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")
	const rlHelper = useRateLimitHelper(500)

	return (
		<div>
			<h4>useRateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rlHelper(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion useRateLimitHelper

export default function UtilsShowCase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Utilities"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Debounce Helper",
					example: <DebounceHelperExample />,
					sourceCodeExampleId: "debounceHelper",
				},
				{
					title: "useDebounce",
					example: <UseDebounceHelperExample />,
					sourceCodeExampleId: "useDebounceHelperHook",
				},
				{
					title: "Rate Limit Helper",
					example: <RateLimitHelperExample />,
					sourceCodeExampleId: "rateLimitHelper",
				},
				{
					title: "useRateLimit",
					example: <UseRateLimitHelperExample />,
					sourceCodeExampleId: "useRateLimitHelper",
				},
			]}
		/>
	)
}
