import { Accordion } from "@linked-planet/ui-kit-ts"
import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region accordion-single
function AccordionExample() {
	return (
		<div className="bg-surface">
			<Accordion.Container type="single" defaultValue="item-1">
				<Accordion.Item value="item-1">
					<Accordion.Trigger>Is it accessible?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It adheres to the WAI-ARIA design pattern.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-2">
					<Accordion.Trigger>Is it unstyled?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It is unstyled by default, giving you freedom over
						the look and feel.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-3">
					<Accordion.Trigger>Can it be animated?</Accordion.Trigger>
					<Accordion.Content>
						Yes! You can animate the Accordion with CSS or
						JavaScript.
					</Accordion.Content>
				</Accordion.Item>
			</Accordion.Container>
		</div>
	)
}
//#endregion accordion-single

//#region accordion-multi
function AccordionMultiExample() {
	return (
		<div className="bg-surface">
			<Accordion.Container type="multiple">
				<Accordion.Item value="item-1">
					<Accordion.Trigger>Is it accessible?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It adheres to the WAI-ARIA design pattern.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-2">
					<Accordion.Trigger>Is it unstyled?</Accordion.Trigger>
					<Accordion.Content>
						Yes. It is unstyled by default, giving you freedom over
						the look and feel.
					</Accordion.Content>
				</Accordion.Item>

				<Accordion.Item value="item-3">
					<Accordion.Trigger>Can it be animated?</Accordion.Trigger>
					<Accordion.Content>
						Yes! You can animate the Accordion with CSS or
						JavaScript.
					</Accordion.Content>
				</Accordion.Item>
			</Accordion.Container>
		</div>
	)
}
//#endregion accordion-multi

export default function AnimatedListShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Accordion"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Accordion",
				},
			]}
			examples={[
				{
					title: "Accordion Single",
					example: <AccordionExample />,
					sourceCodeExampleId: "accordion-single",
				},
				{
					title: "Accordion Multi",
					example: <AccordionMultiExample />,
					sourceCodeExampleId: "accordion-multi",
				},
			]}
		/>
	)
}

import React, { useState } from "react"

import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { AnimatedList, Button, ButtonGroup } from "@linked-planet/ui-kit-ts"

//#region animated-list
function AnimatedListExample() {
	const [showItem0, setShowItem0] = useState(true)
	const [showItem1, setShowItem1] = useState(true)
	const [showItem2, setShowItem2] = useState(true)

	const [enableEnterAnimation, setEnableEnterAnimation] = useState(true)
	const [enableExitAnimation, setEnableExitAnimation] = useState(true)

	const className = "border rounded border-border p-4 bg-brand"

	return (
		<>
			<ButtonGroup className="mb-4">
				<Button onClick={() => setShowItem0(!showItem0)}>
					{showItem0 ? "Hide Item 0" : "Show Item 0"}
				</Button>
				<Button onClick={() => setShowItem1(!showItem1)}>
					{showItem0 ? "Hide Item 1" : "Show Item 1"}
				</Button>
				<Button onClick={() => setShowItem2(!showItem2)}>
					{showItem0 ? "Hide Item 2" : "Show Item 2"}
				</Button>
			</ButtonGroup>
			<ButtonGroup className="mb-4 ml-8">
				<Button
					onClick={() =>
						setEnableEnterAnimation(!enableEnterAnimation)
					}
				>
					{enableEnterAnimation
						? "Disable Enter Animation"
						: "Enable Enter Animation"}
				</Button>
				<Button
					onClick={() => setEnableExitAnimation(!enableExitAnimation)}
				>
					{enableExitAnimation
						? "Disable Exit Animation"
						: "Enable Exit Animation"}
				</Button>
			</ButtonGroup>
			<AnimatedList
				className="flex flex-col gap-2"
				classNames={{
					enter: "duration-300 ease-in-out opacity-5 relative -translate-x-full",
					enterDone:
						"duration-300 ease-in-out opacity-100 relative translate-x-0",
					exit: "duration-300 ease-in-out opacity-5 relative -translate-x-full",
				}}
				timeout={300}
				enter={enableEnterAnimation}
				exit={enableExitAnimation}
				onEnter={() => console.log("Enter")}
				onEntering={() => console.log("Entering")}
				onEntered={() => console.log("Entered")}
				onExit={() => console.log("Exit")}
				onExiting={() => console.log("Exiting")}
				onExited={() => console.log("Exited")}
			>
				{showItem0 && <div className={className}>Item 0</div>}
				{showItem1 && <div className={className}>Item 1</div>}
				{showItem2 && <div className={className}>Item 2</div>}
			</AnimatedList>
		</>
	)
}
//#endregion animated-list

export default function AnimatedListShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Animated List"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#AnimatedList",
				},
			]}
			examples={[
				{
					title: "Animated List",
					example: <AnimatedListExample />,
					sourceCodeExampleId: "animated-list",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"
import {
	Avatar as LPAvatar,
	AvatarItem as LPAvatarItem,
} from "@linked-planet/ui-kit-ts"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"

function AvatarShowcase(props: ShowcaseProps) {
	const example1AK = (
		<>
			{/*<div className="flex gap-4">
				<AvatarItem
					avatar={
						<Avatar
							size="xsmall"
							appearance="circle"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="small"
							appearance="square"
							presence="online"
							status="approved"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="medium"
							name="M T"
							presence="busy"
							status="declined"
						/>
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" presence="focus" status="locked" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar size="large" isDisabled presence="online" />
					}
				/>
				<AvatarItem
					avatar={
						<Avatar
							size="xlarge"
							appearance="square"
							label="testlabel"
							name="M T"
							presence="offline"
						/>
					}
				/>
				<Avatar size="xxlarge" />
				<Avatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<Avatar borderColor="#ff0000" />
				<span>as link:</span>
				<Avatar size="medium" name="M T" href="#" />
				<Avatar size="xlarge" href="#" />
				<Avatar href="#" borderColor="#00ff00" />
				<Avatar size="medium" isDisabled={true} name="M T" href="#" />
				<Avatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<Avatar href="#" src={"images/github-logo.png"} size="xlarge" />
				</div>*/}
		</>
	)

	//#region avatar1
	const example1 = (
		<div>
			{example1AK}
			<div className="flex gap-4">
				<LPAvatar
					size="xsmall"
					appearance="circle"
					presence="online"
					status="approved"
				/>
				<LPAvatar
					size="small"
					appearance="square"
					presence="online"
					status="approved"
				/>
				<LPAvatar size="medium" presence="busy" status="declined" />
				<LPAvatar size="large" presence="focus" status="locked" />
				<LPAvatar size="large" isDisabled presence="online" />
				<LPAvatar
					size="xlarge"
					appearance="square"
					label="testlabel"
					presence="offline"
				/>
				<LPAvatar size="xxlarge" />
				<LPAvatar
					size="xlarge"
					src={"https://source.boringavatars.com/beam/"}
				/>
				<LPAvatar borderColor="#ff0000" />
				<span>as link:</span>
				<LPAvatar size="medium" name="M T" label="testlabel" href="#" />
				<LPAvatar size="xlarge" href="#" />
				<LPAvatar size="medium" href="#" />
				<LPAvatar href="#" borderColor="#00ff00" />
				<LPAvatar size="medium" isDisabled={true} href="#" />
				<LPAvatar
					isDisabled={true}
					href="#"
					src={"https://source.boringavatars.com/beam/"}
					size="xlarge"
				/>
				<LPAvatar
					href="#"
					src={"images/github-logo.png"}
					size="xlarge"
				/>
			</div>
		</div>
	)
	//#endregion avatar1

	const example2AK = (
		<>
			{/*<AvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={<Avatar size="medium" borderColor="red" />}
			/>
	<Avatar size="medium" />*/}
		</>
	)

	//#region avatar2
	const example2 = (
		<div className="flex flex-col">
			{example2AK}
			<LPAvatarItem
				primaryText="Carl Coder"
				secondaryText="Software Engineer"
				avatar={
					<LPAvatar
						size="large"
						presence="online"
						borderColor="red"
					/>
				}
			/>
			<LPAvatarItem
				primaryText={
					<div>
						<h1>TEST H1</h1>
					</div>
				}
				secondaryText={
					<div>
						<div className="bg-brand text-danger-bold h-4 w-12 flex-none">
							UUU
						</div>
					</div>
				}
				avatar={<LPAvatar size="large" presence="online" />}
			/>
		</div>
	)
	//#endregion avatar2

	const example3AK = (
		<div className="flex flex-1 justify-center border-2">
			{/*<AvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<Avatar size="medium" />}
				/>*/}
		</div>
	)

	//#region avatar3
	const example3 = (
		<div>
			{example3AK}
			<div className="flex flex-1 justify-center border-2">
				<LPAvatarItem
					primaryText={"Unbekannt"}
					secondaryText={
						<div>
							<div>{"Unbekannt"}</div>
							<div>Summary</div>
							<div>description</div>
						</div>
					}
					avatar={<LPAvatar size="medium" />}
				/>
			</div>
		</div>
	)
	//#endregion avatar3

	return (
		<ShowcaseWrapperItem
			name="Avatar"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Avatars",
				},
			]}
			examples={[
				{
					title: "Avatar",
					example: example1,
					sourceCodeExampleId: "avatar1",
				},
				{
					title: "Avatar Item",
					example: example2,
					sourceCodeExampleId: "avatar2",
				},
				{
					title: "Avatar Item 2",
					example: example3,
					sourceCodeExampleId: "avatar3",
				},
			]}
		/>
	)
}

export default AvatarShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AwesomeSlider from "react-awesome-slider"

import "react-awesome-slider/dist/styles.css"

function AwesomeSliderShowcase(props: ShowcaseProps) {
	//#region awesome-slider
	const example = (
		<div
			style={{
				minWidth: 600,
				display: "flex",
				height: 200,
				position: "relative",
				zIndex: 0,
			}}
		>
			<AwesomeSlider bullets={false}>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/logo.png"
						width={100}
						height={100}
					/>
				</div>
				<div>
					<img
						style={{ objectFit: "scale-down" }}
						src="images/github-logo.png"
						width={100}
						height={100}
					/>
				</div>
			</AwesomeSlider>
		</div>
	)
	//#endregion awesome-slider

	return (
		<ShowcaseWrapperItem
			name="Awesome Slider"
			{...props}
			packages={[
				{
					name: "react-awesome-slider",
					url: "https://github.com/rcaferati/react-awesome-slider",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "awesome-slider",
				},
			]}
		/>
	)
}

export default AwesomeSliderShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKBadge from "@atlaskit/badge"
import { Badge } from "@linked-planet/ui-kit-ts"

function BadgeShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			{/*<div
				style={{
					display: "flex",
					gap: "1rem",
				}}
			>
				<AKBadge></AKBadge>
				<AKBadge appearance="added" />
				<AKBadge appearance="important" />
				<AKBadge appearance="removed" />
				<AKBadge appearance="primary" />
				<AKBadge appearance="primaryInverted">test</AKBadge>
			</div>*/}
		</>
	)

	//#region badge
	const lpExample = (
		<div
			style={{
				display: "flex",
				gap: "1rem",
			}}
		>
			<Badge>0</Badge>
			<Badge appearance="added">1</Badge>
			<Badge appearance="important">2</Badge>
			<Badge appearance="removed">3</Badge>
			<Badge appearance="primary">4</Badge>
			<Badge appearance="primaryInverted">test</Badge>
		</div>
	)
	//#endregion badge

	const example = (
		<div>
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Badge"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Badge",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example,
					sourceCodeExampleId: "badge",
				},
			]}
		/>
	)
}

export default BadgeShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Banner from "@atlaskit/banner"
import WarningIcon from "@atlaskit/icon/glyph/warning"
import ErrorIcon from "@atlaskit/icon/glyph/error"

function BannerShowcase(props: ShowcaseProps) {
	//#region banner1
	const example = (
		<Banner appearance="announcement">
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner1

	//#region banner2
	const example2 = (
		<Banner appearance="warning" icon={<WarningIcon label="" />}>
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner2

	//#region banner3
	const example3 = (
		<Banner
			appearance="error"
			icon={
				<ErrorIcon
					secondaryColor="var(--ds-background-danger-bold, #DE350B)"
					label=""
				/>
			}
		>
			<span>Content of the banner...</span>
		</Banner>
	)
	//#endregion banner3

	return (
		<ShowcaseWrapperItem
			name="Banner"
			{...props}
			packages={[
				{
					name: "@atlaskit/banner",
					url: "https://atlassian.design/components/banner/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example,
					sourceCodeExampleId: "banner1",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "banner2",
				},
				{
					title: "Example 3",
					example: example3,
					sourceCodeExampleId: "banner3",
				},
			]}
		/>
	)
}

export default BannerShowcase

import React, { CSSProperties, useMemo, useRef, useState } from "react"
import {
	BookCard,
	BookCardComponents,
} from "@linked-planet/ui-kit-ts/components/BookCard"

import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import Button, { ButtonGroup } from "@atlaskit/button"
import { Fieldset } from "@atlaskit/form"
import { Badge, SimpleTag, TagGroup } from "@linked-planet/ui-kit-ts"
import { CSSTransition } from "react-transition-group"
import { TruncatedText } from "@linked-planet/ui-kit-ts/components/TruncatedText"

//#region bookcardcomponents
function BookCardComponentsExample() {
	return (
		<BookCardComponents.CardBase
			header={
				<BookCardComponents.CardHeader>
					<BookCardComponents.CardHeaderMeta>
						<BookCardComponents.CardHeaderTitle>
							Book Title very very very very very very very very
							very very very very very very very long
						</BookCardComponents.CardHeaderTitle>
						<BookCardComponents.CardHeaderSubtitle>
							Book Subtitle
						</BookCardComponents.CardHeaderSubtitle>
					</BookCardComponents.CardHeaderMeta>
					<BookCardComponents.CardHeaderActions>
						<BookCardComponents.CardHeaderActionsInfo>
							<Badge appearance="default">action</Badge>
						</BookCardComponents.CardHeaderActionsInfo>
					</BookCardComponents.CardHeaderActions>
				</BookCardComponents.CardHeader>
			}
			defaultOpen={true}
		>
			<BookCardComponents.CardGridBody>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title very very very very very very very very
						very very very very very very very long
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content</div>
				</BookCardComponents.CardBodyEntry>
				<BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title 2
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content 2</div>
				</BookCardComponents.CardBodyEntry>
			</BookCardComponents.CardGridBody>
		</BookCardComponents.CardBase>
	)
}
//#endregion bookcardcomponents

//#region bookcard-animation
function BookCardAnimationExample() {
	const [showCard, setShowCard] = useState(true)
	const nodeRef = useRef<HTMLDivElement>(null)

	return (
		<>
			<Button onClick={() => setShowCard(!showCard)} className="mb-4">
				Toggle Card
			</Button>
			<CSSTransition
				in={showCard}
				timeout={300} // this needs to be the same as the duration of the animation in the css
				classNames={{
					exit: "transition-opacity duration-300 ease-out opacity-0",
				}}
				nodeRef={nodeRef}
				unmountOnExit
			>
				<BookCardComponents.CardBase
					header={
						<BookCardComponents.CardHeader>
							<BookCardComponents.CardHeaderMeta>
								<BookCardComponents.CardHeaderTitle className="">
									Title
								</BookCardComponents.CardHeaderTitle>
							</BookCardComponents.CardHeaderMeta>
						</BookCardComponents.CardHeader>
					}
					defaultOpen={true}
					ref={nodeRef}
				>
					<BookCardComponents.CardGridBody>
						<BookCardComponents.CardBodyEntry>
							<BookCardComponents.CardBodyEntryTitle>
								Entry Title
							</BookCardComponents.CardBodyEntryTitle>
							<div>Book Entry Content</div>
						</BookCardComponents.CardBodyEntry>
					</BookCardComponents.CardGridBody>
				</BookCardComponents.CardBase>
			</CSSTransition>
		</>
	)
}
//#endregion bookcard-animation

function BookCardExample() {
	//#region bookcard
	const [bodyLayout, setBodyLayout] = useState<"row" | "grid" | "column">(
		"grid",
	)

	const [isClosed, setIsClosed] = useState<boolean | undefined>(undefined)

	const children = useMemo(() => {
		const childCount = bodyLayout === "column" ? 10 : 100
		const ret = Array(childCount)
		for (let i = 0; i < childCount; i++) {
			ret[i] = (
				<BookCardComponents.CardBodyEntry key={i}>
					<BookCardComponents.CardBodyEntryTitle>
						Book Entry Title {i}
					</BookCardComponents.CardBodyEntryTitle>
					<div>Book Entry Content {i}</div>
				</BookCardComponents.CardBodyEntry>
			)
		}
		return ret
	}, [bodyLayout])

	const bodyStyle = useMemo(() => {
		switch (bodyLayout) {
			case "row":
				break
			case "grid":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			case "column":
				return {
					maxHeight: "400px",
					overflowY: "auto",
					overflowX: "hidden",
				} satisfies CSSProperties
			default:
				break
		}
	}, [bodyLayout])

	const bookCardExample = (
		<>
			<BookCard
				title="Book Title very very very very very very very very very
						very very very very very very long"
				subtitle="Book Subtitle also very very very very very very long"
				upperTitle="Book Upper Title also looooooooooooooooooooooooooooong"
				bodyLayout={bodyLayout}
				bodyStyle={bodyStyle}
				closed={isClosed}
				actionsInfo={"Action:"}
				actions={
					<div className="flex items-center">
						<div>ICON</div>
						<TagGroup>
							<SimpleTag
								key="action"
								text="DAUERAUSLEIHE"
								appearance="danger"
							/>
							<SimpleTag
								key="action 1"
								text="action item 1"
								appearance="greenLight"
							/>
						</TagGroup>
					</div>
				}
			>
				<>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<TruncatedText>
							truncated - Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Beatae aperiam tenetur est in
							quidem? Tempore, cumque perspiciatis optio aperiam
							dolorem saepe harum, sequi eaque nisi quas,
							assumenda praesentium! Labore, incidunt.
						</TruncatedText>
					</BookCardComponents.CardBodyEntry>
					<BookCardComponents.CardBodyEntry>
						<BookCardComponents.CardBodyEntryTitle>
							Book Entry Title
						</BookCardComponents.CardBodyEntryTitle>
						<TruncatedText>not truncated</TruncatedText>
					</BookCardComponents.CardBodyEntry>
					{children}
				</>
			</BookCard>
		</>
	)
	//#endregion bookcard

	return (
		<div>
			<div className="mb-2 flex flex-row justify-between">
				<Fieldset legend="Book Card Collapsible">
					<ButtonGroup>
						<Button
							isSelected={isClosed === false}
							onClick={() => setIsClosed(false)}
						>
							Opened
						</Button>
						<Button
							isSelected={isClosed === true}
							onClick={() => setIsClosed(true)}
						>
							Closed
						</Button>
						<Button
							isSelected={isClosed === undefined}
							onClick={() => setIsClosed(undefined)}
						>
							Closed Undefined
						</Button>
					</ButtonGroup>
				</Fieldset>
				<Fieldset legend="Book Card Body Layout">
					<ButtonGroup>
						<Button
							isSelected={bodyLayout === "row"}
							onClick={() => setBodyLayout("row")}
						>
							Row
						</Button>
						<Button
							isSelected={bodyLayout === "grid"}
							onClick={() => setBodyLayout("grid")}
						>
							Grid
						</Button>
						<Button
							isSelected={bodyLayout === "column"}
							onClick={() => setBodyLayout("column")}
						>
							Column
						</Button>
					</ButtonGroup>
				</Fieldset>
			</div>
			{bookCardExample}
		</div>
	)
}

export default function BookCardShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Book Card (Components)"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description={
				<>
					<p>
						Book Card is a card component that is used to display
						search result information or similar. It can be used as
						a collapsible component or as a static component.
					</p>
					<p>
						If <b>closed</b> is used, the collapse state is
						controlled. By <b>defaultOpen</b> if it collapsible but
						uncontrolled. If both are undefined, the component is
						static.
					</p>
					<p>
						Book Card is a composition of several components. The
						components can be used individually or as a whole.
					</p>
				</>
			}
			examples={[
				{
					title: "Complete Bookcard",
					example: <BookCardExample key="bookcardexample" />,
					sourceCodeExampleId: "bookcard",
				},
				{
					title: "Components",
					example: (
						<BookCardComponentsExample key="bookcardcomponentexample" />
					),
					sourceCodeExampleId: "bookcardcomponents",
				},
				{
					title: "Animation",
					example: (
						<BookCardAnimationExample key="bookcardanimationexample" />
					),
					sourceCodeExampleId: "bookcard-animation",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKButton, {
	ButtonGroup as AKButtonGroup,
	LoadingButton as AKLoadingButton,
} from "@atlaskit/button"
import { Button, LoadingButton, ButtonGroup } from "@linked-planet/ui-kit-ts"
import SearchIcon from "@atlaskit/icon/glyph/search"

function ButtonShowcase(props: ShowcaseProps) {
	const [isLoading, setIsLoading] = useState(false)

	const akExample = (
		<>
			<AKButtonGroup>
				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
				>
					Default Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isSelected={true}
				>
					Selected Button
				</AKButton>

				<AKButton
					appearance="default"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Disabled Default button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="primary"
					onClick={() => console.log("Button pressed")}
					isDisabled={true}
				>
					Primary button
				</AKButton>

				<AKButton
					appearance="subtle"
					onClick={() => console.log("Button pressed")}
				>
					Subtle button
				</AKButton>

				<AKButton
					appearance="subtle"
					onClick={() => console.log("Button pressed")}
					isDisabled
				>
					Subtle Disabled button
				</AKButton>

				<AKButton
					appearance="link"
					onClick={() => console.log("Button pressed")}
				>
					Link button
				</AKButton>

				<AKButton
					appearance="warning"
					onClick={() => console.log("Button pressed")}
				>
					Warning button
				</AKButton>

				<AKButton
					appearance="danger"
					onClick={() => console.log("Button pressed")}
					iconAfter={<SearchIcon label="" />}
					iconBefore={<SearchIcon label="" />}
				>
					Danger button
				</AKButton>
				<AKLoadingButton
					isLoading={isLoading}
					onClick={() => {
						setIsLoading(true)
						window.setTimeout(() => setIsLoading(false), 3000)
					}}
					iconBefore={<SearchIcon label="" />}
					iconAfter={<SearchIcon label="" />}
				>
					Icon Loading Button
				</AKLoadingButton>
			</AKButtonGroup>
		</>
	)

	//#region button
	const lpExample = (
		<ButtonGroup>
			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				autoFocus={true}
			>
				Default Button
			</Button>
			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				autoFocus={true}
				inverted
			>
				Default Inverted Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				selected={true}
			>
				Selected Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				disabled={true}
			>
				Disabled Button
			</Button>

			<Button
				appearance="default"
				onClick={() => console.log("Button pressed")}
				disabled
				inverted
			>
				Disabled Inverted Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
			>
				Primary Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Primary Inverted Button
			</Button>

			<Button
				appearance="primary"
				onClick={() => console.log("Button pressed")}
				inverted
				disabled
			>
				Primary Inverted Disabled Button
			</Button>

			<Button
				onClick={() => console.log("Button pressed")}
				disabled={true}
			>
				Disabled Button
			</Button>

			<Button
				appearance="subtle"
				onClick={() => console.log("Button pressed")}
			>
				Subtle Button
			</Button>

			<Button
				appearance="subtle"
				onClick={() => console.log("Button pressed")}
				disabled
			>
				Subtle Disabled Button
			</Button>

			<Button
				appearance="link"
				onClick={() => console.log("Button pressed")}
			>
				Link Button
			</Button>

			<Button
				appearance="warning"
				onClick={() => console.log("Button pressed")}
			>
				Warning Button
			</Button>

			<Button
				appearance="warning"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Warning Inverted Button
			</Button>

			<Button
				appearance="danger"
				onClick={() => console.log("Button pressed")}
			>
				Danger Button
			</Button>

			<Button
				appearance="danger"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Danger Inverted Button
			</Button>

			<Button
				appearance="success"
				onClick={() => console.log("Button pressed")}
			>
				Success Button
			</Button>

			<Button
				appearance="success"
				onClick={() => console.log("Button pressed")}
				inverted
			>
				Success Inverted Button
			</Button>

			<Button
				appearance="information"
				onClick={() => console.log("Button pressed")}
				iconAfter={<SearchIcon label="" />}
				iconBefore={<SearchIcon label="" />}
			>
				Information Button
			</Button>

			<Button
				appearance="information"
				onClick={() => console.log("Button pressed")}
				iconAfter={<SearchIcon label="" />}
				iconBefore={<SearchIcon label="" />}
				inverted
			>
				Information Inverted Button
			</Button>

			<LoadingButton
				onClick={() => {
					setIsLoading(true)
					window.setTimeout(() => setIsLoading(false), 3000)
				}}
				loading={isLoading}
				iconBefore={<SearchIcon label="" />}
				iconAfter={<SearchIcon label="" />}
			>
				Icon Loading Button
			</LoadingButton>
		</ButtonGroup>
	)
	//#endregion button

	const example = (
		<div className="flex w-full flex-col items-center justify-start gap-4 overflow-auto">
			{akExample}
			{lpExample}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Button & Button-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Button",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "button" },
			]}
		/>
	)
}

export default ButtonShowcase

import React, { useCallback, useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Calendar } from "@linked-planet/ui-kit-ts"
import { DateRange } from "react-day-picker"
import AKCalendar from "@atlaskit/calendar"

//#region calendar2-example
function CalendarExample() {
	return <Calendar />
}
//#endregion calendar2-example

//#region calendar2-single
function CalendarSingle() {
	const [selected, setSelected] = useState(new Date())
	return (
		<div className="flex gap-4">
			<Calendar
				mode="single"
				selected={selected}
				onDayClick={setSelected}
			/>
			<AKCalendar />
		</div>
	)
}
//#endregion calendar2-single

//#region calendar2-multi
function CalendarMulti() {
	const [selected, setSelected] = useState<Date[]>([new Date()])

	const handleDayClick = useCallback((day: Date) => {
		setSelected((selected) => {
			const removed = selected.filter(
				(it) => it.getTime() !== day.getTime(),
			)
			if (removed.length !== selected.length) {
				return removed
			}
			return [...selected, day]
		})
	}, [])

	return (
		<Calendar
			mode="multiple"
			selected={selected}
			onDayClick={handleDayClick}
		/>
	)
}
//#endregion calendar2-multi

//#region calendar2-range
function CalendarRange() {
	const [selected, setSelected] = useState<DateRange>({
		from: new Date(),
		to: undefined,
	})

	const handleDayClick = useCallback((day: Date) => {
		setSelected((selected) => {
			if (selected.from && selected.to) {
				return { from: day, to: undefined }
			}
			if (selected.from) {
				return { from: selected.from, to: day }
			}
			return { from: day, to: undefined }
		})
	}, [])

	return (
		<Calendar
			mode="range"
			selected={selected}
			onDayClick={handleDayClick}
		/>
	)
}
//#endregion calendar2-range

export default function Calendar2Showcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Date Picker"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Calendar, date and date range picker components."
			examples={[
				{
					title: "Calendar",
					example: <CalendarExample />,
					sourceCodeExampleId: "calendar2-example",
				},
				{
					title: "Calendar Single Day",
					example: <CalendarSingle />,
					sourceCodeExampleId: "calendar2-single",
				},
				{
					title: "Calendar Multiple Days",
					example: <CalendarMulti />,
					sourceCodeExampleId: "calendar2-multi",
				},
				{
					title: "Calendar Day Range",
					example: <CalendarRange />,
					sourceCodeExampleId: "calendar2-range",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Calendar from "@atlaskit/calendar"

function CalendarShowcase(props: ShowcaseProps) {
	//#region calendar
	const example = (
		<div style={{ minWidth: 300 }}>
			<Calendar locale="de-DE" weekStartDay={1} />
		</div>
	)
	//#endregion calendar

	return (
		<ShowcaseWrapperItem
			name="Calendar"
			{...props}
			packages={[
				{
					name: "@atlaskit/calendar",
					url: "https://atlassian.design/components/calendar/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "calendar" },
			]}
		/>
	)
}

export default CalendarShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKCheckbox from "@atlaskit/checkbox"
import { Button, ButtonGroup, Checkbox } from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

//#region checkbox-form
type FormData = {
	enabled: boolean
}

function FormExample() {
	const { handleSubmit, reset, register } = useForm<FormData>({
		defaultValues: {
			enabled: true,
		},
	})

	return (
		<>
			<form
				onSubmit={handleSubmit((data) => console.log(data))}
				onReset={(e) => {
					e.preventDefault()
					reset()
				}}
			>
				<Checkbox
					label="Enabled"
					{...register("enabled")}
					errorMessage="Test error"
					invalid
				/>
				<ButtonGroup>
					<Button type="reset" appearance="subtle">
						Reset
					</Button>
					<Button type="submit" appearance="primary">
						Submit
					</Button>
				</ButtonGroup>
			</form>
		</>
	)
}

//#endregion

function CheckboxShowcase(props: ShowcaseProps) {
	const [isCheckboxActive, setIsCheckboxActive] = useState<
		boolean | "indeterminate"
	>(false)

	const akExample = (
		<div className="flex gap-4">
			<AKCheckbox
				label="controlled"
				isChecked={!!isCheckboxActive}
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="uncontrolled" defaultChecked />
			<AKCheckbox label="disabled" isDisabled />
			<AKCheckbox label="invalid" isInvalid />
			<AKCheckbox
				label="indeterminate"
				isChecked={!!isCheckboxActive}
				isIndeterminate
				onChange={(e) => {
					setIsCheckboxActive(e.target.checked)
				}}
			/>
			<AKCheckbox label="indeterminate uncontrolled" isIndeterminate />
			<AKCheckbox label="required" isIndeterminate isRequired />
		</div>
	)

	//#region checkbox
	const lpExample = (
		<div className="flex gap-4">
			<Checkbox
				label="controlled"
				checked={!!isCheckboxActive}
				onCheckedChange={setIsCheckboxActive}
			/>
			<Checkbox label="uncontrolled" defaultChecked />
			<Checkbox label="disabled" disabled />
			<Checkbox label="invalid" invalid />
			<Checkbox
				label="indeterminate"
				indeterminate
				checked={isCheckboxActive}
				onCheckedChange={setIsCheckboxActive}
			/>
			<Checkbox label="indeterminate uncontrolled" indeterminate />
			<Checkbox label="required" indeterminate required />
		</div>
	)
	//#endregion checkbox

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Checkbox"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Checkbox",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "checkbox" },
				{
					title: "Form Example",
					example: <FormExample />,
					sourceCodeExampleId: "checkbox-form",
				},
			]}
		/>
	)
}

export default CheckboxShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { CodeBlock } from "@atlaskit/code"

function CodeBlockShowcase(props: ShowcaseProps) {
	//#region code-block
	const code = `class Hello {
    public static void main(String args...) {
        System.out.println('Hello world')
    }
}`
	const example = <CodeBlock language="java" text={code} />
	//#endregion code-block

	return (
		<ShowcaseWrapperItem
			name="Code block"
			{...props}
			packages={[
				{
					name: "@atlaskit/code",
					url: "https://atlassian.design/components/code/code-block/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "code-block",
				},
			]}
		/>
	)
}

export default CodeBlockShowcase

import { Collapsible } from "@linked-planet/ui-kit-ts/components/Collapsible"
import React from "react"
import type { ShowcaseProps } from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ShowcaseWrapperItem from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

export default function CollapsibleShowcase(props: ShowcaseProps) {
	//#region collapsible
	const example = (
		<Collapsible
			header={<h4>Collapsible Title</h4>}
			openButtonPosition="left"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible

	//#region collapsible1
	const example1 = (
		<Collapsible
			header={
				<div className="p-2">
					<h2>Collapsible Title</h2>
				</div>
			}
			openButtonPosition="right"
		>
			<div className="p-4">collapsible content</div>
		</Collapsible>
	)
	//#endregion collapsible1

	return (
		<ShowcaseWrapperItem
			name="Collapsible"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Chevron Left",
					example,
					sourceCodeExampleId: "collapsible",
				},
				{
					title: "Chevron Right",
					example: example1,
					sourceCodeExampleId: "collapsible1",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region colorstest
function Colors() {
	return (
		<div className="grid w-full grid-cols-4 gap-2">
			{/* blue */}
			<div className="bg-blue border-blue-border hover:bg-blue-hovered active:bg-blue-pressed text-blue-text-bold border-2 p-1">
				blue
			</div>
			<div className="bg-blue-subtle border-blue-border hover:bg-blue-subtle-hovered active:bg-blue-subtle-pressed text-blue-text border-2 p-1">
				blue-subtle
			</div>
			<div className="bg-blue-subtlest border-blue-border hover:bg-blue-subtlest-hovered active:bg-blue-subtlest-pressed text-blue-text border-2 p-1">
				blue-subtlest
			</div>
			<div className="bg-blue-bold border-blue-border hover:bg-blue-bold-hovered active:bg-blue-bold-pressed text-blue-text-inverse border-2 p-1">
				blue-bold
			</div>

			{/* sky */}
			<div className="bg-sky border-sky-border hover:bg-sky-hovered active:bg-sky-pressed text-sky-text-bold border-2 p-1">
				sky
			</div>
			<div className="bg-sky-subtle border-sky-border hover:bg-sky-subtle-hovered active:bg-sky-subtle-pressed text-sky-text border-2 p-1">
				sky-subtle
			</div>
			<div className="bg-sky-subtlest border-sky-border hover:bg-sky-subtlest-hovered active:bg-sky-subtlest-pressed text-sky-text border-2 p-1">
				sky-subtlest
			</div>
			<div className="bg-sky-bold border-sky-border hover:bg-sky-bold-hovered active:bg-sky-bold-pressed text-sky-text-inverse border-2 p-1">
				sky-bold
			</div>
			{/* cyan */}
			<div className="bg-cyan border-cyan-border hover:bg-cyan-hovered active:bg-cyan-pressed text-cyan-text-bold border-2 p-1">
				cyan
			</div>
			<div className="bg-cyan-subtle border-cyan-border hover:bg-cyan-subtle-hovered active:bg-cyan-subtle-pressed text-cyan-text border-2 p-1">
				cyan-subtle
			</div>
			<div className="bg-cyan-subtlest border-cyan-border hover:bg-cyan-subtlest-hovered active:bg-cyan-subtlest-pressed text-cyan-text border-2 p-1">
				cyan-subtlest
			</div>
			<div className="bg-cyan-bold border-cyan-border hover:bg-cyan-bold-hovered active:bg-cyan-bold-pressed text-cyan-text-inverse border-2 p-1">
				cyan-bold
			</div>
			{/* teal */}
			<div className="bg-teal border-teal-border hover:bg-teal-hovered active:bg-teal-pressed text-teal-text-bold border-2 p-1">
				teal
			</div>
			<div className="bg-teal-subtle border-teal-border hover:bg-teal-subtle-hovered active:bg-teal-subtle-pressed text-teal-text border-2 p-1">
				teal-subtle
			</div>
			<div className="bg-teal-subtlest border-teal-border hover:bg-teal-subtlest-hovered active:bg-teal-subtlest-pressed text-teal-text border-2 p-1">
				teal-subtlest
			</div>
			<div className="bg-teal-bold border-teal-border hover:bg-teal-bold-hovered active:bg-teal-bold-pressed text-teal-text-inverse border-2 p-1">
				teal-bold
			</div>
			{/* emerald */}
			<div className="bg-emerald border-emerald-border hover:bg-emerald-hovered active:bg-emerald-pressed text-emerald-text-bold border-2 p-1">
				emerald
			</div>
			<div className="bg-emerald-subtle border-emerald-border hover:bg-emerald-subtle-hovered active:bg-emerald-subtle-pressed text-emerald-text border-2 p-1">
				emerald-subtle
			</div>
			<div className="bg-emerald-subtlest border-emerald-border hover:bg-emerald-subtlest-hovered active:bg-emerald-subtlest-pressed text-emerald-text border-2 p-1">
				emerald-subtlest
			</div>
			<div className="bg-emerald-bold border-emerald-border hover:bg-emerald-bold-hovered active:bg-emerald-bold-pressed text-emerald-text-inverse border-2 p-1">
				emerald-bold
			</div>
			{/* green */}
			<div className="bg-green border-green-border hover:bg-green-hovered active:bg-green-pressed text-green-text-bold border-2 p-1">
				green
			</div>
			<div className="bg-green-subtle border-green-border hover:bg-green-subtle-hovered active:bg-green-subtle-pressed text-green-text border-2 p-1">
				green-subtle
			</div>
			<div className="bg-green-subtlest border-green-border hover:bg-green-subtlest-hovered active:bg-green-subtlest-pressed text-green-text border-2 p-1">
				green-subtlest
			</div>
			<div className="bg-green-bold border-green-border hover:bg-green-bold-hovered active:bg-green-bold-pressed text-green-text-inverse border-2 p-1">
				green-bold
			</div>

			{/* lime */}
			<div className="bg-lime border-lime-border hover:bg-lime-hovered active:bg-lime-pressed text-lime-text-bold border-2 p-1">
				lime
			</div>
			<div className="bg-lime-subtle border-lime-border hover:bg-lime-subtle-hovered active:bg-lime-subtle-pressed text-lime-text border-2 p-1">
				lime-subtle
			</div>
			<div className="bg-lime-subtlest border-lime-border hover:bg-lime-subtlest-hovered active:bg-lime-subtlest-pressed text-lime-text border-2 p-1">
				lime-subtlest
			</div>
			<div className="bg-lime-bold border-lime-border hover:bg-lime-bold-hovered active:bg-lime-bold-pressed text-lime-text-inverse border-2 p-1">
				lime-bold
			</div>
			{/* red */}
			<div className="bg-red border-red-border hover:bg-red-hovered active:bg-red-pressed text-red-text-bold border-2 p-1">
				red
			</div>
			<div className="bg-red-subtle border-red-border hover:bg-red-subtle-hovered active:bg-red-subtle-pressed text-red-text border-2 p-1">
				red-subtle
			</div>
			<div className="bg-red-subtlest border-red-border hover:bg-red-subtlest-hovered active:bg-red-subtlest-pressed text-red-text border-2 p-1">
				red-subtlest
			</div>
			<div className="bg-red-bold border-red-border hover:bg-red-bold-hovered active:bg-red-bold-pressed text-red-text-inverse border-2 p-1">
				red-bold
			</div>
			{/* orange */}
			<div className="bg-orange border-orange-border hover:bg-orange-hovered active:bg-orange-pressed text-orange-text-bold border-2 p-1">
				orange
			</div>
			<div className="bg-orange-subtle border-orange-border hover:bg-orange-subtle-hovered active:bg-orange-subtle-pressed text-orange-text border-2 p-1">
				orange-subtle
			</div>
			<div className="bg-orange-subtlest border-orange-border hover:bg-orange-subtlest-hovered active:bg-orange-subtlest-pressed text-orange-text border-2 p-1">
				orange-subtlest
			</div>
			<div className="bg-orange-bold border-orange-border hover:bg-orange-bold-hovered active:bg-orange-bold-pressed text-orange-text-inverse border-2 p-1">
				orange-bold
			</div>
			{/* amber */}
			<div className="bg-amber border-amber-border hover:bg-amber-hovered active:bg-amber-pressed text-amber-text-bold border-2 p-1">
				amber
			</div>
			<div className="bg-amber-subtle border-amber-border hover:bg-amber-subtle-hovered active:bg-amber-subtle-pressed text-amber-text border-2 p-1">
				amber-subtle
			</div>
			<div className="bg-amber-subtlest border-amber-border hover:bg-amber-subtlest-hovered active:bg-amber-subtlest-pressed text-amber-text border-2 p-1">
				amber-subtlest
			</div>
			<div className="bg-amber-bold border-amber-border hover:bg-amber-bold-hovered active:bg-amber-bold-pressed text-amber-text-inverse border-2 p-1">
				amber-bold
			</div>
			{/* yellow */}
			<div className="bg-yellow border-yellow-border hover:bg-yellow-hovered active:bg-yellow-pressed text-yellow-text-bold border-2 p-1">
				yellow
			</div>
			<div className="bg-yellow-subtle border-yellow-border hover:bg-yellow-subtle-hovered active:bg-yellow-subtle-pressed text-yellow-text border-2 p-1">
				yellow-subtle
			</div>
			<div className="bg-yellow-subtlest border-yellow-border hover:bg-yellow-subtlest-hovered active:bg-yellow-subtlest-pressed text-yellow-text border-2 p-1">
				yellow-subtlest
			</div>
			<div className="bg-yellow-bold border-yellow-border hover:bg-yellow-bold-hovered active:bg-yellow-bold-pressed text-yellow-text-inverse border-2 p-1">
				yellow-bold
			</div>
			{/* pink */}
			<div className="bg-pink border-pink-border hover:bg-pink-hovered active:bg-pink-pressed text-pink-text-bold border-2 p-1">
				pink
			</div>
			<div className="bg-pink-subtle border-pink-border hover:bg-pink-subtle-hovered active:bg-pink-subtle-pressed text-pink-text border-2 p-1">
				pink-subtle
			</div>
			<div className="bg-pink-subtlest border-pink-border hover:bg-pink-subtlest-hovered active:bg-pink-subtlest-pressed text-pink-text border-2 p-1">
				pink-subtlest
			</div>
			<div className="bg-pink-bold border-pink-border hover:bg-pink-bold-hovered active:bg-pink-bold-pressed text-pink-text-inverse border-2 p-1">
				pink-bold
			</div>
			{/* fuchsia */}
			<div className="bg-fuchsia border-fuchsia-border hover:bg-fuchsia-hovered active:bg-fuchsia-pressed text-fuchsia-text-bold border-2 p-1">
				fuchsia
			</div>
			<div className="bg-fuchsia-subtle border-fuchsia-border hover:bg-fuchsia-subtle-hovered active:bg-fuchsia-subtle-pressed text-fuchsia-text border-2 p-1">
				fuchsia-subtle
			</div>
			<div className="bg-fuchsia-subtlest border-fuchsia-border hover:bg-fuchsia-subtlest-hovered active:bg-fuchsia-subtlest-pressed text-fuchsia-text border-2 p-1">
				fuchsia-subtlest
			</div>
			<div className="bg-fuchsia-bold border-fuchsia-border hover:bg-fuchsia-bold-hovered active:bg-fuchsia-bold-pressed text-fuchsia-text-inverse border-2 p-1">
				fuchsia-bold
			</div>
			{/* purple */}
			<div className="bg-purple border-purple-border hover:bg-purple-hovered active:bg-purple-pressed text-purple-text-bold border-2 p-1">
				purple
			</div>
			<div className="bg-purple-subtle border-purple-border hover:bg-purple-subtle-hovered active:bg-purple-subtle-pressed text-purple-text border-2 p-1">
				purple-subtle
			</div>
			<div className="bg-purple-subtlest border-purple-border hover:bg-purple-subtlest-hovered active:bg-purple-subtlest-pressed text-purple-text border-2 p-1">
				purple-subtlest
			</div>
			<div className="bg-purple-bold border-purple-border hover:bg-purple-bold-hovered active:bg-purple-bold-pressed text-purple-text-inverse border-2 p-1">
				purple-bold
			</div>
			{/* violet */}
			<div className="bg-violet border-violet-border hover:bg-violet-hovered active:bg-violet-pressed text-violet-text-bold border-2 p-1">
				violet
			</div>
			<div className="bg-violet-subtle border-violet-border hover:bg-violet-subtle-hovered active:bg-violet-subtle-pressed text-violet-text border-2 p-1">
				violet-subtle
			</div>
			<div className="bg-violet-subtlest border-violet-border hover:bg-violet-subtlest-hovered active:bg-violet-subtlest-pressed text-violet-text border-2 p-1">
				violet-subtlest
			</div>
			<div className="bg-violet-bold border-violet-border hover:bg-violet-bold-hovered active:bg-violet-bold-pressed text-violet-text-inverse border-2 p-1">
				violet-bold
			</div>
			{/* indigo */}
			<div className="bg-indigo border-indigo-border hover:bg-indigo-hovered active:bg-indigo-pressed text-indigo-text-bold border-2 p-1">
				indigo
			</div>
			<div className="bg-indigo-subtle border-indigo-border hover:bg-indigo-subtle-hovered active:bg-indigo-subtle-pressed text-indigo-text border-2 p-1">
				indigo-subtle
			</div>
			<div className="bg-indigo-subtlest border-indigo-border hover:bg-indigo-subtlest-hovered active:bg-indigo-subtlest-pressed text-indigo-text border-2 p-1">
				indigo-subtlest
			</div>
			<div className="bg-indigo-bold border-indigo-border hover:bg-indigo-bold-hovered active:bg-indigo-bold-pressed text-indigo-text-inverse border-2 p-1">
				indigo-bold
			</div>
			{/* gray */}
			<div className="bg-gray border-gray-border hover:bg-gray-hovered active:bg-gray-pressed text-gray-text-bold border-2 p-1">
				gray
			</div>
			<div className="bg-gray-subtle border-gray-border hover:bg-gray-subtle-hovered active:bg-gray-subtle-pressed text-gray-text border-2 p-1">
				gray-subtle
			</div>
			<div className="bg-gray-subtlest border-gray-border hover:bg-gray-subtlest-hovered active:bg-gray-subtlest-pressed text-gray-text border-2 p-1">
				gray-subtlest
			</div>
			<div className="bg-gray-bold border-gray-border hover:bg-gray-bold-hovered active:bg-gray-bold-pressed text-gray-text-inverse border-2 p-1">
				gray-bold
			</div>
		</div>
	)
}
//#endregion colorstest

export default function LayeringShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Colors"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Not a component but only a showcase of the color system."
			examples={[
				{
					title: "Colors",
					example: <Colors />,
					sourceCodeExampleId: "colorstest",
				},
			]}
		/>
	)
}

import React, { FormEvent, useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	Button,
	ButtonGroup,
	DateRangePicker,
	DateType,
	DateTypeFormatString,
	Input,
	Label,
} from "@linked-planet/ui-kit-ts"
import dayjs from "dayjs"
import { SubmitHandler, useForm } from "react-hook-form"

//#region date-range-picker
function Example() {
	const today = dayjs().format(DateTypeFormatString) as DateType
	const todayPlus2 = dayjs()
		.add(2, "day")
		.format(DateTypeFormatString) as DateType
	const todayPlus10 = dayjs()
		.add(10, "day")
		.format(DateTypeFormatString) as DateType

	const [startDate, setStartDate] = useState<DateType>()
	const [endDate, setEndDate] = useState<DateType>()
	const [weekendDisabled, setWeekendDisabled] = useState(false)
	const [disabled, setDisabled] = useState(false)

	return (
		<div style={{ minWidth: 300 }}>
			<div
				style={{
					display: "grid",
					gridTemplateColumns: "1fr 1fr",
				}}
			>
				<div>Start Date: {startDate}</div>
				<div>End Date: {endDate}</div>
				<label htmlFor="disableWeekends">
					<input
						id="disableWeekends"
						type="checkbox"
						onChange={(e) => {
							if (e.target.checked) {
								setWeekendDisabled(true)
							} else {
								setWeekendDisabled(false)
							}
						}}
					/>
					Disable Weekends
				</label>
				<label htmlFor="disableAll">
					<input
						id="disableAll"
						type="checkbox"
						onChange={(e) => {
							if (e.target.checked) {
								setDisabled(true)
							} else {
								setDisabled(false)
							}
						}}
					/>
					Disabled
				</label>
			</div>
			<DateRangePicker
				minDate={today}
				maxDate={todayPlus10}
				disabledDates={[todayPlus2]}
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				onDateRangeSelected={(start: DateType, end: DateType) => {
					//setStartDate(start)
					//setEndDate(end)
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
					setStartDate(date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
					setEndDate(date)
				}}
				selectedStartDate={startDate}
				selectedEndDate={endDate}
				weekStartDate={1}
				disableWeekend={weekendDisabled}
				disabled={disabled}
			/>
		</div>
	)
	//#region date-range-picker
}

//#region date-range-picker-2
function Example2() {
	const selectedStartDate = dayjs()
		.set("year", 1911)
		.set("month", 1) //month are 0-indexed in dayjs!
		.set("date", 11)
		.format(DateTypeFormatString) as DateType
	const selectedEndDate = dayjs()
		.set("year", 1911)
		.set("month", 1)
		.set("date", 16)
		.format(DateTypeFormatString) as DateType

	return (
		<>
			<p>No onChange handler, selection will not change.</p>
			<p>Initial calendar view gets derived from selected start date</p>
			<DateRangePicker
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				selectedStartDate={selectedStartDate}
				selectedEndDate={selectedEndDate}
				weekStartDate={1}
				invalid
				onDateRangeSelected={(start: string, end: string) => {
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
				}}
				//readOnly
			/>
		</>
	)
}
//#endregion date-range-picker-2

//#region date-range-picker-3
function Example3() {
	const viewDefaultMonth = 8
	const viewDefaultYear = 1985
	const viewDefaultDay = 2

	const selectedStartDate = "1985-08-02" as DateType
	const selectedEndDate = "1985-08-02" as DateType

	return (
		<>
			<p>No onChange handler, selection will not change.</p>
			<p>Used viewDefault properties to set the initial calendar view.</p>
			<DateRangePicker
				locale="de-DE"
				onCollision={() => console.info("Collision detected")}
				viewDefaultMonth={viewDefaultMonth}
				viewDefaultYear={viewDefaultYear}
				viewDefaultDay={viewDefaultDay}
				weekStartDate={1}
				selectedStartDate={selectedStartDate}
				selectedEndDate={selectedEndDate}
				onDateRangeSelected={(start: string, end: string) => {
					console.info("Date range selected", start, end)
				}}
				onStartDateSelected={(date: DateType) => {
					console.info("Start date selected", date)
				}}
				onEndDateSelected={(date: DateType | undefined) => {
					if (date) {
						console.info("End date selected", date)
					} else {
						console.info("End date cleared")
					}
				}}
			/>
		</>
	)
}
//#endregion date-range-picker-3

//#region date-range-picker-form

type FormData = {
	dateRange: [DateType, DateType]
	dateRangeControlled: [DateType, DateType]
}

function ExampleForm() {
	const {
		control,
		formState: { isValid, isDirty, errors },
		handleSubmit,
		reset,
	} = useForm<FormData>({
		defaultValues: {
			dateRange: ["1985-08-02", "1985-08-12"],
		},
	})

	const onSubmit: SubmitHandler<FormData> = (data) => {
		console.log("DATA", data)
	}

	const onReset = (e: FormEvent) => {
		e.preventDefault()
		console.log("RESET")
		reset()
	}

	const [startDateControlled, setStartDateControlled] =
		useState<DateType>("1999-12-23")
	const [endDateControlled, setEndDateControlled] = useState<
		DateType | undefined
	>("1999-12-25")

	return (
		<form onSubmit={handleSubmit(onSubmit)} onReset={onReset}>
			<div className="flex gap-4">
				<div>
					<Label>Uncontrolled</Label>
					<DateRangePicker<FormData>
						control={control}
						name="dateRange"
						locale="de-DE"
						onCollision={() => console.info("Collision detected")}
						weekStartDate={1}
						onDateRangeSelected={(start: string, end: string) => {
							console.info("Date range selected", start, end)
						}}
						onStartDateSelected={(date: DateType) => {
							console.info("Start date selected", date)
						}}
						onEndDateSelected={(date: DateType | undefined) => {
							if (date) {
								console.info("End date selected", date)
							} else {
								console.info("End date cleared")
							}
						}}
						required
					/>
				</div>
				<div>
					<Label>Controlled</Label>
					<Input
						type="date"
						value={startDateControlled}
						onChange={(e) => {
							setStartDateControlled(e.target.value as DateType)
						}}
					/>
					<Input
						type="date"
						value={endDateControlled}
						onChange={(e) => {
							setEndDateControlled(e.target.value as DateType)
						}}
					/>

					<DateRangePicker<FormData>
						control={control}
						name="dateRangeControlled"
						locale="de-DE"
						selectedStartDate={startDateControlled}
						selectedEndDate={endDateControlled}
						onCollision={() => console.info("Collision detected")}
						weekStartDate={1}
						onStartDateSelected={(date: DateType) => {
							setStartDateControlled(date)
						}}
						onEndDateSelected={(date: DateType | undefined) => {
							setEndDateControlled(date)
						}}
						invalid={!!errors.dateRangeControlled}
						required
					/>
				</div>
			</div>
			<ButtonGroup className="w-full justify-end">
				<Button appearance="subtle" type="reset" disabled={!isDirty}>
					Reset
				</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion date-range-picker-form

function DateRangePickerShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Date Range Picker"
			{...props}
			packages={[
				{
					name: "@atlaskit/calendar",
					url: "https://atlassian.design/components/calendar/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: <Example />,
					sourceCodeExampleId: "date-range-picker",
				},
				{
					title: "Example 2",
					example: <Example2 />,
					sourceCodeExampleId: "date-range-picker-2",
				},
				{
					title: "Example 3",
					example: <Example3 />,
					sourceCodeExampleId: "date-range-picker-3",
				},
				{
					title: "Example Form",
					example: <ExampleForm />,
					sourceCodeExampleId: "date-range-picker-form",
				},
			]}
		/>
	)
}

export default DateRangePickerShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	Button,
	ButtonGroup,
	DateTimePicker,
	DatePicker,
	TimePicker,
	DateType,
	type TimeType,
} from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

type FormData = {
	dateTime: string
	time: TimeType
	date: DateType
}

//#region datetime-picker-form
function FormExample() {
	const { handleSubmit, control, reset } = useForm<FormData>({
		defaultValues: {
			dateTime: "2023-12-24T10:00+0100",
			time: "10:10",
			date: "2023-12-24",
		},
	})

	return (
		<form
			onSubmit={handleSubmit((data) => console.log("DATA:", data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<div className="flex flex-col gap-2">
				<DateTimePicker control={control} name="dateTime" />
				<hr />
				<TimePicker control={control} name="time" />
				<hr />
				<DatePicker control={control} name="date" />
			</div>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button appearance="subtle" type="reset">
					Reset
				</Button>
				<Button appearance="primary" type="submit">
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion datetime-picker-form

//#region datetime-picker-form-controlled
function ControlledFormExample() {
	const [selectedDate, setSelectedDate] = useState<DateType>("1999-12-23")
	const [selectedTime, setSelectedTime] = useState<TimeType>("10:10")
	const [selectedDateTime, setSelectedDateTime] = useState<string>(
		"1999-12-23T10:10+0100",
	)

	const { handleSubmit, control, reset } = useForm<FormData>()

	return (
		<form
			onSubmit={handleSubmit((data) => console.log("DATA:", data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<div className="flex flex-col gap-2">
				<div className="w-[13.3rem] overflow-hidden">
					<DateTimePicker
						control={control}
						value={selectedDateTime}
						onChange={setSelectedDateTime}
						name="dateTime"
					/>
				</div>
				<hr />
				<div className="w-24 overflow-hidden">
					<TimePicker
						control={control}
						value={selectedTime}
						onChange={setSelectedTime}
						name="time"
					/>
				</div>
				<hr />
				<div className="w-[8.3rem] overflow-hidden">
					<DatePicker
						control={control}
						value={selectedDate}
						onChange={setSelectedDate}
						name="date"
					/>
				</div>
			</div>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button appearance="subtle" type="reset">
					Reset
				</Button>
				<Button appearance="primary" type="submit">
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion datetime-picker-form-controlled

function DateTimePickerShowcase(props: ShowcaseProps) {
	//#region datetime-picker
	const example = (
		<div className="flex min-w-[300] gap-4">
			<DateTimePicker />
		</div>
	)
	//#endregion datetime-picker

	return (
		<ShowcaseWrapperItem
			name="Date Time Picker"
			{...props}
			packages={[
				{
					name: "@atlaskit/datetime-picker",
					url: "https://atlassian.design/components/datetime-picker/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "datetime-picker",
				},
				{
					title: "Form Uncontrolled",
					example: <FormExample />,
					sourceCodeExampleId: "datetime-picker-form",
				},
				{
					title: "Form Controlled",
					example: <ControlledFormExample />,
					sourceCodeExampleId: "datetime-picker-form-controlled",
				},
			]}
		/>
	)
}

export default DateTimePickerShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKDropdownMenu, {
	DropdownItemCheckbox as AKDropdownItemCheckbox,
	DropdownItemGroup as AKDropdownItemGroup,
	DropdownItem as AKDropdownItem,
	DropdownItemRadioGroup as AKDropdownItemRadioGroup,
	DropdownItemRadio as AKDropdownItemRadio,
	DropdownItemCheckboxGroup as AKDropdownItemCheckboxGroup,
} from "@atlaskit/dropdown-menu"

import { Dropdown } from "@linked-planet/ui-kit-ts"
import { ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons"

function DropDownMenuShowcase(props: ShowcaseProps) {
	const [radioValue, setRadioValue] = useState("testval1")
	const [checkBoxes, setCheckBoxes] = useState<string[]>([])

	const handleRadioChange = (value: string) => {
		setRadioValue(value)
	}

	const handleCheckboxChange = (value: string) => {
		if (checkBoxes.includes(value)) {
			setCheckBoxes(checkBoxes.filter((c) => c !== value))
		} else {
			setCheckBoxes([...checkBoxes, value])
		}
	}

	const akExample = (
		<>
			<AKDropdownMenu trigger={"Trigger"}>
				<AKDropdownItemCheckbox
					id="item-1"
					description={"test description"}
					isSelected={checkBoxes.includes("item-1")}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-2"
					isSelected={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</AKDropdownItemCheckbox>
				<AKDropdownItemCheckbox
					id="item-3"
					isDisabled={true}
					isSelected={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</AKDropdownItemCheckbox>
				<AKDropdownItemGroup title="test group" hasSeparator>
					<AKDropdownItem
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</AKDropdownItem>
					<AKDropdownItem isSelected>
						Second dropdown item
					</AKDropdownItem>
					<AKDropdownItem isDisabled>
						Disabled dropdown item
					</AKDropdownItem>
				</AKDropdownItemGroup>
				<AKDropdownItem>After group dropdown item</AKDropdownItem>
				<AKDropdownItemRadioGroup
					id="dropdown-item-radio-it"
					hasSeparator
					title="test title"
				>
					<AKDropdownItemRadio
						id="radio-1"
						description={"another description"}
						isSelected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-2"
						isSelected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</AKDropdownItemRadio>
					<AKDropdownItemRadio
						id="radio-3"
						isSelected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</AKDropdownItemRadio>
					<AKDropdownItemRadio id="radio-4" isDisabled>
						Radio Disabled
					</AKDropdownItemRadio>
				</AKDropdownItemRadioGroup>
				<AKDropdownItemCheckboxGroup id="some-id">
					<AKDropdownItemCheckbox id="checkbox-1">
						Checkbox 1
					</AKDropdownItemCheckbox>
					<AKDropdownItemCheckbox id="checkbox-2">
						Checkbox 2
					</AKDropdownItemCheckbox>
				</AKDropdownItemCheckboxGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<AKDropdownItem key={i}>long test item {i}</AKDropdownItem>
				))}
			</AKDropdownMenu>
		</>
	)

	//#region dropdown-menu
	const lpExample = (
		<>
			<Dropdown.Menu
				trigger="Dropdown"
				side={"right"}
				align="center"
				appearance="primary"
			>
				<Dropdown.ItemCheckbox
					selected={checkBoxes.includes("item-1")}
					description={"test description"}
					onClick={() => handleCheckboxChange("item-1")}
				>
					Dropdown Checkbox Item 1
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					selected={checkBoxes.includes("item-2")}
					onClick={() => handleCheckboxChange("item-2")}
				>
					Dropdown Checkbox Item 2
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemCheckbox
					disabled={true}
					selected={checkBoxes.includes("item-3")}
					onClick={() => handleCheckboxChange("item-3")}
				>
					Dropdown Checkbox Item 3
				</Dropdown.ItemCheckbox>
				<Dropdown.ItemGroup title="test group" hasSeparator>
					<Dropdown.Item
						description={"group item test description"}
						elemAfter={<div>A</div>}
						elemBefore={<div>B</div>}
					>
						First dropdown item
					</Dropdown.Item>
					<Dropdown.Item selected>Second dropdown item</Dropdown.Item>
					<Dropdown.Item disabled>
						Disabled dropdown item
					</Dropdown.Item>
				</Dropdown.ItemGroup>
				<Dropdown.Item>After group dropdown item</Dropdown.Item>
				<Dropdown.SubMenu trigger="submenu">
					<Dropdown.Item>Submenu Entry</Dropdown.Item>
				</Dropdown.SubMenu>
				<Dropdown.ItemRadioGroup hasSeparator title="test title">
					<Dropdown.ItemRadio
						value="radio-1"
						description={"another description"}
						selected={radioValue === "testval1"}
						onClick={() => handleRadioChange("testval1")}
					>
						Radio 1
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-2"
						selected={radioValue === "radio-2"}
						onClick={() => handleRadioChange("radio-2")}
					>
						Radio 2
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-3"
						selected={radioValue === "radio-3"}
						onClick={() => handleRadioChange("radio-3")}
					>
						Radio 3
					</Dropdown.ItemRadio>
					<Dropdown.ItemRadio
						value="radio-4"
						disabled
						selected={radioValue === "radio-4"}
						onClick={() => handleRadioChange("radio-4")}
					>
						Radio Disabled
					</Dropdown.ItemRadio>
				</Dropdown.ItemRadioGroup>
				{Array.from(Array(100).keys()).map((i) => (
					<Dropdown.Item key={i}>long test item {i}</Dropdown.Item>
				))}
			</Dropdown.Menu>
		</>
	)

	const lpExample2 = (
		<>
			<Dropdown.Menu trigger="Dropdown 2" usePortal>
				<Dropdown.Item>Test 1</Dropdown.Item>
				<Dropdown.Item>Test 2</Dropdown.Item>
			</Dropdown.Menu>
			<Dropdown.Menu
				trigger={({ opened }: { opened: boolean }) => (
					<div className="hover:bg-neutral-hovered active:bg-neutral-pressed flex select-none items-center justify-center rounded bg-transparent p-1.5">
						trigger{" "}
						{opened ? <ChevronUpIcon /> : <ChevronDownIcon />}
					</div>
				)}
				usePortal
			>
				<Dropdown.Item>Test 1</Dropdown.Item>
				<Dropdown.Item>Test 2</Dropdown.Item>
			</Dropdown.Menu>
		</>
	)

	//#endregion dropdown-menu

	const example = (
		<div className="flex gap-4">
			{akExample}
			{lpExample}
			{lpExample2}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Dropdown menu"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Dropdown",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "dropdown-menu",
				},
			]}
		/>
	)
}

export default DropDownMenuShowcase

import React, { ReactNode, useMemo } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import DynamicTable from "@atlaskit/dynamic-table"
import Button from "@atlaskit/button"
import {
	type ColumnDef,
	type ColumnFilter,
	DataTable,
	Input,
	Label,
	Checkbox,
} from "@linked-planet/ui-kit-ts"

//#region table-example
function AKDynamicTableExample() {
	return (
		<div style={{ minWidth: 300 }}>
			<DynamicTable
				caption=""
				head={{
					cells: [
						{
							key: "first",
							content: "First col",
							isSortable: true,
						},
						{
							key: "second",
							content: "Second col",
							isSortable: true,
						},
						{ key: "third", content: <span>Action col</span> },
					],
				}}
				rowsPerPage={3}
				rows={[
					{
						key: "1stRow",
						cells: [
							{ content: "1-1" },
							{ content: "1-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "2ndRow",
						cells: [
							{ content: "2-1" },
							{ content: "2-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "3rdRow",
						cells: [
							{ content: "3-1" },
							{ content: "3-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "4thRow",
						cells: [
							{ content: "4-1" },
							{ content: "4-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "5thRow",
						cells: [
							{ content: "5-1" },
							{ content: "5-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
					{
						key: "6thRow",
						cells: [
							{ content: "6-1" },
							{ content: "6-2" },
							{
								content: (
									<Button appearance="primary">Delete</Button>
								),
							},
						],
					},
				]}
				onSort={(item) => console.log("Sorting", item)}
				onSetPage={(pageNumber) =>
					console.log("SetPageNumber", pageNumber)
				}
			></DynamicTable>
		</div>
	)
}
//#endregion table-example

//#region datatable-example
type RowData = {
	firstName: string
	lastName: string
	city: string
	zip: number
	state: string
	button: ReactNode
}

function DataTableExample() {
	const rows = useMemo(() => {
		// create 100 example rows
		const rows: RowData[] = []
		for (let i = 0; i < 100; i++) {
			rows.push({
				firstName: `First ${i}`,
				lastName: `Last ${i}`,
				city: `City ${Math.floor(i / 2)}`,
				zip: i,
				state: `State ${i}`,
				button: <Button appearance="primary">Delete</Button>,
			})
		}
		return rows
	}, [])

	// see: https://tanstack.com/table/v8/docs/guide/column-defs#creating-accessor-columns
	const columns = useMemo(() => {
		const ret: ColumnDef<RowData>[] = [
			{
				id: "select", // either header or ID should be present
				header: (headerprops) => (
					<Checkbox
						checked={
							headerprops.table.getIsAllPageRowsSelected() ||
							(headerprops.table.getIsSomePageRowsSelected() &&
								"indeterminate")
						}
						onCheckedChange={(value) =>
							headerprops.table.toggleAllPageRowsSelected(!!value)
						}
						className="pb-1.5 pl-2"
						indeterminate
					/>
				),
				cell: (cellprops) => (
					<Checkbox
						checked={cellprops.row.getIsSelected()}
						onCheckedChange={() => {
							cellprops.row.toggleSelected()
						}}
						className="pl-2"
					/>
				),
			},
			{
				id: "Full Name", // either header or ID should be present
				accessorFn: (row) => `${row.firstName} ${row.lastName}`,
			},
			{
				//accessorFn: (row) => row.city,
				header: "City",
				accessorKey: "city",
				enableGrouping: true,
				enableSorting: true,
				cell: (cellprops) => <b>{cellprops.getValue()}</b>,
			},
			{
				header: "Zip",
				accessorKey: "zip",
				enableGrouping: true,
				invertSorting: true,
			},
			{
				header: "State",
				accessorKey: "state",
				enableGrouping: true,
				invertSorting: true,
			},
			{
				header: "Button",
				accessorKey: "button",
				cell: (cellprops) => cellprops.getValue(),
			},
		]
		return ret
	}, [])

	const [fullNameFilter, setFullNameFilter] = React.useState<ColumnFilter>()
	const [cityFilter, setCityFilter] = React.useState<ColumnFilter>()
	const [hideState, setHideState] = React.useState<boolean>(false)

	const filters = []
	if (fullNameFilter) filters.push(fullNameFilter)
	if (cityFilter) filters.push(cityFilter)

	const visibilityState = {
		state: !hideState,
	}

	return (
		<>
			<Label htmlFor="search">Search Full Name</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setFullNameFilter({ id: "Full Name", value: val })
				}}
			/>
			<Label htmlFor="search">Search City</Label>
			<Input
				type="text"
				placeholder="Search"
				onChange={(e) => {
					const val = e.target.value
					setCityFilter({ id: "city", value: val })
				}}
				className="mb-4"
			/>
			<Label htmlFor="hideState">Hide State</Label>
			<Checkbox
				label="Hide State"
				checked={hideState}
				onCheckedChange={setHideState}
			/>
			<div className="bg-surface h-96 overflow-hidden">
				<DataTable
					data={rows}
					columns={columns}
					columnFilters={filters}
					columnVisibility={visibilityState}
				/>
			</div>
		</>
	)
}
//#endregion datatable-example

function DynamicTableShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Dynamic table"
			{...props}
			packages={[
				{
					name: "@atlaskit/dynamic-table",
					url: "https://atlassian.design/components/dynamic-table/examples",
				},
			]}
			examples={[
				{
					title: "AK Dynamic Table",
					example: <AKDynamicTableExample />,
					sourceCodeExampleId: "table-example",
				},
				{
					title: "Data Table",
					example: <DataTableExample />,
					sourceCodeExampleId: "datatable-example",
				},
			]}
		/>
	)
}

export default DynamicTableShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Button from "@atlaskit/button"
import EmptyState from "@atlaskit/empty-state"

function EmptyStateShowcase(props: ShowcaseProps) {
	//#region empty-state
	const example = (
		<div style={{ minWidth: 300 }}>
			<EmptyState
				header="Empty state"
				description={<span>Content of this state</span>}
				primaryAction={<Button>Dummy button</Button>}
			/>
		</div>
	)
	//#endregion empty-state

	return (
		<ShowcaseWrapperItem
			name="Empty state"
			{...props}
			packages={[
				{
					name: "@atlaskit/empty-state",
					url: "https://atlassian.design/components/empty-state/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "empty-state",
				},
			]}
		/>
	)
}

export default EmptyStateShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"
import {
	FilterCard,
	FilterCards,
	FilterDropdown,
	FilterDropdowns,
	PageLayout,
} from "@linked-planet/ui-kit-ts"
import type { FilterType } from "@linked-planet/ui-kit-ts"
//import Avatar, { AvatarItem } from "@atlaskit/avatar"

function FiltersShowcase(props: ShowcaseProps) {
	//#region filtercard

	const [selectedValues, setSelectedValues] = useState<string[]>([
		"chocolate",
		"vanilla",
		"banana",
	])

	const filter: FilterType = {
		attributeName: "Ice Creams",
		availableValues: [
			"strawberry",
			"chocolate",
			"vanilla",
			"mint",
			"banana",
			"orange",
			"apple",
			"lemon",
			"grapefruit",
			"pistaccio",
			"coconut",
			"cherry",
			"blackberry",
			"blueberry",
			"tiramisu",
			"malaga",
			"toffee",
			"cookie",
			"mango",
			"kiwi",
			"lime",
			"peach",
			"apricot",
		],
		selectableValues: [
			"strawberry",
			"chocolate",
			"vanilla",
			"mint",
			//"banana",
			"orange",
			"apple",
			"lemon",
			"grapefruit",
			"cherry",
			"blackberry",
			"blueberry",
			"toffee",
			"cookie",
			"mango",
			"kiwi",
			"lime",
			"peach",
			"apricot",
		],
		selectedValues,
	}

	const filterCardExample = (
		<FilterCard
			filter={filter}
			onAttributeClick={(cat, attr) => {
				setSelectedValues((old) => {
					const newSelected = [...old]
					const index = newSelected.indexOf(attr)
					if (index >= 0) {
						newSelected.splice(index, 1)
					} else {
						newSelected.push(attr)
					}
					return newSelected
				})
			}}
			onSelectedChanged={(cat, attrs) => {
				setSelectedValues(attrs)
			}}
			className="max-h-[20rem]"
		/>
	)
	//#endregion filtercard

	//#region filtercards
	const filters: FilterType[] = [
		filter,
		{
			attributeName: "Fruits",
			availableValues: [
				"apple",
				"banana",
				"orange",
				"strawberry",
				"grape",
				"cherry",
				"pear",
				"peach",
				"plum",
				"pineapple",
				"mango",
				"kiwi",
				"lemon",
				"lime",
				"coconut",
				"avocado",
				"apricot",
				"blackberry",
				"blueberry",
				"cranberry",
				"fig",
				"grapefruit",
				"guava",
				"honeydew",
				"kumquat",
				"lychee",
				"nectarine",
				"papaya",
				"passionfruit",
				"persimmon",
				"pomegranate",
				"raspberry",
				"starfruit",
				"tangerine",
				"watermelon",
			],
			selectableValues: ["apple", "banana", "orange"],
			selectedValues,
		},
		{
			attributeName: "Vegetables",
			availableValues: ["tomato", "carrot", "cucumber", "potato"],
			selectableValues: ["tomato", "carrot", "cucumber"],
			selectedValues: ["tomato", "carrot"],
		},
		{
			attributeName: "Drinks",
			availableValues: ["water", "cola", "juice", "beer"],
			selectableValues: ["water", "cola", "juice"],
			selectedValues: ["water", "cola"],
		},
	]

	const filterCardsExample = (
		<FilterCards
			filters={filters}
			onAttributeClick={(cat, attr) => {
				if (cat !== "Ice Creams") {
					console.info(
						"onAttributeClick",
						cat,
						attr,
						"only Ice Cream is supported",
					)
					return
				}
				setSelectedValues((old) => {
					const newSelected = [...old]
					const index = newSelected.indexOf(attr)
					if (index >= 0) {
						newSelected.splice(index, 1)
					} else {
						newSelected.push(attr)
					}
					return newSelected
				})
			}}
			onSelectedChanged={(cat, attrs) => {
				if (cat !== "Ice Creams") {
					console.info(
						"onAttributeClick",
						cat,
						attrs,
						"only Ice Cream is supported",
					)
					return
				}
				console.log("onSelectedChanged", attrs)
				setSelectedValues(attrs)
			}}
			className="max-h-[20rem]"
		/>
	)
	//#endregion filtercards

	//#region filterdropdown
	const filterDropdownExample = (
		<FilterDropdown
			filter={filter}
			onAttributeClick={(cat, attr) => {
				console.log("CLICK", cat, attr)
			}}
			onSelectedChanged={(cat, attrs) => {
				console.log("SET", attrs)
				setSelectedValues(attrs)
			}}
		/>
	)
	//#endregion filterdropdown

	//#region filterdropdowns
	const filterDropdownsExample = (
		<>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle>
						Filters
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderLine>
						<FilterDropdowns
							className="w-full"
							filters={filters}
							onSelectedChanged={(cat, attrs) => {
								if (cat !== "Ice Creams") {
									console.info(
										"onAttributeClick",
										cat,
										attrs,
										"only Ice Cream is supported",
									)
									return
								}
								console.log("onSelectedChanged", attrs)
								setSelectedValues(attrs)
							}}
						/>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyHeader>
						Body Header
					</PageLayout.PageBodyHeader>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</>
	)
	//#endregion filterdropdowns

	return (
		<ShowcaseWrapperItem
			name="Filters"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Filters",
				},
			]}
			examples={[
				{
					title: "FilterCard",
					example: filterCardExample,
					sourceCodeExampleId: "filtercard",
				},
				{
					title: "FilterCards",
					example: filterCardsExample,
					sourceCodeExampleId: "filtercards",
				},
				{
					title: "FilterDropdown",
					example: filterDropdownExample,
					sourceCodeExampleId: "filterdropdown",
				},
				{
					title: "FilterDropdowns",
					example: filterDropdownsExample,
					sourceCodeExampleId: "filterdropdowns",
				},
			]}
		/>
	)
}

export default FiltersShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Flag, ToastFlagContainer, showFlag } from "@linked-planet/ui-kit-ts"
import WarningIcon from "@atlaskit/icon/glyph/warning"

function FlagShowcase(props: ShowcaseProps) {
	//#region flag
	const example = (
		<div className="flex flex-col gap-3">
			<Flag
				title="Flag"
				icon={<WarningIcon label="" />}
				description="Action Flag"
				id="testflag"
				testId="testflag"
				actions={[
					{
						content: "Action",
						onClick: () => {
							console.log("Action clicked")
							showFlag({
								title: "Flag",
								description: "Action Flag",
								autoClose: false,
							})
						},
					},
				]}
			/>
			<Flag
				title="Flag"
				description="Action Flag"
				actions={[{ content: "Action", onClick: () => {} }]}
				inverted
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
			/>

			<Flag
				title="Flag"
				description="Success Flag"
				appearance="success"
				inverted
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
			/>

			<Flag
				title="Flag"
				description="Warning Flag"
				appearance="warning"
				inverted
			/>

			<Flag title="Flag" description="Error Flag" appearance="error" />

			<Flag
				title="Flag"
				description="Error Flag"
				appearance="error"
				inverted
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				inverted={false}
				actions={[{ content: "Action", onClick: () => {} }]}
			/>

			<Flag
				title="Flag"
				description="Information Flag"
				appearance="information"
				inverted
			/>
			<ToastFlagContainer />
		</div>
	)
	//#endregion flag

	return (
		<ShowcaseWrapperItem
			name="Flag"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://atlassian.design/components/flag/examples",
				},
			]}
			description="Drop in replacement for the @atlaskit/flag component."
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "flag" },
			]}
		/>
	)
}

export default FlagShowcase

import React, { Fragment } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Form, {
	CheckboxField,
	Field,
	Fieldset,
	FormFooter,
	FormHeader,
	FormSection,
	HelperMessage,
} from "@atlaskit/form"
import TextField from "@atlaskit/textfield"
import Button, { ButtonGroup, LoadingButton } from "@atlaskit/button"
import Checkbox from "@atlaskit/checkbox"
import Select, {
	CreatableSelect,
	OptionType,
	ValueType,
} from "@atlaskit/select"

function FormShowcase(props: ShowcaseProps) {
	//#region form
	interface TestData {
		name: string
		readonlyField: string
		disabledField: string
		surname: string
		checkboxGroup: string[]
		favoriteColor: "RED" | "BLUE"
		favoriteColorCreatable: string
	}

	const initFormData = {
		name: "Carl",
		readonlyField: "Read-only Field",
		disabledField: "Disabled Field",
		surname: "Coderrrr",
		checkboxGroup: ["Coder"],
		favoriteColor: "BLUE",
		favoriteColorCreatable: "BLUE",
	}

	const example = (
		<Form
			onSubmit={(formData: TestData) =>
				console.log("Form submit:", formData)
			}
		>
			{({ formProps }) => (
				<form {...formProps}>
					<FormHeader
						title="Give me your input"
						description="I describe this form"
					/>

					<FormSection title="Your data" description="I'm curious">
						<Field
							label="Name"
							name="name"
							defaultValue={initFormData.name}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
									<HelperMessage>Help!</HelperMessage>
								</Fragment>
							)}
						</Field>

						<Field
							label="Read-only Field"
							name="readonlyField"
							defaultValue={initFormData.readonlyField}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField
										readOnly={true}
										{...fieldProps}
									/>
								</Fragment>
							)}
						</Field>

						<Field
							label="Disabled Field"
							name="disabledField"
							defaultValue={initFormData.disabledField}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
								</Fragment>
							)}
						</Field>

						<Field
							label="Surname"
							name="surname"
							defaultValue={initFormData.surname}
						>
							{({ fieldProps }) => (
								<Fragment>
									<TextField {...fieldProps} />
									<HelperMessage>Help!</HelperMessage>
								</Fragment>
							)}
						</Field>

						<Fieldset legend="See more info">
							{["Coder", "React fan"].map((item) => {
								return (
									<CheckboxField
										name="checkboxGroup"
										value={item}
										defaultIsChecked={initFormData.checkboxGroup.includes(
											item,
										)}
										key={item}
									>
										{({ fieldProps }) => (
											<Checkbox
												{...fieldProps}
												label={item}
											/>
										)}
									</CheckboxField>
								)
							})}
						</Fieldset>
					</FormSection>

					<FormSection title="More data" description="Tell me more">
						<Field<ValueType<OptionType>>
							label="Favorite Color"
							name="favoriteColor"
							defaultValue={{
								label: initFormData.favoriteColor,
								value: initFormData.favoriteColor,
							}}
						>
							{({ fieldProps }) => (
								<Fragment>
									<Select
										{...fieldProps}
										inputId="favoriteColor"
										options={[
											{ label: "RED", value: "RED" },
											{ label: "BLUE", value: "BLUE" },
										]}
										defaultValue={{
											label: initFormData.favoriteColor,
											value: initFormData.favoriteColor,
										}}
									/>
								</Fragment>
							)}
						</Field>

						<Field<ValueType<OptionType>>
							label="Favorite Color (Creatable)"
							name="favoriteColorCreatable"
							defaultValue={{
								label: initFormData.favoriteColor,
								value: initFormData.favoriteColor,
							}}
						>
							{({ fieldProps }) => (
								<Fragment>
									<CreatableSelect
										{...fieldProps}
										inputId="favoriteColorCreatable"
										options={[
											{ label: "RED", value: "RED" },
											{ label: "BLUE", value: "BLUE" },
										]}
										defaultValue={{
											label: initFormData.favoriteColorCreatable,
											value: initFormData.favoriteColorCreatable,
										}}
									/>
								</Fragment>
							)}
						</Field>
					</FormSection>

					<FormFooter>
						<ButtonGroup>
							<Button appearance="subtle">Reset</Button>
							<LoadingButton
								type="submit"
								appearance="primary"
								isLoading={false}
							>
								Save
							</LoadingButton>
						</ButtonGroup>
					</FormFooter>
				</form>
			)}
		</Form>
	)
	//#endregion form

	return (
		<ShowcaseWrapperItem
			name="Form"
			{...props}
			packages={[
				{
					name: "@atlaskit/form",
					url: "https://atlassian.design/components/form/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "form" },
			]}
		/>
	)
}

export default FormShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ArrowDownIcon from "@atlaskit/icon/glyph/arrow-down"
import BulletListIcon from "@atlaskit/icon/glyph/bullet-list"
import CheckCircleIcon from "@atlaskit/icon/glyph/check-circle"
import LogIcon from "@atlaskit/icon/glyph/backlog"
import RefreshIcon from "@atlaskit/icon/glyph/refresh"
import SendIcon from "@atlaskit/icon/glyph/send"
import TrashIcon from "@atlaskit/icon/glyph/trash"

function IconShowcase(props: ShowcaseProps) {
	//#region icon
	const example = (
		<div>
			<ArrowDownIcon label="" />
			<BulletListIcon label="" />
			<CheckCircleIcon label="" />
			<LogIcon label="" />
			<RefreshIcon label="" />
			<SendIcon label="" />
			<TrashIcon label="" primaryColor="red" />
		</div>
	)
	//#endregion icon

	return (
		<ShowcaseWrapperItem
			name="Icon"
			{...props}
			packages={[
				{
					name: "@atlaskit/icon",
					url: "https://atlassian.design/components/icon/icon-explorer",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "icon" },
			]}
		/>
	)
}

export default IconShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { IconSizeHelper } from "@linked-planet/ui-kit-ts"

import AddItemIcon from "@atlaskit/icon/glyph/add-item"

export default function IconSizeHelperShowcase(props: ShowcaseProps) {
	//#region iconsizehelper
	const example = (
		<>
			<IconSizeHelper size={67}>
				<AddItemIcon label="" />
			</IconSizeHelper>
			<IconSizeHelper
				size={"2.3rem"}
				className="text-brand bg-warning-bold"
				style={{
					borderRadius: "50%",
				}}
			>
				<AddItemIcon label="" />
			</IconSizeHelper>
		</>
	)
	//#endregion iconsizehelper

	return (
		<ShowcaseWrapperItem
			name="Icon Size Helper"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#IconSizeHelper",
				},
			]}
			examples={[
				{
					title: "Icon Size Helper",
					example: example,
					sourceCodeExampleId: "iconsizehelper",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { InlineMessage } from "@linked-planet/ui-kit-ts"

export default function InlineMessageShowcase(props: ShowcaseProps) {
	//#region inlinemessage
	const example = (
		<>
			<InlineMessage
				message={{ text: "This is a standard inline message." }}
			/>
			<InlineMessage
				message={{
					text: "This is a success inline message.",
					appearance: "success",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a danger inline message.",
					appearance: "danger",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a warning inline message.",
					appearance: "warning",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is an information inline message.",
					appearance: "information",
				}}
			/>
			<InlineMessage
				message={{
					text: "This is a discovery inline message.",
					appearance: "discovery",
				}}
			/>
			<hr />
			<InlineMessage
				message={{
					text: "This is an information message with a timeout.",
					timeOut: 5,
					appearance: "information",
				}}
				openingDirection="topdown"
			/>
			<InlineMessage
				message={{
					text: "This is an discovery message with a timeout and bottom up removal.",
					appearance: "discovery",
				}}
				openingDirection="bottomup"
			/>
			<InlineMessage
				message={{
					text: "This is a not removable message.",
					appearance: "information",
				}}
				removable={false}
			/>
		</>
	)
	//#endregion inlinemessage

	return (
		<ShowcaseWrapperItem
			name="Inline Message"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "inlinemessage",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TextField from "@atlaskit/textfield"
import { Button, ButtonGroup, Input, Label } from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

//#region input-form-example
type FormData = {
	testInput: string
}

function FormExample() {
	const {
		handleSubmit,
		control,
		reset,
		formState: { errors, isValid },
	} = useForm<FormData>({
		defaultValues: {
			testInput: "test",
		},
		mode: "all",
	})

	console.log("errors", errors)

	return (
		<form
			onSubmit={handleSubmit((data) => console.log(data))}
			onReset={(e) => {
				e.preventDefault()
				reset()
			}}
		>
			<Label htmlFor="testInput" required>
				Test Input
			</Label>
			<Input
				{...control.register("testInput", {
					required: true,
					minLength: 3,
				})}
				invalid={!!errors.testInput}
				errorMessage={
					errors.testInput?.type === "required"
						? "Required"
						: "Min length 3"
				}
			/>
			<ButtonGroup className="mt-4 flex justify-end">
				<Button type="reset">Reset</Button>
				<Button appearance="primary" type="submit" disabled={!isValid}>
					Submit
				</Button>
			</ButtonGroup>
		</form>
	)
}
//#endregion input-form-example

export default function InputShowcase(props: ShowcaseProps) {
	const exampleAK = (
		<div className="flex flex-col">
			<TextField />
			<TextField isDisabled />
			<TextField placeholder="Placeholder" />
			<TextField isInvalid value={"invalid"} />
			<TextField isReadOnly value={"readonly"} />
			<TextField type="number" defaultValue={1} />
		</div>
	)

	//#region input
	const exampleLP = (
		<div className="flex flex-col">
			<Input minLength={3} helpMessage="This is a help message." />
			<Input disabled />
			<Input placeholder="Placeholder" />
			<Input
				invalid={true}
				value={"invalid"}
				errorMessage="This is an error message."
			/>
			<Input
				aria-invalid={true}
				value={"aria-invalid"}
				errorMessage="This is an error message."
				helpMessage="This is a help message."
			/>
			<Input readOnly value={"readonly"} />
			<Input type="number" defaultValue={1} />
		</div>
	)
	//#endregion input

	const example = (
		<div className="flex gap-4">
			{exampleAK}
			{exampleLP}
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Input"
			description="Input compatible to use with react-hook-form but with Atlassian fitting styling."
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Input",
				},
			]}
			examples={[
				{
					title: "TextInput",
					example: example,
					sourceCodeExampleId: "input",
				},
				{
					title: "Form Example",
					example: <FormExample />,
					sourceCodeExampleId: "input-form-example",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import ReactJoyride from "react-joyride"
import Button, { ButtonGroup } from "@atlaskit/button"
import { token } from "@atlaskit/tokens"

function JoyrideShowcase(props: ShowcaseProps) {
	//#region joyride
	// fix missing global
	// @ts-expect-error global is not defined
	if (!window.global) window.global = window

	const [isJoyrideActive, setIsJoyrideActive] = useState(false)
	const example = (
		<>
			<div
				style={{
					color: token("color.text.warning", "#990"),
					backgroundColor: token("color.background.neutral", "#fff"),
					padding: "1rem",
				}}
			>
				If you get the error &apos;global is not defined&apos; you have
				to add the following:
				<br></br>
				<div>
					<pre>if (!window.global) window.global = window</pre>
				</div>
			</div>
			<div>
				<ButtonGroup>
					<Button
						isSelected={isJoyrideActive}
						onClick={() => setIsJoyrideActive(true)}
					>
						Start Tour
					</Button>
					<Button className="joyride-first">First step</Button>
					<Button className="joyride-second">Second step</Button>
					<Button className="joyride-third">Third step</Button>
				</ButtonGroup>

				<ReactJoyride
					run={isJoyrideActive}
					continuous={true}
					showProgress={true}
					disableScrolling={false}
					scrollToFirstStep={true}
					scrollOffset={220}
					locale={{
						back: "Zurück",
						close: "Schließen",
						last: "Fertig",
						next: "Weiter",
						open: "Öffnen",
						skip: "Überspringen",
					}}
					callback={(joyrideState) => {
						switch (joyrideState.action) {
							case "close":
								setIsJoyrideActive(false)
								break
							case "reset":
								setIsJoyrideActive(false)
								break
						}
					}}
					steps={[
						{
							title: "First step title",
							target: ".joyride-first",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>First step content...</span>,
						},
						{
							title: "Second step title",
							target: ".joyride-second",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Second step content...</span>,
						},
						{
							title: "Third step title",
							target: ".joyride-third",
							disableBeacon: true,
							showSkipButton: true,
							content: <span>Third step content...</span>,
						},
					]}
				/>
			</div>
		</>
	)
	//#endregion joyride

	return (
		<ShowcaseWrapperItem
			name="Joyride"
			{...props}
			packages={[
				{
					name: "react-joyride",
					url: "https://docs.react-joyride.com/",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "joyride" },
			]}
		/>
	)
}

export default JoyrideShowcase

import React, { useCallback, useMemo } from "react"
import { useState } from "react"
import dayjs, { Dayjs } from "dayjs"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { Button, LPTimeTable } from "@linked-planet/ui-kit-ts"
import type {
	TimeSlotBooking,
	TimeTableEntry,
	TimeTableGroup,
} from "@linked-planet/ui-kit-ts"
import CreateNewTimeTableItemDialog from "@linked-planet/ui-kit-ts/components/timetable/CreateNewItem"
import ChevronLeftIcon from "@atlaskit/icon/glyph/chevron-left"
import ChevronRightIcon from "@atlaskit/icon/glyph/chevron-right"
import ChevronDownIcon from "@atlaskit/icon/glyph/chevron-down"

import { useTranslation } from "@linked-planet/ui-kit-ts/localization/LocaleContext"
import type { TranslatedTimeTableMessages } from "@linked-planet/ui-kit-ts/components/timetable/TimeTableMessageContext"
import { TimeTableViewType } from "@linked-planet/ui-kit-ts/components/timetable/LPTimeTable"

//import "@linked-planet/ui-kit-ts/dist/style.css" //-> this is not necessary in this setup, but in the real library usage

const debounceTimeout = 500
let debounceTimeoutCurrent: number | undefined = undefined
function debounceHelper(callback: () => void) {
	if (debounceTimeoutCurrent) {
		clearTimeout(debounceTimeoutCurrent)
	}
	debounceTimeoutCurrent = setTimeout(() => {
		callback()
	}, debounceTimeout)
}

type ExampleGroup = TimeTableGroup

type ExampleItem = TimeSlotBooking

const exampleEntries: TimeTableEntry<ExampleGroup, ExampleItem>[] = [
	{
		group: {
			title: "Empty Group",
		},
		items: [],
	},
	{
		group: {
			title: "Group 1",
			subtitle: "Group 1 description",
		},
		items: [
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 1-3",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				title: "Item 1-3-1",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(1, "day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				title: "Item 1-4",
			},
			{
				// expected to be on group row 1
				startDate: dayjs().startOf("day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-5",
			},
			{
				// expected to be on group row 2
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(15, "hours")
					.add(10, "minutes"),
				title: "Item 1-6",
			},
			{
				// expected to be on group row 0
				startDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(12, "hours")
					.add(10, "minutes"),
				title: "Item 1-1-2",
			},
			{
				// expected to be on group row 0
				startDate: dayjs().startOf("day").add(13, "hours"),
				endDate: dayjs().startOf("day").add(15, "hours"),
				title: "Item 1-2-2",
			},
		],
	},
	{
		group: {
			title: "Group 2",
			subtitle: "Group 2 description",
		},
		items: [
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(10, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(20, "minutes"),
				title: "Item 2-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(21, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(40, "minutes"),
				title: "Item 2-2",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(41, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(50, "minutes"),
				title: "Item 2-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(8, "hours")
					.add(51, "minutes"),
				endDate: dayjs()
					.startOf("day")
					.add(9, "hours")
					.add(50, "minutes"),
				title: "Item 2-3-1",
			},
			{
				startDate: dayjs().startOf("day").add(8, "hours"),
				endDate: dayjs().startOf("day").add(10, "hours"),
				title: "Item 2-4",
			},
		],
	},
	{
		group: {
			title: "Group 3",
			subtitle: "Group 3 description",
		},
		items: [
			{
				// this entry is totally before the available slots of the day
				startDate: dayjs().startOf("day").add(5, "hours"),
				endDate: dayjs().startOf("day").add(6, "hours"),
				title: "Item 3-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day").add(9, "hours"),
				endDate: dayjs().startOf("day").add(2, "days").add(9, "hours"),
				title: "Item 3-2",
			},
			{
				// this entry is totally after the available slots of the day
				startDate: dayjs().startOf("day").add(17, "hours"),
				endDate: dayjs().startOf("day").add(20, "hours"),
				title: "Item 3-3",
			},
		],
	},
	{
		group: {
			title: "Group 4",
			subtitle: "Group 4 description",
		},
		items: [
			{
				// this case ends after the end of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(16, "hours"),
				title: "Item 4-1",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(8.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(1, "day")
					.add(13.75, "hours"),
				title: "Item 4-2",
			},
			{
				// this case starts before the start of the day
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(7.4, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "days")
					.add(13.75, "hours"),
				title: "Item 4-3",
			},
			{
				startDate: dayjs()
					.startOf("day")
					.add(-1, "day")
					.add(10.2, "hours"),
				endDate: dayjs()
					.startOf("day")
					.add(4, "day")
					.add(13.75, "hours"),
				title: "Item 4-4",
			},
			{
				startDate: dayjs().startOf("day").add(-1, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 4-4-5",
			},
		],
	},
	{
		group: {
			title: "Group 5",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(-2, "day"),
				endDate: dayjs().startOf("day").add(7, "days"),
				title: "Item 5-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(1, "day").add(12, "hours"),
				title: "Item 5-2",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"),
				endDate: dayjs().startOf("day").add(1, "day"),
				title: "Item 5-3",
			},
		],
	},
	{
		group: {
			title: "Group 6 (Directly Connected)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(7, "hours"),
				endDate: dayjs().startOf("day").add(12, "hours"),
				title: "Item 6-1",
			},
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day").add(12, "hours"),
				endDate: dayjs().startOf("day").add(16, "hours"),
				title: "Item 6-1-1",
			},
			{
				startDate: dayjs().startOf("day").add(1, "day"),
				endDate: dayjs().startOf("day").add(2, "day"),
				title: "Item 6-2-1",
			},
			{
				startDate: dayjs().startOf("day").add(2, "day"),
				endDate: dayjs().startOf("day").add(3, "day"),
				title: "Item 6-2-2",
			},
		],
	},
	{
		group: {
			title: "Group 7 (Full Day)",
			subtitle: "Whole Time Frame",
		},
		items: [
			{
				// this case ends after the end of the day and starts before
				startDate: dayjs().startOf("day"),
				endDate: dayjs().endOf("day"),
				title: "Item 7-1",
			},
		],
	},
]

function createTestItems(
	startDate: Dayjs,
	endDate: Dayjs,
	groupNumber: number,
) {
	const itemCount = Math.round(Math.random() * 10)
	const ret = []
	for (let i = 0; i < itemCount; i++) {
		const addDays = Math.round(
			Math.random() * endDate.diff(startDate, "days"),
		)
		const addStartMinutes = Math.round(Math.random() * 3 * 60)
		const addEndMinutes = Math.round(Math.random() * 6 * 60)
		const itemStartDate = startDate
			.add(addDays, "days")
			.add(addStartMinutes, "minutes")
		const itemEndDate = itemStartDate.add(addEndMinutes, "minutes")
		ret.push({
			startDate: itemStartDate,
			endDate: itemEndDate,
			title: `Random Item ${groupNumber}-${i}`,
		})
	}
	return ret
}

function createTestEntries(
	startDate: Dayjs,
	endDate: Dayjs,
	currentEntries: TimeTableEntry<ExampleGroup, ExampleItem>[],
) {
	if (startDate.isSame(startDateInitial) && endDate.isSame(endDateInitial)) {
		return exampleEntries
	}

	const groupWithItems = currentEntries.map((group, g) => {
		const newGroup: TimeTableEntry<ExampleGroup, ExampleItem> = {
			group: group.group,
			items: createTestItems(startDate, endDate, g),
		}
		return newGroup
	})

	return groupWithItems
}

function createMoreTestGroups(
	startDate: Dayjs,
	endDate: Dayjs,
	count: number,
	startCount: number,
) {
	const newGroups: TimeTableEntry<ExampleGroup, ExampleItem>[] = []
	for (let i = 0; i < count; i++) {
		const groupNumber = startCount + i
		newGroups.push({
			group: {
				title: `Group ${groupNumber}`,
				subtitle: "random",
			},
			items: createTestItems(startDate, endDate, groupNumber),
		})
	}
	return newGroups
}

const startDateInitial = dayjs().startOf("day").add(-1, "day").add(8, "hours")
const endDateInitial = dayjs().startOf("day").add(5, "days").add(20, "hours")

function Example() {
	//#region timetable

	const [timeSteps, setTimeSteps] = useState(60)
	const [timeStepsInputValue, setTimeStepsInputValue] = useState(110)
	const [groupHeaderColumnWidth, setGroupHeaderColumnWidth] = useState(150)
	const [columnWidth, setColumnWidth] = useState(70)
	const [disabledWeekendInteractions, setDisabledWeekendInteractions] =
		useState(true)
	const [showTimeSlotHeader, setShowTimeSlotHeader] = useState(true)
	const [hideOutOfDayRangeMarkers, setHideOutOfDayRangeMarkers] =
		useState(false)

	const [timeFrame, setTimeFrame] = useState({
		startDate: startDateInitial,
		endDate: endDateInitial,
	})

	const [selectedTimeSlotItem, setSelectedTimeSlotItem] = useState<
		ExampleItem | undefined
	>()

	const [entries, setEntries] = useState(exampleEntries)

	const onTimeSlotItemClickCB = useCallback(
		(group: ExampleGroup, item: ExampleItem) => {
			setSelectedTimeSlotItem((prev) => {
				if (prev === item) {
					return undefined
				}
				return item
			})
		},
		[],
	)

	//#region time frame and groups pagination
	const requestNextTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const nextStartDate = timeFrame.startDate.add(dayDiff, "days")
		const nextEndDate = timeFrame.endDate.add(dayDiff, "days")
		setTimeFrame({
			startDate: nextStartDate,
			endDate: nextEndDate,
		})
		const newEntries = createTestEntries(
			nextStartDate,
			nextEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestPrevTimeFrameCB = () => {
		const dayDiff = timeFrame.endDate.diff(timeFrame.startDate, "days")
		const prevStartDate = timeFrame.startDate.add(-dayDiff, "days")
		const prevEndDate = timeFrame.endDate.add(-dayDiff, "days")
		setTimeFrame({
			startDate: prevStartDate,
			endDate: prevEndDate,
		})
		const newEntries = createTestEntries(
			prevStartDate,
			prevEndDate,
			entries,
		)
		setEntries(newEntries)
	}

	const requestMoreEntriesCB = () => {
		const missing = entries.length + 10 - exampleEntries.length
		const missingGroups = createMoreTestGroups(
			timeFrame.startDate,
			timeFrame.endDate,
			missing,
			exampleEntries.length,
		)
		setEntries([...exampleEntries, ...missingGroups])
	}
	//#endregion

	const [showCreateNewItemModal, setShowCreateNewItemModal] = useState(false)
	const [selectedTimeRange, setSelectedTimeRange] = useState<
		{ startDate: Dayjs; endDate: Dayjs; group: TimeTableGroup } | undefined
	>()
	const [clearSelectedTimeRangeCB, setClearSelectedTimeRangeCB] =
		useState<() => void>()
	const [disableTimeRangeSelection, setDisableTimeRangeSelection] =
		useState(false)

	const onCreateNewItemConfirmCB = useCallback(
		(group: TimeTableGroup, item: TimeSlotBooking) => {
			setShowCreateNewItemModal(false)
			setEntries((prev) => {
				const groupIndex = prev.findIndex((e) => e.group === group)
				if (groupIndex === -1) {
					console.error("group not found", group)
					return prev
				}
				const newEntries = [...prev]
				const newGroup = { ...newEntries[groupIndex] }
				const newGroupItems = [...newGroup.items]
				newGroupItems.push(item)
				newGroup.items = newGroupItems
				newEntries[groupIndex] = newGroup
				// clears the selected time range in the table using a callback set by the selected time slots context in the time table
				if (clearSelectedTimeRangeCB) {
					clearSelectedTimeRangeCB()
				}
				return newEntries
			})
			setSelectedTimeRange(undefined)
		},
		[clearSelectedTimeRangeCB],
	)

	const [viewType, setViewType] = useState<TimeTableViewType>("hours")

	const translation = useTranslation() as TranslatedTimeTableMessages
	const nowOverwrite = undefined //startDate.add( 1, "day" ).add( 1, "hour" ).add( 37, "minutes" );

	return (
		<>
			<div className="flex gap-8">
				{/* time table setup values */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label className="mr-4" htmlFor="startdate">
						Start:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.startDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: dayjs(e.target.value),
								endDate: timeFrame.endDate,
							})
						}}
					/>
					<label className="mr-4" htmlFor="enddate">
						End:
					</label>
					<input
						type="datetime-local"
						value={timeFrame.endDate.format("YYYY-MM-DDTHH:mm")}
						onChange={(e) => {
							setTimeFrame({
								startDate: timeFrame.startDate,
								endDate: dayjs(e.target.value),
							})
						}}
					/>
					<label className="mr-4" htmlFor="timesteps">
						Time Steps [min]:
					</label>
					<input
						type="number"
						name="timesteps"
						value={timeStepsInputValue}
						step={10}
						min={10}
						max={1200}
						onChange={(e) => {
							const val = parseInt(e.target.value)
							setTimeStepsInputValue(val)
							debounceHelper(() => setTimeSteps(val))
						}}
						className="mr-1 w-16 text-center"
					/>
				</div>
				{/* time table layout */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label className="mr-4" htmlFor="firstcolwidth">
						Group Header Width [px]:
					</label>
					<input
						type="number"
						name="firstcolwidth"
						value={groupHeaderColumnWidth}
						step={10}
						min={10}
						max={300}
						onChange={(e) =>
							debounceHelper(() =>
								setGroupHeaderColumnWidth(
									parseInt(e.target.value),
								),
							)
						}
						className="mr-1 w-16 text-center"
					/>
					<label className="mr-4" htmlFor="colwidth">
						Column Width [px]:
					</label>
					<input
						type="number"
						name="colwidth"
						value={columnWidth}
						step={10}
						min={10}
						max={1000}
						onChange={(e) =>
							debounceHelper(() =>
								setColumnWidth(parseInt(e.target.value)),
							)
						}
						className="mr-1 w-16 text-center"
					/>
				</div>
				{/* time table settings */}
				<div className="grid grid-cols-2 items-start gap-2">
					<label htmlFor="diableweekends" className="mr-4">
						Disable Weekend Interactions:
					</label>
					<input
						type="checkbox"
						name="disableweekends"
						checked={disabledWeekendInteractions}
						onChange={(e) =>
							setDisabledWeekendInteractions(e.target.checked)
						}
						className="mr-1 text-center"
					/>
					<label htmlFor="showtimeslotheader" className="mr-4">
						Show Time Slot Header:
					</label>
					<input
						type="checkbox"
						name="showtimeslotheader"
						checked={showTimeSlotHeader}
						onChange={(e) => {
							setShowTimeSlotHeader(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label htmlFor="hideoutofdayrange" className="mr-4">
						Hide Out Of Day Range Markers:
					</label>
					<input
						type="checkbox"
						name="hideoutofdayrange"
						checked={hideOutOfDayRangeMarkers}
						onChange={(e) => {
							setHideOutOfDayRangeMarkers(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label
						htmlFor="disabletimerangeselection"
						style={{
							marginRight: "1rem",
						}}
					>
						Disable Time Range Selection
					</label>
					<input
						type="checkbox"
						name="disabletimerangeselection"
						checked={disableTimeRangeSelection}
						onChange={(e) => {
							setDisableTimeRangeSelection(e.target.checked)
						}}
						className="mr-1 text-center"
					/>
					<label htmlFor="viewtype" className="mr-4">
						View Type
					</label>
					<select
						name="viewtype"
						onChange={(e) =>
							setViewType(e.target.value as TimeTableViewType)
						}
						value={viewType}
					>
						<option value="hours">Hours</option>
						<option value="days">Days</option>
						<option value="weeks">Weeks</option>
						<option value="months">Months</option>
						<option value="years">Years</option>
					</select>
				</div>
			</div>
			<div className="flex-start flex">
				<Button
					onClick={requestPrevTimeFrameCB}
					title="Previous Time Frame"
					className="mb-2 mr-2"
				>
					<ChevronLeftIcon label="prevtimeframe" />
				</Button>
				<Button
					onClick={requestNextTimeFrameCB}
					title="Next Time Frame"
					className="mb-2 mr-2"
				>
					<ChevronRightIcon label="nexttimeframe" />
				</Button>
				<Button
					disabled={!selectedTimeRange}
					onClick={() => {
						setShowCreateNewItemModal(true)
					}}
					title="Create New Item"
					className="mb-2 mr-2"
				>
					Create New Item
				</Button>
			</div>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={groupHeaderColumnWidth}
					columnWidth={columnWidth}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					timeStepsMinutes={timeSteps}
					entries={entries}
					selectedTimeSlotItem={selectedTimeSlotItem}
					/*renderGroup={ Group }
					renderTimeSlotItem={ Item }
					renderPlaceHolder={ ( props: PlaceholderItemProps<ExampleGroup> ) => (
						<div
							style={ { height: props.height, backgroundColor: "rgba(0,0,0,0.1)", textAlign: "center" } }
							onClick={ () => props.clearTimeRangeSelectionCB() }
						>
							Placeholder
						</div>
					) }*/
					onTimeSlotItemClick={onTimeSlotItemClickCB}
					nowOverwrite={nowOverwrite}
					timeTableMessages={translation}
					onTimeRangeSelected={
						!disableTimeRangeSelection
							? setSelectedTimeRange
							: undefined
					}
					setClearSelectedTimeRangeCB={setClearSelectedTimeRangeCB}
					disableWeekendInteractions={disabledWeekendInteractions}
					showTimeSlotHeader={showTimeSlotHeader}
					hideOutOfRangeMarkers={hideOutOfDayRangeMarkers}
					isCellDisabled={(group, start) => {
						if (group.title === "Group 2") {
							return start.isBefore(dayjs().startOf("day"))
						}
						return false
					}}
					viewType={viewType}
				/>
			</div>
			<Button title="Load more entries." onClick={requestMoreEntriesCB}>
				<ChevronDownIcon label="entryloader" />
			</Button>
			{showCreateNewItemModal && selectedTimeRange && (
				<CreateNewTimeTableItemDialog
					group={selectedTimeRange.group}
					startDate={selectedTimeRange.startDate}
					endDate={selectedTimeRange.endDate}
					onCancel={() => setShowCreateNewItemModal(false)}
					onConfirm={onCreateNewItemConfirmCB}
					timeSteps={timeSteps}
				/>
			)}
		</>
	)

	//endregion timetable
}

function ExampleCalendar() {
	//#region timetabledays
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("day"),
			endDate: endDateInitial.startOf("day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages
	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					showTimeSlotHeader={false}
					viewType={"days"}
				/>
			</div>
		</>
	)

	//#endregion timetabledays
}

function ExampleMonthCalendar() {
	//region timetablemonths
	const timeFrame = useMemo(
		() => ({
			startDate: startDateInitial.startOf("month").subtract(1, "day"),
			endDate: endDateInitial.endOf("month").add(1, "day"),
		}),
		[],
	)

	const translation = useTranslation() as TranslatedTimeTableMessages

	return (
		<>
			<div
				style={{
					height: "600px",
				}}
			>
				<LPTimeTable
					groupHeaderColumnWidth={150}
					columnWidth={70}
					startDate={timeFrame.startDate}
					endDate={timeFrame.endDate}
					entries={exampleEntries}
					timeTableMessages={translation}
					disableWeekendInteractions={true}
					viewType={"months"}
					showTimeSlotHeader={false}
				/>
			</div>
		</>
	)

	//#endregion timetablemonths
}

export default function TimeTableShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Time Table"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <Example />,
					sourceCodeExampleId: "timetable",
				},
				{
					title: "Days",
					example: <ExampleCalendar />,
					sourceCodeExampleId: "timetabledays",
				},
				{
					title: "Months",
					example: <ExampleMonthCalendar />,
					sourceCodeExampleId: "timetablemonths",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import {
	Button,
	Checkbox,
	Dropdown,
	Input,
	Label,
	Select,
} from "@linked-planet/ui-kit-ts"

//#region layeringexample
function Example() {
	return (
		<div className="bg-surface hover:bg-surface-hovered active:bg-surface-pressed border-border border p-4">
			bg-surface
			<div className="flex p-4">
				<Input placeholder="Test Input" />
				<Input disabled placeholder="Test Input Disabled" />
				<Select
					options={[
						{ label: "Test", value: "test" },
						{ label: "Test 2", value: "test2" },
					]}
					placeholder="Test Select"
				/>
				<Dropdown.Menu trigger="Dropdown">
					<Dropdown.Item>Test</Dropdown.Item>
					<Dropdown.Item>Test 2</Dropdown.Item>
				</Dropdown.Menu>
			</div>
			<div className="bg-surface-raised hover:bg-surface-raised-hovered active:bg-surface-raised-pressed border-border border p-4">
				bg-surface-raised
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
				<div className="bg-surface-overlay hover:bg-surface-overlay-hovered active:bg-surface-overlay-pressed border-border border p-4">
					bg-surface-overlay
					<div className="p-4">
						<Input
							placeholder="Test Input"
							errorMessage="TEST"
							invalid
						/>
						<Input disabled placeholder="Test Input Disabled" />
					</div>
				</div>
			</div>
			<div className="bg-surface-sunken border-border mt-4 border p-4">
				bg-surface-sunken
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
			</div>
			<div className="border-border shadow-raised mt-4 border p-4">
				shadow-raised
				<div className="p-4">
					<Input placeholder="Test Input" />
					<Input disabled placeholder="Test Input Disabled" />
				</div>
			</div>
			<div className="border-border shadow-overflow mt-4 border p-4">
				shadow-overflow
				<div className="p-4">
					<Label>Test Label</Label>
					<Input placeholder="Test Input" />
					<Label>Test Label 2</Label>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<Label>Test Label 3</Label>
					<Checkbox label="Test Checkbox" />
				</div>
			</div>
			<div className="border-border shadow-overlay mt-4 border p-4">
				shadow-overlay
				<div className="flex">
					<Input placeholder="Test Input" />
					<div>
						<Button>In Div</Button>
					</div>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<div>
						<Dropdown.Menu trigger="DD in Div">
							<Dropdown.Item>Test</Dropdown.Item>
							<Dropdown.Item>Test 2</Dropdown.Item>
						</Dropdown.Menu>
					</div>
				</div>
				<div className="mt-4 flex">
					<Input placeholder="Test Input" />
					<Button>In Div</Button>
					<Select
						options={[
							{ label: "Test", value: "test" },
							{ label: "Test 2", value: "test2" },
						]}
						placeholder="Test Select"
					/>
					<Dropdown.Menu trigger="DD in Div">
						<Dropdown.Item>Test</Dropdown.Item>
						<Dropdown.Item>Test 2</Dropdown.Item>
					</Dropdown.Menu>
				</div>
			</div>
		</div>
	)
}
//#endregion layeringexample

export default function LayeringShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Layering"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="Not a component but only a showcase of the color layering system."
			examples={[
				{
					title: "Layering",
					example: <Example />,
					sourceCodeExampleId: "layeringexample",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import { LoadingSpinner } from "@linked-planet/ui-kit-ts"

export default function LoadingSpinnerShowcase(props: ShowcaseProps) {
	//#region loadingspinner
	const example = (
		<div className="flex gap-4">
			<LoadingSpinner />
			<LoadingSpinner size="xsmall" />
			<LoadingSpinner size="small" />
			<LoadingSpinner size="medium" />
			<LoadingSpinner size="large" />
			<LoadingSpinner size="xlarge" />
		</div>
	)
	//#endregion loadingspinner

	return (
		<ShowcaseWrapperItem
			name="Loading Spinner"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "loadingspinner",
				},
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import Lozenge from "@atlaskit/lozenge"

function LozengeShowcase(props: ShowcaseProps) {
	//#region lozenge
	const example = (
		<>
			<Lozenge>First lozenge</Lozenge>
			<Lozenge appearance="new">Colored lozenge</Lozenge>
			<Lozenge appearance="success" isBold>
				Colored bold lozenge
			</Lozenge>
			<Lozenge appearance="success" isBold={false}>
				Colored non-bold lozenge
			</Lozenge>
		</>
	)
	//#endregion lozenge

	return (
		<ShowcaseWrapperItem
			name="Lozenge"
			{...props}
			packages={[
				{
					name: "@atlaskit/lozenge",
					url: "https://atlassian.design/components/lozenge/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "lozenge",
				},
			]}
		/>
	)
}

export default LozengeShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { HeadingItem, MenuGroup } from "@atlaskit/menu"
import { SimpleTag } from "@linked-planet/ui-kit-ts"
import { Badge } from "@linked-planet/ui-kit-ts"

function MenuShowcase(props: ShowcaseProps) {
	//#region menu
	const [items] = useState(["Menu A", "Menu B", "Menu C"])
	const [selectedItems, setSelectedItems] = useState(["Menu A"])
	const example = (
		<div>
			<MenuGroup>
				<HeadingItem>
					<h4>Filter</h4>
				</HeadingItem>

				{items.map((item) => {
					return (
						<a
							key={item}
							onClick={() => {
								if (selectedItems.includes(item)) {
									setSelectedItems([
										...selectedItems.filter(
											(it) => it != item,
										),
									])
								} else {
									setSelectedItems([...selectedItems, item])
								}
							}}
						>
							<SimpleTag
								appearance={
									selectedItems.includes(item)
										? "gray"
										: undefined
								}
								text={item}
							/>
							<Badge appearance="default">0</Badge>
						</a>
					)
				})}
			</MenuGroup>
		</div>
	)
	//#endregion menu

	return (
		<ShowcaseWrapperItem
			name="Menu"
			{...props}
			packages={[
				{
					name: "@atlaskit/menu",
					url: "https://atlassian.design/components/menu/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "menu" },
			]}
		/>
	)
}

export default MenuShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import CrossIcon from "@atlaskit/icon/glyph/cross"
import {
	default as AKModal,
	ModalBody as AKModalBody,
	ModalFooter as AKModalFooter,
	ModalHeader as AKModalHeader,
	ModalTitle as AKModalTitle,
	ModalTransition as AKModalTransition,
} from "@atlaskit/modal-dialog"
import {
	Modal,
	Select,
	Button,
	ButtonGroup,
	Dropdown,
	Collapsible,
} from "@linked-planet/ui-kit-ts"
import { default as AKSelect } from "@atlaskit/select"
import { DropdownMenuItem } from "@radix-ui/react-dropdown-menu"

function AKExample() {
	const [isAKModalActive, setIsAKModalActive] = useState(false)

	const selectOptions = []
	for (let i = 0; i < 100; i++) {
		selectOptions.push({
			label: i.toString(),
			value: i.toString(),
		})
	}

	return (
		<>
			<div>AKModal: {isAKModalActive.toString()}</div>
			<Button onClick={() => setIsAKModalActive(true)}>
				Show AK Modal
			</Button>

			{isAKModalActive && (
				<AKModalTransition>
					<AKModal onClose={() => setIsAKModalActive(false)}>
						<AKModalHeader>
							<AKModalTitle>Sample Modal</AKModalTitle>
							<Button
								appearance="link"
								onClick={() => setIsAKModalActive(false)}
							>
								<CrossIcon label="Close popup" />
							</Button>
						</AKModalHeader>

						<AKModalBody>
							<p>This is the body of the AK modal.</p>
							<AKSelect options={selectOptions}></AKSelect>
							<Select
								placeholder="Choose"
								options={selectOptions}
								side="bottom"
								align="end"
								className="z-10"
							></Select>
							<>
								Lorem, ipsum dolor sit amet consectetur
								adipisicing elit. Distinctio ipsam harum rerum
								quia, nam, autem non, commodi expedita dolore
								quisquam saepe odit maiores id alias reiciendis.
								Aut aperiam minus eum. Lorem ipsum dolor sit
								amet consectetur adipisicing elit. Illum quos
								dolorum officia id porro illo sit voluptates
								error doloremque? Iste deserunt amet illo
								incidunt modi. Facilis reiciendis ratione at
								veritatis. Lorem ipsum dolor sit amet
								consectetur, adipisicing elit. Deserunt non,
								perspiciatis voluptate cumque vel eveniet
								ratione sequi ullam facilis! Beatae, voluptatem
								aperiam consequatur assumenda consectetur
								possimus accusantium maxime similique labore!
								Lorem ipsum dolor sit amet consectetur,
								adipisicing elit. Ullam, possimus facere ut odit
								mollitia vel consectetur earum reiciendis beatae
								inventore fugiat, quo eaque ipsum soluta facilis
								doloremque, voluptatibus odio officiis. Lorem
								ipsum dolor sit amet consectetur adipisicing
								elit. Laudantium voluptatum aut voluptates
								distinctio nam neque dolore, maiores autem
								impedit, doloribus eveniet laborum
								necessitatibus ex! Possimus odit in commodi
								nulla architecto. Lorem ipsum dolor sit amet
								consectetur adipisicing elit. Officia, facere
								reiciendis incidunt obcaecati aut corrupti
								tempora commodi nam aspernatur et quas beatae
								delectus perspiciatis alias quia inventore
								molestias quis exercitationem? Lorem, ipsum
								dolor sit amet consectetur adipisicing elit.
								Blanditiis temporibus doloremque nam molestiae
								quidem, repellendus eligendi ex magnam quasi.
								Est doloribus quam accusantium? Consequuntur,
								vel sapiente alias repudiandae nisi soluta.
								Lorem ipsum dolor sit amet consectetur
								adipisicing elit. Reiciendis, quibusdam maxime.
								Numquam, explicabo! At vero eligendi cupiditate
								vel molestias eos sint, obcaecati minus suscipit
								ducimus libero reprehenderit, itaque debitis
								atque? Lorem ipsum dolor sit amet, consectetur
								adipisicing elit. Repellendus vero consequatur
								velit dolores neque distinctio harum tempore.
								Vitae, doloribus perferendis! Deserunt
								reprehenderit dolor tempora atque amet officiis
								ea, velit iste. Lorem ipsum dolor sit, amet
								consectetur adipisicing elit. Est nemo
								accusamus, inventore assumenda et nulla. Eius,
								consequuntur repudiandae ea corrupti eos magni
								itaque temporibus blanditiis aspernatur, earum
								quam ut. Laudantium. Lorem ipsum dolor sit amet
								consectetur adipisicing elit. Doloremque
								recusandae, distinctio in fuga vero ullam
								tempora nisi laborum unde architecto, doloribus
								dicta fugiat itaque voluptatibus dolorum vel
								aspernatur, inventore nemo? Lorem ipsum dolor
								sit amet consectetur adipisicing elit. Error,
								corporis animi. Praesentium voluptate, optio
								tenetur harum odio sequi eos possimus officiis
								dignissimos. Laboriosam voluptates fuga est.
								Deserunt quod officia harum!
							</>
						</AKModalBody>

						<AKModalFooter>
							<ButtonGroup>
								<Button
									autoFocus={true}
									appearance="primary"
									onClick={() => setIsAKModalActive(false)}
								>
									Close
								</Button>
							</ButtonGroup>
						</AKModalFooter>
					</AKModal>
				</AKModalTransition>
			)}
		</>
	)
}

function ControlledExample() {
	const selectOptions = []
	for (let i = 0; i < 100; i++) {
		selectOptions.push({
			label: i.toString(),
			value: i.toString(),
		})
	}

	const ddItems = []
	for (let i = 0; i < 100; i++) {
		ddItems.push(<DropdownMenuItem>{i}</DropdownMenuItem>)
	}

	//#region modal_controlled
	const [isModalActive, setIsModalActive] = useState(false)

	return (
		<>
			<div>Modal: {isModalActive.toString()}</div>
			<div>
				<Button onClick={() => setIsModalActive(true)}>
					Show Modal2
				</Button>

				<Modal.Container
					open={isModalActive}
					//defaultOpen={true}
					onOpenChange={(opened) => {
						if (!opened) setIsModalActive(false)
					}}
					shouldCloseOnEscapePress={true}
				>
					<Modal.Header>
						<Modal.Title>Sample Modal</Modal.Title>
						<Button
							appearance="link"
							onClick={() => setIsModalActive(false)}
							className="text-text p-0"
						>
							<CrossIcon label="Close popup" />
						</Button>
					</Modal.Header>
					<Modal.Body>
						<div>
							<p>This is the body of the modal.</p>
						</div>
						<Select
							placeholder="Choose..."
							options={selectOptions}
						/>
						<Select
							placeholder="Choose..."
							options={selectOptions}
							menuPlacement="top"
						/>
						<Dropdown.Menu
							triggerClassName="w-full"
							align="end"
							trigger="Dropdown"
							usePortal={false}
						>
							{ddItems}
						</Dropdown.Menu>
						<Collapsible header={"lorem"} defaultOpen={false}>
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Distinctio ipsam harum rerum quia, nam, autem
							non, commodi expedita dolore quisquam saepe odit
							maiores id alias reiciendis. Aut aperiam minus eum.
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Illum quos dolorum officia id porro illo sit
							voluptates error doloremque? Iste deserunt amet illo
							incidunt modi. Facilis reiciendis ratione at
							veritatis. Lorem ipsum dolor sit amet consectetur,
							adipisicing elit. Deserunt non, perspiciatis
							voluptate cumque vel eveniet ratione sequi ullam
							facilis! Beatae, voluptatem aperiam consequatur
							assumenda consectetur possimus accusantium maxime
							similique labore! Lorem ipsum dolor sit amet
							consectetur, adipisicing elit. Ullam, possimus
							facere ut odit mollitia vel consectetur earum
							reiciendis beatae inventore fugiat, quo eaque ipsum
							soluta facilis doloremque, voluptatibus odio
							officiis. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Laudantium voluptatum aut
							voluptates distinctio nam neque dolore, maiores
							autem impedit, doloribus eveniet laborum
							necessitatibus ex! Possimus odit in commodi nulla
							architecto. Lorem ipsum dolor sit amet consectetur
							adipisicing elit. Officia, facere reiciendis
							incidunt obcaecati aut corrupti tempora commodi nam
							aspernatur et quas beatae delectus perspiciatis
							alias quia inventore molestias quis exercitationem?
							Lorem, ipsum dolor sit amet consectetur adipisicing
							elit. Blanditiis temporibus doloremque nam molestiae
							quidem, repellendus eligendi ex magnam quasi. Est
							doloribus quam accusantium? Consequuntur, vel
							sapiente alias repudiandae nisi soluta. Lorem ipsum
							dolor sit amet consectetur adipisicing elit.
							Reiciendis, quibusdam maxime. Numquam, explicabo! At
							vero eligendi cupiditate vel molestias eos sint,
							obcaecati minus suscipit ducimus libero
							reprehenderit, itaque debitis atque? Lorem ipsum
							dolor sit amet, consectetur adipisicing elit.
							Repellendus vero consequatur velit dolores neque
							distinctio harum tempore. Vitae, doloribus
							perferendis! Deserunt reprehenderit dolor tempora
							atque amet officiis ea, velit iste. Lorem ipsum
							dolor sit, amet consectetur adipisicing elit. Est
							nemo accusamus, inventore assumenda et nulla. Eius,
							consequuntur repudiandae ea corrupti eos magni
							itaque temporibus blanditiis aspernatur, earum quam
							ut. Laudantium. Lorem ipsum dolor sit amet
							consectetur adipisicing elit. Doloremque recusandae,
							distinctio in fuga vero ullam tempora nisi laborum
							unde architecto, doloribus dicta fugiat itaque
							voluptatibus dolorum vel aspernatur, inventore nemo?
							Lorem ipsum dolor sit amet consectetur adipisicing
							elit. Error, corporis animi. Praesentium voluptate,
							optio tenetur harum odio sequi eos possimus officiis
							dignissimos. Laboriosam voluptates fuga est.
							Deserunt quod officia harum!
						</Collapsible>
					</Modal.Body>
					<Modal.Footer>
						<Modal.CloseTrigger>
							<Button appearance="primary" className="z-0">
								Close
							</Button>
						</Modal.CloseTrigger>
					</Modal.Footer>
				</Modal.Container>
			</div>
		</>
	)
	//#endregion modal_controlled
}

function ModalShowcase(props: ShowcaseProps) {
	const example = (
		<>
			<AKExample />
			<ControlledExample />
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Modal"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Modal",
				},
			]}
			examples={[
				{
					title: "Example Controlled",
					example,
					sourceCodeExampleId: "modal_controlled",
				},
			]}
		/>
	)
}

export default ModalShowcase

import React from "react"
import {
	Button,
	ButtonGroup,
	Dropdown,
	PageLayout,
} from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

function PageLayoutExample() {
	//#region pagelayout
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle
						titleMenu={[
							<div key="0">Menu Item 1</div>,
							<div key="1">Menu Item 2</div>,
							<Dropdown.SubMenu
								key="sub"
								trigger="submenu"
								chevronSide="left"
							>
								<Dropdown.Item>Submenu Entry</Dropdown.Item>
							</Dropdown.SubMenu>,
							<Dropdown.ItemGroup key="4" hasSeparator>
								<Dropdown.ItemCheckbox>
									Check 1
								</Dropdown.ItemCheckbox>
								<Dropdown.ItemCheckbox>
									Check 2
								</Dropdown.ItemCheckbox>
							</Dropdown.ItemGroup>,
							<Dropdown.ItemRadioGroup key="5" hasSeparator>
								<Dropdown.ItemRadio value="r1">
									Radio 1
								</Dropdown.ItemRadio>
								<Dropdown.ItemRadio value="r2">
									Radio 2
								</Dropdown.ItemRadio>
							</Dropdown.ItemRadioGroup>,
						]}
					>
						Page Header Title
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						Page Header Sub Title
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<ButtonGroup>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
						</ButtonGroup>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyContent>
						<h1>Text H1</h1>
						<h2>Text H2</h2>
						<h3>Text H3</h3>
						<h4>Text H4</h4>
						<h5>Text H5</h5>
						<h6>Text H6</h6>
						<p>Text P (paragraph)</p>
						<span>Text SPAN</span>
						<pre>Text PRE</pre>
						<code>Text CODE</code>
						<hr />
						<div className="text-2xs">Text 2XS</div>
						<div className="text-xs">Text XS</div>
						<div className="text-sm">Text SM</div>
						<div className="text-md">Text MD</div>
						<div className="text-lg">Text LG</div>
						<div className="text-xl">Text XL</div>
						<div className="text-2xl">Text 2XL</div>
						<div className="text-3xl">Text 3XL</div>
						<div className="text-4xl">Text 4XL</div>
						<div className="text-5xl">Text 5XL</div>
						<div className="text-6xl">Text 6XL</div>
						<div className="text-7xl">Text 7XL</div>
						<div className="text-8xl">Text 8XL</div>
						<div className="text-9xl">Text 9XL</div>
						<hr />
						{Array(100)
							.fill(null)
							.map((_, i) => (
								<div key={i}>Page Body Content {i}</div>
							))}
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayout
}

function PageLayoutExampleWithBodyHeader() {
	//#region pagelayoutwithbodyheader
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader shadow={false}>
					<PageLayout.PageHeaderTitle>
						Page Header Title
					</PageLayout.PageHeaderTitle>
					<PageLayout.PageHeaderSubTitle>
						Page Header Sub Title
					</PageLayout.PageHeaderSubTitle>
					<PageLayout.PageHeaderLine>
						<ButtonGroup>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
							<Button>Button</Button>
						</ButtonGroup>
					</PageLayout.PageHeaderLine>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyHeader>
						Body Header
					</PageLayout.PageBodyHeader>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayoutwithbodyheader
}

function PageLayouOnlyTitle() {
	//#region pagelayouttitleonly
	return (
		<div
			style={{
				height: "40vh",
			}}
		>
			<PageLayout.Page>
				<PageLayout.PageHeader>
					<PageLayout.PageHeaderTitle>
						Page Header Title
					</PageLayout.PageHeaderTitle>
				</PageLayout.PageHeader>
				<PageLayout.PageBody>
					<PageLayout.PageBodyContent>
						Body Content
					</PageLayout.PageBodyContent>
					<PageLayout.PageBodyFooter>
						Page Body Footer
					</PageLayout.PageBodyFooter>
				</PageLayout.PageBody>
			</PageLayout.Page>
		</div>
	)
	//#endregion pagelayouttitleonly
}

export default function PageLayoutShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="PageLayout"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Page Layout",
					example: <PageLayoutExample />,
					sourceCodeExampleId: "pagelayout",
				},
				{
					title: "Body Header",
					example: <PageLayoutExampleWithBodyHeader />,
					sourceCodeExampleId: "pagelayoutwithbodyheader",
				},
				{
					title: "Title Only",
					example: <PageLayouOnlyTitle />,
					sourceCodeExampleId: "pagelayouttitleonly",
				},
			]}
		/>
	)
}

import React, { useMemo, useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Pagination } from "@linked-planet/ui-kit-ts"
//import { default as AKPagination } from "@atlaskit/pagination"

function PageExample() {
	//#region pagination
	const [selectedPage, setSelectedPage] = useState(1)
	const [pageSize, setPageSize] = useState(10)

	const pages = useMemo(
		() => [...Array(100)].map((item, index) => index + 1),
		[],
	)

	return (
		<>
			<Pagination
				pages={pages}
				currentPage={selectedPage}
				onPageChange={(page) => setSelectedPage(page)}
				totalPages={10}
				//maxPageButtons={10}
				pageSize={pageSize}
				pageSizes={[10, 20, 50, 100]}
				onPageSizeChange={setPageSize}
				pageSizeMenuSide="top"
				pageSizeMenuAlign="end"
			/>
		</>
	)
	//#endregion pagination
}

function IndexExample() {
	//#region pagination-index
	const [selectedIndex, setSelectedIndex] = useState(0)
	const [pageSize, setPageSize] = useState(10)

	const pages = useMemo(
		() => [...Array(10)].map((item, index) => index + 1),
		[],
	)

	return (
		<>
			<Pagination
				pages={pages}
				currentPageIndex={selectedIndex}
				onPageIndexChange={(i) => setSelectedIndex(i)}
				totalPages={10}
				maxPageButtons={7}
				pageSize={pageSize}
				pageSizes={[10, 20, 50, 100]}
				onPageSizeChange={setPageSize}
				pageSizeMenuSide="top"
				pageSizeMenuAlign="end"
			/>
			{/*<AKPagination pages={pages} max={6} selectedIndex={selectedIndex} />*/}
		</>
	)
	//#endregion pagination-index
}

function PaginationShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Pagination"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single#Pagination",
				},
			]}
			examples={[
				{
					title: "Example",
					example: <PageExample />,
					sourceCodeExampleId: "pagination",
				},
				{
					title: "Example Index",
					example: <IndexExample />,
					sourceCodeExampleId: "pagination-index",
				},
			]}
		/>
	)
}

export default PaginationShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { Popup } from "@atlaskit/popup"
import Button from "@atlaskit/button"

function PopupShowcase(props: ShowcaseProps) {
	//#region popup
	const [isPopupActive, setIsPopupActive] = useState(false)
	const example = (
		<Popup
			isOpen={isPopupActive}
			placement="top"
			onClose={() => setIsPopupActive(false)}
			trigger={() => (
				<Button
					onClick={() => setIsPopupActive(true)}
					isSelected={isPopupActive}
				>
					OpenPopup
				</Button>
			)}
			content={() => (
				<div style={{ padding: "15px 15px" }}>
					<span>Popup content</span>
				</div>
			)}
		/>
	)
	//#endregion popup

	return (
		<ShowcaseWrapperItem
			name="Popup"
			{...props}
			packages={[
				{
					name: "@atlaskit/popup",
					url: "https://atlassian.design/components/popup/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "popup" },
			]}
		/>
	)
}

export default PopupShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { default as AKSelect } from "@atlaskit/select"
import {
	Button,
	ButtonGroup,
	Label,
	OptionGroupType,
	Select,
} from "@linked-planet/ui-kit-ts"
import { useForm } from "react-hook-form"

//#region select2form-uncontrolled
type FormData = {
	singleValue: string
	multiValues: string[]
	groupedMultiValues: string[]
}

function FormExample() {
	const availableOptions = [
		{ label: "First option", value: "first" },
		{ label: "Second option", value: "second" },
		{ label: "Third option", value: "third" },
		{ label: "Fourth option", value: "fourth" },
	]

	const availableGroupOptions: OptionGroupType<string>[] = [
		{
			label: "First group",
			options: [
				{ label: "First option", value: "first" },
				{ label: "Second option", value: "second" },
			],
		},
		{
			label: "Second group",
			options: [
				{ label: "Third option", value: "third" },
				{ label: "Fourth option", value: "fourth", isDisabled: true },
			],
		},
	]

	const { handleSubmit, control, reset } = useForm<FormData>({
		defaultValues: {
			singleValue: availableOptions[0].value,
			multiValues: [availableOptions[0].value, availableOptions[1].value],
			groupedMultiValues: [availableGroupOptions[0].options[0].value],
		},
	})

	return (
		<>
			<form
				onSubmit={handleSubmit((data) => console.log(data))}
				onReset={(e) => {
					e.preventDefault()
					reset()
				}}
			>
				<Label>Single Uncontrolled</Label>
				<Select<FormData, string>
					control={control}
					name="singleValue"
					options={availableOptions}
					usePortal
					errorMessage="TEST"
					invalid
				/>
				<Label>Multi Uncontrolled</Label>
				<Select<FormData, string>
					control={control}
					isMulti
					name="multiValues"
					options={availableOptions}
					usePortal
				/>
				<Label>Grouped Multi</Label>
				{/* string is the value type, FormData the type of the form data for the control, true is the isMulti flag */}
				<Select<FormData, string, true>
					isMulti
					control={control}
					name="groupedMultiValues"
					options={availableGroupOptions}
					usePortal
				/>
				<ButtonGroup className="mt-2 w-full justify-end">
					<Button type="reset">Reset</Button>
					<Button type="submit" appearance="primary">
						Submit
					</Button>
				</ButtonGroup>
			</form>
		</>
	)
}
//#endregion select2form-uncontrolled

//#region select2form-controlled
type FormDataControlled = {
	singleValue: string
	multiValues: string[]
}

function ControlledFormExample() {
	const availableOptions = [
		{ label: "First option", value: "first" },
		{ label: "Second option", value: "second" },
		{ label: "Third option", value: "third" },
		{ label: "Fourth option", value: "fourth" },
	]

	const { handleSubmit, control, reset } = useForm<FormDataControlled>()

	const [selectedControlled, setSelectedControlled] = useState<
		{ label: string; value: string } | undefined | null
	>(availableOptions[1])

	const [selectedControlledMulti, setSelectedControlledMulti] = useState<
		readonly { label: string; value: string }[] | undefined | null
	>([availableOptions[1], availableOptions[2]])

	return (
		<>
			<form
				onSubmit={handleSubmit((data) => console.log(data))}
				onReset={(e) => {
					e.preventDefault()
					reset()
				}}
			>
				<Label htmlFor="controlled">Controlled Single</Label>
				<Select<FormDataControlled, string, false>
					id="controlled"
					control={control}
					name="singleValue"
					options={availableOptions}
					value={selectedControlled}
					onChange={(value) => setSelectedControlled(value)}
				/>

				<Label htmlFor="controlledmulti">Controlled Multi</Label>
				<Select<FormDataControlled, string, true>
					id="controlledmulti"
					isMulti
					control={control}
					name="multiValues"
					options={availableOptions}
					value={selectedControlledMulti}
					onChange={(value) => setSelectedControlledMulti(value)}
				/>

				<ButtonGroup className="mt-2 w-full justify-end">
					<Button type="submit" appearance="primary">
						Submit
					</Button>
				</ButtonGroup>
			</form>
		</>
	)
}
//#endregion select2form-controlled

function SelectShowcase(props: ShowcaseProps) {
	//#region select
	const example1 = (
		<div className="flex flex-col gap-4">
			<AKSelect
				inputId="select-1"
				options={[
					{ label: "First option", value: "first" },
					{ label: "Second option", value: { test: "bla" } },
				]}
			/>
			<Select
				isCreateable
				isClearable
				placeholder="Select an option"
				onChange={(value) => {
					console.log("VALUE", value)
				}}
				onCreateOption={(value) => {
					console.log("CREATE", value)
				}}
				options={[
					{ label: "First option", value: { test: "first" } },
					{ label: "Second option", value: { test: "second" } },
					{ label: "Third option", value: { test: "third" } },
				]}
				defaultValue={{
					label: "Second option",
					value: { test: "second" },
				}}
			/>

			<Select<{ test: string }, true>
				placeholder="Select an option"
				onChange={(value) => {
					console.log("VALUE", value)
				}}
				isMulti
				options={[
					{ label: "First option", value: { test: "first" } },
					{ label: "Second option", value: { test: "second" } },
					{ label: "Third option", value: { test: "third" } },
				]}
			/>

			{/*<RadixSelect
				placeholder="Select an option"
				options={[
					{ label: "First option", value: "first" },
					{ label: "Second option", value: "second" },
				]}
				isDisabled={false}
				menuIsOpen={true}
			/>*/}
		</div>
	)
	//#endregion select
	//#region select2
	const example2 = (
		<div className="flex flex-col gap-4">
			<AKSelect
				inputId="select-s"
				options={[
					{
						label: "First group",
						options: [
							{ label: "First option", value: "first" },
							{ label: "Second option", value: "second" },
						],
					},
					{
						label: "Second group",
						options: [
							{ label: "Third option", value: "third" },
							{ label: "Fourth option", value: "fourth" },
						],
					},
				]}
			/>
			{/*<RadixSelect
				placeholder="Select a value"
				options={{
					"First Group": [{ label: "First option", value: "first" }],
					"Second Group": [
						{ label: "Second option", value: "second" },
					],
				}}
			/>*/}

			<Select
				placeholder="Select a value 2"
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
			/>

			<Select
				placeholder="Select a value 3"
				isMulti
				options={[
					{
						label: "First group",
						options: [{ label: "First option", value: "first" }],
					},
					{
						label: "Second group",
						options: [{ label: "Second option", value: "second" }],
					},
				]}
			/>
		</div>
	)
	//#endregion select2

	return (
		<ShowcaseWrapperItem
			name="Select"
			{...props}
			packages={[
				{
					name: "@atlaskit/select",
					url: "https://atlassian.design/components/select/examples",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "select",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "select2",
				},
				{
					title: "Form Uncontrolled",
					example: <FormExample />,
					sourceCodeExampleId: "select2form-uncontrolled",
				},
				{
					title: "Form Controlled",
					example: <ControlledFormExample />,
					sourceCodeExampleId: "select2form-controlled",
				},
			]}
		/>
	)
}

export default SelectShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { LeftSidebar } from "@linked-planet/ui-kit-ts"
export function SidebarShowcase(props: ShowcaseProps) {
	//#region sidebar
	const example = (
		<div className="h-[300px]">
			<LeftSidebar widthVariable="--leftSidebarWidth2">
				<div>Sidebar Entry</div>
			</LeftSidebar>
		</div>
	)
	//#endregion sidebar

	return (
		<ShowcaseWrapperItem
			name="Sidebar"
			description="A sidebar component as replacement for the left sidebar of the page layout. WIP"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Sidebar",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "sidbear" },
			]}
		/>
	)
}

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TableTree, {
	Cell,
	Header,
	Headers,
	Row,
	Rows,
} from "@atlaskit/table-tree"

function TableTreeShowcase(props: ShowcaseProps) {
	//#region tabletree
	interface BookData {
		title: string
		description: string
	}

	interface TableTreeItem {
		id: string
		title: string
		description: string
		children?: TableTreeItem[]
	}

	const bookDataTree = [
		{
			id: "1",
			content: { title: "It is lonely at the top.", description: "1" },
			hasChildren: true,
			children: [
				{
					id: "1.1",
					content: {
						title: "Look at me! I am nested.",
						description: "1.1",
					},
					hasChildren: true,
					children: [
						{
							id: "1.1.1",
							content: {
								title: "I am deeply nested.",
								description: "1.1.1",
							},
							hasChildren: false,
						},
					],
				},
			],
		},
		{
			id: "2",
			content: { title: "Typescript is fun", description: "2" },
			hasChildren: false,
		},
	]

	const bookDataTree2 = [
		{
			id: "1",
			title: "It is lonely at the top.",
			description: "1",
			children: [
				{
					id: "1.1",
					title: "Look at me! I am nested.",
					description: "1.1",
					children: [
						{
							id: "1.1.1",
							title: "I am deeply nested.",
							description: "1.1.1",
						},
					],
				},
			],
		},
		{
			id: "2",
			title: "Typescript is fun",
			description: "2",
		},
	]
	const example1 = (
		<TableTree
			headers={["Title", "Numbering"]}
			columns={[
				(bookData: BookData) => <span>{bookData.title}</span>,
				(bookData: BookData) => <span>{bookData.description}</span>,
			]}
			columnWidths={[300, 100]}
			items={bookDataTree}
		/>
	)
	//#endregion tabletree

	//#region tabletree2
	const example2 = (
		<TableTree>
			<Headers>
				<Header
					width="400px"
					onClick={() => window.alert("OnClick Chapter Title Header")}
				>
					Chapter Title (Click me)
				</Header>
				<Header width="100px">Numbering</Header>
			</Headers>
			<Rows
				items={bookDataTree2}
				render={(data: TableTreeItem) => (
					<Row
						itemId={data.description}
						items={data.children}
						hasChildren={
							data?.children != undefined &&
							data.children.length > 0
						}
						isDefaultExpaned={false}
					>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert("onClick: " + data.title)
								}
							>
								{data.title}
							</div>
						</Cell>
						<Cell singleLine={true}>
							<div
								onClick={() =>
									window.alert("onClick: " + data.description)
								}
							>
								{data.description}
							</div>
						</Cell>
					</Row>
				)}
			/>
		</TableTree>
	)
	//#endregion tabletree2

	return (
		<ShowcaseWrapperItem
			name="TableTree"
			{...props}
			packages={[
				{
					name: "@atlaskit/table-tree",
					url: "https://atlassian.design/components/table-tree",
				},
			]}
			examples={[
				{
					title: "Example 1",
					example: example1,
					sourceCodeExampleId: "tabletree",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "tabletree2",
				},
			]}
		/>
	)
}

export default TableTreeShowcase

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import AKTabs, {
	Tab as AKTab,
	TabList as AKTabList,
	TabPanel as AKTabPanel,
} from "@atlaskit/tabs"

import { Tabs, TabList, TabPanel, Tab, Button } from "@linked-planet/ui-kit-ts"

function AutomaticTabsValue() {
	//#region tabs_automatic_value
	return (
		<Tabs>
			<TabList>
				<Tab>Tab 1</Tab>
				<Tab>Tab 2</Tab>
				<Tab disabled>Tab 3</Tab>
			</TabList>
			<TabPanel>
				<span>First Content</span>
			</TabPanel>
			<TabPanel>
				<span>Second Content</span>
			</TabPanel>
			<TabPanel>
				<span>Third Content</span>
			</TabPanel>
		</Tabs>
	)
	//#endregion tabs_automatic_value
}

function ExampleLabels() {
	const akExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			{
				<AKTabs id="tab-example" defaultSelected={1}>
					<AKTabList>
						<AKTab>
							<div>AK Tab 1</div>
						</AKTab>
						<AKTab>AK Tab 2</AKTab>
					</AKTabList>
					<AKTabPanel>
						<span>First AK Content</span>
					</AKTabPanel>
					<AKTabPanel>
						<span>Second AK Content</span>
					</AKTabPanel>
				</AKTabs>
			}
		</div>
	)

	//#region tabs_labels
	const lpExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			<Tabs defaultSelected="tab2">
				<TabList>
					<Tab label="Tab 1" />
					<Tab label="tab2">Tab 2</Tab>
				</TabList>
				<TabPanel label="Tab 1">
					<span>First Content</span>
				</TabPanel>
				<TabPanel label="tab2">
					<span>Second Content</span>
				</TabPanel>
			</Tabs>
		</div>
	)
	//#endregion tabs_labels

	return (
		<>
			{akExample}
			{lpExample}
		</>
	)
}

function ExampleControlled() {
	//#region tabscontrolled
	const [selected, setSelected] = useState(0)
	const lpExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			<Tabs
				selected={selected}
				onChange={(t: string) => setSelected(parseInt(t))}
			>
				<TabList>
					<Tab label={0}>
						<div>Tab 1</div>
					</Tab>
					<Tab label={1}>Tab 2</Tab>
				</TabList>
				<TabPanel label={0}>
					<span>First Content</span>
				</TabPanel>
				<TabPanel label={1}>
					<span>Second Content</span>
				</TabPanel>
			</Tabs>
		</div>
	)
	//#endregion tabscontrolled

	const akExample = (
		<div style={{ minWidth: 300, border: "2px solid orange" }}>
			{/*<AKTabs
				id="tab-example-controlled"
				selected={selected}
				onChange={setSelected}
			>
				<AKTabList>
					<AKTab>
						<div>Tab 1</div>
					</AKTab>
					<AKTab>Tab 2</AKTab>
				</AKTabList>
				<AKTabPanel>
					<span>First Content</span>
				</AKTabPanel>
				<AKTabPanel>
					<span>Second Content</span>
				</AKTabPanel>
	</AKTabs>*/}
		</div>
	)

	return (
		<>
			<Button
				onClick={() => {
					setSelected(1)
				}}
			>
				Select second tab
			</Button>
			{akExample}
			{lpExample}
		</>
	)
}

function TabsShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Tabs"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://linked-planet.github.io/ui-kit-ts/single?component=Tabs",
				},
			]}
			description={
				<p>
					If labels are used, they must be consistent between the Tab
					component and the corresponding TabPanel component.
				</p>
			}
			examples={[
				{
					title: "Example",
					example: <AutomaticTabsValue />,
					sourceCodeExampleId: "tabs_automatic_value",
				},
				{
					title: "Example Labels",
					example: <ExampleLabels />,
					sourceCodeExampleId: "tabs_labels",
				},
				{
					title: "Example Controlled",
					example: <ExampleControlled />,
					sourceCodeExampleId: "tabscontrolled",
				},
			]}
		/>
	)
}

export default TabsShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { SimpleTag as AKSimpleTag, default as AKTag } from "@atlaskit/tag"
import AKTagGroup from "@atlaskit/tag-group"
import { TagGroup, SimpleTag, Tag } from "@linked-planet/ui-kit-ts"

function TagShowcase(props: ShowcaseProps) {
	const akExample = (
		<>
			<AKTagGroup alignment="end">
				<AKTag
					onBeforeRemoveAction={() => {
						console.log("ON BEFORE REMOVE")
						return true
					}}
					onAfterRemoveAction={(str) =>
						console.log("ON AFTER REMOVE", str)
					}
					text="Removable Tag"
				/>
				<AKTag isRemovable={false} text="Not Removable Tag" />
				<AKSimpleTag text="Simple Tag" appearance="default" />
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="rounded"
				/>
				<AKSimpleTag
					text="Colored simple Tag"
					color="purple"
					appearance="default"
				/>
			</AKTagGroup>
			<AKTagGroup>
				<AKSimpleTag text="Simple Tag" color="blue" />
			</AKTagGroup>
		</>
	)

	//#region tags
	const lpExample = (
		<div className="flex w-full items-center">
			<div>TEST</div>
			<Tag
				onBeforeRemoveAction={() => {
					console.log("ON BEFORE REMOVE")
					return false
				}}
				onAfterRemoveAction={(str) =>
					console.log("ON AFTER REMOVE", str)
				}
				text="Removable Tag"
			/>
			{/*<TagGroup>
				<Tag
					onBeforeRemoveAction={() => {
						console.log("ON BEFORE REMOVE")
						return false
					}}
					onAfterRemoveAction={(str) =>
						console.log("ON AFTER REMOVE", str)
					}
					text="Removable Tag"
				/>
				<Tag isRemovable={false} text="Not Removable Tag" />
				<SimpleTag text="Simple Tag" />
				<SimpleTag
					text="Colored simple Tag"
					textColor="var(--ds-text-accent-purple-bolder, #172B4D)"
					color="var(--ds-background-accent-purple-subtle, #998DD9)"
					looks="rounded"
				/>
				<SimpleTag
					text="Colored simple Tag"
					textColor="var(--ds-text-accent-purple-bolder, #172B4D)"
					color="var(--ds-background-accent-purple-subtle, #998DD9)"
				/>
				</TagGroup>*/}
			{/*<TagGroup>
				<SimpleTag text="Simple Tag" appearance="danger" />
				<SimpleTag text="Simple Tag" appearance="warning" />
				</TagGroup>*/}
		</div>
	)
	//#endregion tags

	const akColorTags = (
		<AKTagGroup>
			<AKTag color="blue" text="Blue" />
			<AKTag color="blueLight" text="blueLight" />
			<AKSimpleTag color="green" text="green" />
			<AKSimpleTag color="greenLight" text="greenLight" />
			<AKSimpleTag color="grey" text="grey" />
			<AKSimpleTag color="greyLight" text="greyLight" />
			<AKSimpleTag color="purple" text="purple" />
			<AKSimpleTag color="purpleLight" text="purpleLight" />
			<AKSimpleTag color="red" text="red" />
			<AKSimpleTag color="redLight" text="redLight" />
			<AKSimpleTag color="teal" text="teal" />
			<AKSimpleTag color="tealLight" text="tealLight" />
			<AKSimpleTag color="yellow" text="yellow" />
			<AKSimpleTag color="yellowLight" text="yellowLight" />
			<AKSimpleTag color="lime" text="lime" />
			<AKSimpleTag color="limeLight" text="limeLight" />
			<AKSimpleTag color="magenta" text="magenta" />
			<AKSimpleTag color="magentaLight" text="magentaLight" />
			<AKSimpleTag color="orange" text="orange" />
			<AKSimpleTag color="orangeLight" text="orangeLight" />
			<AKSimpleTag color="standard" text="standard" />
		</AKTagGroup>
	)

	//#region tagscolors
	const colorTags = (
		<>
			<TagGroup>
				<Tag appearance="blue" text="Blue" />
				<SimpleTag appearance="green" text="green" />
				<SimpleTag appearance="gray" text="grey" />
				<SimpleTag appearance="purple" text="purple" />
				<SimpleTag appearance="red" text="red" />
				<SimpleTag appearance="teal" text="teal" />
				<SimpleTag appearance="yellow" text="yellow" />
				<SimpleTag appearance="lime" text="lime" />
				<SimpleTag appearance="pink" text="pink" />
				<SimpleTag appearance="orange" text="orange" />
				<SimpleTag appearance="indigo" text="indigo" />
				<SimpleTag appearance="cyan" text="cyan" />
				<SimpleTag appearance="violet" text="violet" />
				<SimpleTag appearance="amber" text="amber" />
				<SimpleTag appearance="emerald" text="emerald" />
				<SimpleTag appearance="fuchsia" text="fuchsia" />
				<SimpleTag appearance="sky" text="sky" />
			</TagGroup>
			<TagGroup>
				<Tag appearance="blueLight" text="blueLight" />
				<SimpleTag appearance="greenLight" text="greenLight" />
				<SimpleTag appearance="grayLight" text="greyLight" />
				<SimpleTag appearance="purpleLight" text="purpleLight" />
				<SimpleTag appearance="redLight" text="redLight" />
				<SimpleTag appearance="tealLight" text="tealLight" />
				<SimpleTag appearance="yellowLight" text="yellowLight" />
				<SimpleTag appearance="limeLight" text="limeLight" />
				<SimpleTag appearance="pinkLight" text="pinkLight" />
				<SimpleTag appearance="orangeLight" text="orangeLight" />
				<SimpleTag appearance="indigoLight" text="indigoLight" />
				<SimpleTag appearance="cyanLight" text="cyanLight" />
				<SimpleTag appearance="violetLight" text="violetLight" />
				<SimpleTag appearance="amberLight" text="amberLight" />
				<SimpleTag appearance="emeraldLight" text="emeraldLight" />
				<SimpleTag appearance="fuchsiaLight" text="fuchsiaLight" />
				<SimpleTag appearance="skyLight" text="skyLight" />
			</TagGroup>
			<TagGroup>
				<Tag appearance="blueBold" text="blueBold" />
				<SimpleTag appearance="greenBold" text="greenBold" />
				<SimpleTag appearance="grayBold" text="greyBold" />
				<SimpleTag appearance="purpleBold" text="purpleBold" />
				<SimpleTag appearance="redBold" text="redBold" />
				<SimpleTag appearance="tealBold" text="tealBold" />
				<SimpleTag appearance="yellowBold" text="yellowBold" />
				<SimpleTag appearance="limeBold" text="limeBold" />
				<SimpleTag appearance="pinkBold" text="pinkBold" />
				<SimpleTag appearance="orangeBold" text="orangeBold" />
				<SimpleTag appearance="indigoBold" text="indigoBold" />
				<SimpleTag appearance="cyanBold" text="cyanBold" />
				<SimpleTag appearance="violetBold" text="violetBold" />
				<SimpleTag appearance="amberBold" text="amberBold" />
				<SimpleTag appearance="emeraldBold" text="emeraldBold" />
				<SimpleTag appearance="fuchsiaBold" text="fuchsiaBold" />
				<SimpleTag appearance="skyBold" text="skyBold" />
			</TagGroup>
			<TagGroup>
				<Tag appearance="default" text="default" />
				<Tag appearance="danger" text="danger" />
				<Tag appearance="warning" text="warning" />
				<Tag appearance="information" text="information" />
				<Tag appearance="success" text="success" />
				<Tag appearance="discovery" text="discovery" />
				<Tag appearance="brand" text="brand" />
			</TagGroup>
		</>
	)
	//#endregion

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	const colors = (
		<div>
			<div>{akColorTags}</div>
			<hr className="border-border my-4" />
			<div>{colorTags}</div>
		</div>
	)

	return (
		<ShowcaseWrapperItem
			name="Tag & Tag-Group"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "http://linked-planet.github.io/ui-kit-ts/single?component=Tag",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tags" },
				{
					title: "Colors",
					example: colors,
					sourceCodeExampleId: "tagscolors",
				},
			]}
		/>
	)
}

export default TagShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TextArea from "@atlaskit/textarea"

function TextAreaShowcase(props: ShowcaseProps) {
	//#region textarea
	const example = (
		<div style={{ minWidth: 300 }}>
			<TextArea defaultValue="Content of text area..." />
		</div>
	)
	//#endregion textarea

	return (
		<ShowcaseWrapperItem
			name="Text area"
			{...props}
			packages={[
				{
					name: "@atlaskit/textarea",
					url: "https://atlassian.design/components/textarea/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "textarea" },
			]}
		/>
	)
}

export default TextAreaShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import TextField from "@atlaskit/textfield"

function TextFieldShowcase(props: ShowcaseProps) {
	//#region textfield
	const example1 = (
		<div style={{ minWidth: 300 }}>
			<TextField defaultValue="Content of text field..." />
		</div>
	)
	//#endregion textfield
	//#region textfield2
	const example2 = (
		<div style={{ minWidth: 300 }}>
			<TextField defaultValue="Password" type="password" />
		</div>
	)
	//#endregion textfield2

	return (
		<ShowcaseWrapperItem
			name="Text field"
			{...props}
			packages={[
				{
					name: "@atlaskit/textfield",
					url: "https://atlassian.design/components/textfield/examples",
				},
			]}
			examples={[
				{
					title: "Example",
					example: example1,
					sourceCodeExampleId: "textfield",
				},
				{
					title: "Example 2",
					example: example2,
					sourceCodeExampleId: "textfield2",
				},
			]}
		/>
	)
}

export default TextFieldShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

import {
	Button,
	ToastFlagContainer,
	showErrorFlag,
	showFlag,
	showFlagExtended,
	showInformationFlag,
	showSuccessFlag,
	showWarningFlag,
} from "@linked-planet/ui-kit-ts"

//#region toastflagShowExtendedFlag
// add the ToastFlagContainer to the root of your app
function ExampleShowExtendedFlag() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						autoClose: 2000,
					})
				}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						inverted: true,
					})
				}
			>
				Standard Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: This flag does not disappear!",
						description:
							"This is a standard not disappearing toast flag.",
					})
				}
			>
				Standard Not Dissapearing
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "success",
					})
				}
			>
				Success
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
					})
				}
			>
				Information
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
						appearance: "information",
						inverted: true,
					})
				}
			>
				Information Inverted
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "error flag",
						description: "This is a error toast flag.",
						appearance: "error",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showFlagExtended({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a discovery!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
						appearance: "warning",
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer />
		</div>
	)
}
//#endregion toastflagShowExtendedFlag

//#region toastflagShowFlag
function ExampleShowFlags() {
	return (
		<div className="flex flex-col gap-3">
			<Button
				onClick={() =>
					showFlag({
						title: "1: Whoa a new flag!",
						description: "This is a standard toast flag.",
						autoClose: 2000,
					})
				}
			>
				Standard
			</Button>
			<Button
				onClick={() =>
					showFlag({
						title: "1: This flag does not disappear!",
						description: "...and is at the bottom left",
						autoClose: false,
						position: "bottom-left",
					})
				}
			>
				Standard Not Dissapearing Bottom Left
			</Button>
			<Button
				onClick={() =>
					showSuccessFlag({
						title: "1: Whoa a new flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
					})
				}
			>
				Success
			</Button>
			<Button
				onClick={() =>
					showInformationFlag({
						title: "1: Whoa a new information flag!",
						description:
							"Marzipan croissant pie. Jelly beans gingerbread caramels brownie icing.",
					})
				}
			>
				Information
			</Button>
			<Button
				onClick={() =>
					showErrorFlag({
						title: "error flag",
						description: "This is a error toast flag.",
					})
				}
			>
				Error
			</Button>
			<Button
				onClick={() =>
					showWarningFlag({
						title: "warning flag",
						description: (
							<div>
								<h2>This is a warning flag!</h2>
								<p>
									Lorem ipsum, dolor sit amet consectetur
									adipisicing elit. Maxime doloribus unde
									laboriosam, beatae accusantium quasi itaque,
									illum necessitatibus amet aspernatur,
									nostrum velit quo earum error nihil.
									Obcaecati totam harum quibusdam!
								</p>
							</div>
						),
					})
				}
			>
				Warning
			</Button>
			<ToastFlagContainer />
		</div>
	)
}
//#endregion toastflagShowFlag

export default function ToastFlagShowcase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Toast Flag Notification"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://www.github.com/linked-planet/ui-kit-ts",
				},
			]}
			description="A toast flag notification is a small notification that appears at the bottom of the screen. It is based on the react-toastify library, and you need to add the ToastContainer component to your app."
			examples={[
				{
					title: "Example Show Flags",
					example: <ExampleShowFlags />,
					sourceCodeExampleId: "toastflagShowFlag",
				},
				{
					title: "Example Show Exended Flag",
					example: <ExampleShowExtendedFlag />,
					sourceCodeExampleId: "toastflagShowExtendedFlag",
				},
			]}
		/>
	)
}

import React, { useState } from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
//import AKToggle from "@atlaskit/toggle"
import { Toggle } from "@linked-planet/ui-kit-ts"

function ToggleShowcase(props: ShowcaseProps) {
	const [isToggleActive, setIsToggleActive] = useState(false)

	const akExample = (
		<>
			{/*<AKToggle
				label="test label"
				name="test name"
				value="test value"
				isChecked={isToggleActive}
				onChange={() => setIsToggleActive(!isToggleActive)}
	/>*/}
		</>
	)

	//#region toggle
	const lpExample = (
		<Toggle
			label="test label"
			name="test name"
			value="test value"
			isChecked={isToggleActive}
			onChange={() => setIsToggleActive(!isToggleActive)}
		/>
	)
	//#endregion toggle

	const example = (
		<>
			{akExample}
			{lpExample}
		</>
	)

	return (
		<ShowcaseWrapperItem
			name="Toggle"
			{...props}
			packages={[
				{
					name: "@atlaskit/toggle",
					url: "https://atlassian.design/components/toggle/examples",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "toggle" },
			]}
		/>
	)
}

export default ToggleShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import SearchIcon from "@atlaskit/icon/glyph/search"
import { Tooltip, TooltipProvider } from "@linked-planet/ui-kit-ts"

//import "react-tooltip/dist/react-tooltip.css" -> imported into the libraries css

function TooltipShowcase(props: ShowcaseProps) {
	//#region tooltip
	const example = (
		<TooltipProvider>
			<div className="flex w-full flex-col items-center">
				<div className="flex gap-4">
					<Tooltip
						side="left"
						tooltipContent={<span>I&apos;m a tooltip</span>}
						usePortal
						align="start"
					>
						<SearchIcon label="" />
					</Tooltip>
					<Tooltip
						tooltipHTMLContent={`<span>I&apos;m a <b>top</b> tooltip with stringified HTML</span>`}
						usePortal={false}
						side="bottom"
						align="end"
					>
						<SearchIcon label="" />
					</Tooltip>
					<Tooltip
						side="top"
						defaultOpen
						tooltipContent={"I'm a top tooltip"}
					>
						<SearchIcon label="" />
					</Tooltip>
					<Tooltip
						side="bottom"
						open
						tooltipContent={
							<p>
								I&apos;m a bottom-end tooltip <br />
								with a unique id.
							</p>
						}
					>
						<SearchIcon label="" />
					</Tooltip>
				</div>
			</div>
		</TooltipProvider>
	)
	//#endregion tooltip

	return (
		<ShowcaseWrapperItem
			name="Tooltip"
			description={
				<p>
					A tooltip component that wraps the children in a div and
					adds a tooltip to it. <br />
					Use tooltipContent for the tooltip content and
					tooltipHTMLContent in case you have stringified HTML as
					tooltip content. <br />
					<br />
					Based on react-tooltip.
					<br />
					The variant defines the color of the tooltip - if it is not
					defined, it is unstyled.
				</p>
			}
			{...props}
			packages={[
				{
					name: "tooltip",
					url: "http://localhost:3000/ui-kit-ts/single#Tooltip",
				},
			]}
			examples={[
				{ title: "Example", example, sourceCodeExampleId: "tooltip" },
			]}
		/>
	)
}

export default TooltipShowcase

import React from "react"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"
import { TruncatedText } from "@linked-planet/ui-kit-ts"

//import "react-tooltip/dist/react-tooltip.css" -> imported into the libraries css

function TruncatedTextShowcase(props: ShowcaseProps) {
	//#region truncatedtext
	const example = (
		<div className="flex gap-4">
			<TruncatedText lines={2}>
				Lorem ipsum dolor sit, amet consectetur adipisicing elit. Iusto
				quod libero hic accusantium porro. Temporibus quaerat molestiae
				recusandae tenetur maiores ab sit ullam deleniti eligendi,
				officia nobis! Id, natus qui?
			</TruncatedText>
			<TruncatedText>
				Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aut
				ipsum iure minus, molestiae rem debitis culpa. Molestiae maxime
				cumque exercitationem commodi dolores, modi dolorem aut. Quis
				reprehenderit temporibus pariatur corrupti?
			</TruncatedText>
			<TruncatedText>only short text, no truncation needed</TruncatedText>
		</div>
	)
	//#endregion truncatedtext

	return (
		<ShowcaseWrapperItem
			name="TruncatedText"
			description={
				<p>
					A container for a text, which truncates the text after a
					given number of lines using an ellipsis, and showing a
					&quot;more&quot; link to expand the text.
				</p>
			}
			{...props}
			packages={[
				{
					name: "truncatedtext",
					url: "http://localhost:3000/ui-kit-ts/single#TruncatedText",
				},
			]}
			examples={[
				{
					title: "Example",
					example,
					sourceCodeExampleId: "truncatedtext",
				},
			]}
		/>
	)
}

export default TruncatedTextShowcase

import React, { useState } from "react"
import {
	debounceHelper,
	rateLimitHelper,
	useDebounceHelper,
	useRateLimitHelper,
} from "@linked-planet/ui-kit-ts"
import ShowcaseWrapperItem, {
	ShowcaseProps,
} from "../../ShowCaseWrapperItem/ShowcaseWrapperItem"

//#region debounceHelper
// export this outside of a component, or this will be recreated on every render
const debounced = debounceHelper()

function DebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")

	return (
		<div>
			<h4>debounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debounced(() => {
						setDebouncedValue(newVal)
					}, 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion debounceHelper

//#region useDebounceHelperHook
function UseDebounceHelperExample() {
	const [value, setValue] = useState("test")
	const [debouncedValue, setDebouncedValue] = useState("test")
	const debHelper = useDebounceHelper()

	return (
		<div>
			<h4>useDebounceHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					debHelper(() => setDebouncedValue(newVal), 1000)
				}}
			/>
			<p>Debounced value: {debouncedValue}</p>
		</div>
	)
}
//#endregion useDebounceHelperHook

//#region rateLimitHelper
// export this outside of a component, or this will be recreated on every render
const rateLimited = rateLimitHelper(500)
function RateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")

	return (
		<div>
			<h4>rateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rateLimited(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion rateLimitHelper

//#region useRateLimitHelper
function UseRateLimitHelperExample() {
	const [value, setValue] = useState("test")
	const [rateLimitedValue, setRateLimitedValue] = useState("test")
	const rlHelper = useRateLimitHelper(500)

	return (
		<div>
			<h4>useRateLimitHelper</h4>
			<input
				value={value}
				onChange={(e) => {
					const newVal = e.target.value
					setValue(newVal)
					rlHelper(() => {
						setRateLimitedValue(newVal)
					})
				}}
			/>
			<p>Rate limited value: {rateLimitedValue}</p>
		</div>
	)
}
//#endregion useRateLimitHelper

export default function UtilsShowCase(props: ShowcaseProps) {
	return (
		<ShowcaseWrapperItem
			name="Utilities"
			{...props}
			packages={[
				{
					name: "@linked-planet/ui-kit-ts",
					url: "https://github.com/linked-planet/ui-kit-ts",
				},
			]}
			examples={[
				{
					title: "Debounce Helper",
					example: <DebounceHelperExample />,
					sourceCodeExampleId: "debounceHelper",
				},
				{
					title: "useDebounce",
					example: <UseDebounceHelperExample />,
					sourceCodeExampleId: "useDebounceHelperHook",
				},
				{
					title: "Rate Limit Helper",
					example: <RateLimitHelperExample />,
					sourceCodeExampleId: "rateLimitHelper",
				},
				{
					title: "useRateLimit",
					example: <UseRateLimitHelperExample />,
					sourceCodeExampleId: "useRateLimitHelper",
				},
			]}
		/>
	)
}
